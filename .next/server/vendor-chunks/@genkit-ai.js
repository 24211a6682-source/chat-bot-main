"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@genkit-ai";
exports.ids = ["vendor-chunks/@genkit-ai"];
exports.modules = {

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/chat.js":
/*!************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/chat.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar chat_exports = {};\n__export(chat_exports, {\n  Chat: () => Chat,\n  MAIN_THREAD: () => MAIN_THREAD,\n  SESSION_ID_ATTR: () => SESSION_ID_ATTR,\n  THREAD_NAME_ATTR: () => THREAD_NAME_ATTR\n});\nmodule.exports = __toCommonJS(chat_exports);\nvar import_async = __webpack_require__(/*! @genkit-ai/core/async */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_index = __webpack_require__(/*! ./index.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/index.js\");\nvar import_session = __webpack_require__(/*! ./session.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/session.js\");\nconst MAIN_THREAD = \"main\";\nconst SESSION_ID_ATTR = `${import_tracing.ATTR_PREFIX}:sessionId`;\nconst THREAD_NAME_ATTR = `${import_tracing.ATTR_PREFIX}:threadName`;\nclass Chat {\n  constructor(session, requestBase, options) {\n    this.session = session;\n    this.sessionId = options.id;\n    this.threadName = options.thread;\n    this.requestBase = requestBase?.then((rb) => {\n      const requestBase2 = { ...rb };\n      if (requestBase2 && requestBase2[\"prompt\"]) {\n        const basePrompt = requestBase2[\"prompt\"];\n        let promptMessage;\n        if (typeof basePrompt === \"string\") {\n          promptMessage = {\n            role: \"user\",\n            content: [{ text: basePrompt }]\n          };\n        } else if (Array.isArray(basePrompt)) {\n          promptMessage = {\n            role: \"user\",\n            content: basePrompt\n          };\n        } else {\n          promptMessage = {\n            role: \"user\",\n            content: [basePrompt]\n          };\n        }\n        requestBase2.messages = [...requestBase2.messages ?? [], promptMessage];\n      }\n      if (hasPreamble(requestBase2.messages)) {\n        requestBase2.messages = [\n          // if request base contains a preamble, always put it first\n          ...getPreamble(requestBase2.messages) ?? [],\n          // strip out the preamble from history\n          ...stripPreamble(options.messages) ?? [],\n          // add whatever non-preamble remains from request\n          ...stripPreamble(requestBase2.messages) ?? []\n        ];\n      } else {\n        requestBase2.messages = [\n          ...options.messages ?? [],\n          ...requestBase2.messages ?? []\n        ];\n      }\n      this._messages = requestBase2.messages;\n      return requestBase2;\n    });\n    this._messages = options.messages;\n  }\n  requestBase;\n  sessionId;\n  _messages;\n  threadName;\n  async send(options) {\n    return (0, import_session.runWithSession)(\n      this.session.registry,\n      this.session,\n      () => (0, import_tracing.runInNewSpan)(\n        this.session.registry,\n        {\n          metadata: {\n            name: \"send\"\n          },\n          labels: {\n            [import_tracing.SPAN_TYPE_ATTR]: \"helper\",\n            [SESSION_ID_ATTR]: this.session.id,\n            [THREAD_NAME_ATTR]: this.threadName\n          }\n        },\n        async (metadata) => {\n          const resolvedOptions = resolveSendOptions(options);\n          let streamingCallback = void 0;\n          if (resolvedOptions.onChunk || resolvedOptions.streamingCallback) {\n            streamingCallback = resolvedOptions.onChunk ?? resolvedOptions.streamingCallback;\n          }\n          const request = {\n            ...await this.requestBase,\n            messages: this.messages,\n            ...resolvedOptions\n          };\n          metadata.input = resolvedOptions;\n          const response = await (0, import_index.generate)(this.session.registry, {\n            ...request,\n            onChunk: streamingCallback\n          });\n          this.requestBase = Promise.resolve({\n            ...await this.requestBase,\n            // these things may get changed by tools calling within generate.\n            tools: response?.request?.tools?.map((td) => td.name),\n            toolChoice: response?.request?.toolChoice,\n            config: response?.request?.config\n          });\n          await this.updateMessages(response.messages);\n          metadata.output = JSON.stringify(response);\n          return response;\n        }\n      )\n    );\n  }\n  sendStream(options) {\n    const channel = new import_async.Channel();\n    const resolvedOptions = resolveSendOptions(options);\n    const sent = this.send({\n      ...resolvedOptions,\n      onChunk: (chunk) => channel.send(chunk)\n    });\n    sent.then(\n      () => channel.close(),\n      (err) => channel.error(err)\n    );\n    return {\n      response: sent,\n      stream: channel\n    };\n  }\n  get messages() {\n    return this._messages ?? [];\n  }\n  async updateMessages(messages) {\n    this._messages = messages;\n    await this.session.updateMessages(this.threadName, messages);\n  }\n}\nfunction hasPreamble(msgs) {\n  return !!msgs?.find((m) => m.metadata?.preamble);\n}\nfunction getPreamble(msgs) {\n  return msgs?.filter((m) => m.metadata?.preamble);\n}\nfunction stripPreamble(msgs) {\n  return msgs?.filter((m) => !m.metadata?.preamble);\n}\nfunction resolveSendOptions(options) {\n  let resolvedOptions;\n  if (typeof options === \"string\") {\n    resolvedOptions = {\n      prompt: options\n    };\n  } else if (Array.isArray(options)) {\n    resolvedOptions = {\n      prompt: options\n    };\n  } else {\n    resolvedOptions = options;\n  }\n  return resolvedOptions;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=chat.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/chat.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/check-operation.js":
/*!***********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/check-operation.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar check_operation_exports = {};\n__export(check_operation_exports, {\n  checkOperation: () => checkOperation\n});\nmodule.exports = __toCommonJS(check_operation_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nasync function checkOperation(registry, operation) {\n  if (!operation.action) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: \"Provided operation is missing original request information\"\n    });\n  }\n  const backgroundAction = await registry.lookupBackgroundAction(\n    operation.action\n  );\n  if (!backgroundAction) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: `Failed to resolve background action from original request: ${operation.action}`\n    });\n  }\n  return await backgroundAction.check(operation);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=check-operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9jaGVjay1vcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxrQkFBa0IsbUJBQU8sQ0FBQyxxRkFBaUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RSxpQkFBaUI7QUFDOUYsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUVMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWpzLWFwcC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9jaGVjay1vcGVyYXRpb24uanM/ZWU2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgY2hlY2tfb3BlcmF0aW9uX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGNoZWNrX29wZXJhdGlvbl9leHBvcnRzLCB7XG4gIGNoZWNrT3BlcmF0aW9uOiAoKSA9PiBjaGVja09wZXJhdGlvblxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhjaGVja19vcGVyYXRpb25fZXhwb3J0cyk7XG52YXIgaW1wb3J0X2NvcmUgPSByZXF1aXJlKFwiQGdlbmtpdC1haS9jb3JlXCIpO1xuYXN5bmMgZnVuY3Rpb24gY2hlY2tPcGVyYXRpb24ocmVnaXN0cnksIG9wZXJhdGlvbikge1xuICBpZiAoIW9wZXJhdGlvbi5hY3Rpb24pIHtcbiAgICB0aHJvdyBuZXcgaW1wb3J0X2NvcmUuR2Vua2l0RXJyb3Ioe1xuICAgICAgc3RhdHVzOiBcIklOVkFMSURfQVJHVU1FTlRcIixcbiAgICAgIG1lc3NhZ2U6IFwiUHJvdmlkZWQgb3BlcmF0aW9uIGlzIG1pc3Npbmcgb3JpZ2luYWwgcmVxdWVzdCBpbmZvcm1hdGlvblwiXG4gICAgfSk7XG4gIH1cbiAgY29uc3QgYmFja2dyb3VuZEFjdGlvbiA9IGF3YWl0IHJlZ2lzdHJ5Lmxvb2t1cEJhY2tncm91bmRBY3Rpb24oXG4gICAgb3BlcmF0aW9uLmFjdGlvblxuICApO1xuICBpZiAoIWJhY2tncm91bmRBY3Rpb24pIHtcbiAgICB0aHJvdyBuZXcgaW1wb3J0X2NvcmUuR2Vua2l0RXJyb3Ioe1xuICAgICAgc3RhdHVzOiBcIklOVkFMSURfQVJHVU1FTlRcIixcbiAgICAgIG1lc3NhZ2U6IGBGYWlsZWQgdG8gcmVzb2x2ZSBiYWNrZ3JvdW5kIGFjdGlvbiBmcm9tIG9yaWdpbmFsIHJlcXVlc3Q6ICR7b3BlcmF0aW9uLmFjdGlvbn1gXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IGJhY2tncm91bmRBY3Rpb24uY2hlY2sob3BlcmF0aW9uKTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBjaGVja09wZXJhdGlvblxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGVjay1vcGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/check-operation.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/document.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar document_exports = {};\n__export(document_exports, {\n  CustomPartSchema: () => CustomPartSchema,\n  DataPartSchema: () => DataPartSchema,\n  Document: () => Document,\n  DocumentDataSchema: () => DocumentDataSchema,\n  MediaPartSchema: () => MediaPartSchema,\n  MediaSchema: () => MediaSchema,\n  PartSchema: () => PartSchema,\n  ReasoningPartSchema: () => ReasoningPartSchema,\n  ResourcePartSchema: () => ResourcePartSchema,\n  TextPartSchema: () => TextPartSchema,\n  ToolRequestPartSchema: () => ToolRequestPartSchema,\n  ToolRequestSchema: () => ToolRequestSchema,\n  ToolResponsePartSchema: () => ToolResponsePartSchema,\n  ToolResponseSchema: () => ToolResponseSchema,\n  checkUniqueDocuments: () => checkUniqueDocuments\n});\nmodule.exports = __toCommonJS(document_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nconst EmptyPartSchema = import_core.z.object({\n  text: import_core.z.never().optional(),\n  media: import_core.z.never().optional(),\n  toolRequest: import_core.z.never().optional(),\n  toolResponse: import_core.z.never().optional(),\n  data: import_core.z.unknown().optional(),\n  metadata: import_core.z.record(import_core.z.unknown()).optional(),\n  custom: import_core.z.record(import_core.z.unknown()).optional(),\n  reasoning: import_core.z.never().optional(),\n  resource: import_core.z.never().optional()\n});\nconst TextPartSchema = EmptyPartSchema.extend({\n  /** The text of the message. */\n  text: import_core.z.string()\n});\nconst ReasoningPartSchema = EmptyPartSchema.extend({\n  /** The reasoning text of the message. */\n  reasoning: import_core.z.string()\n});\nconst MediaSchema = import_core.z.object({\n  /** The media content type. Inferred from data uri if not provided. */\n  contentType: import_core.z.string().optional(),\n  /** A `data:` or `https:` uri containing the media content.  */\n  url: import_core.z.string()\n});\nconst MediaPartSchema = EmptyPartSchema.extend({\n  media: MediaSchema\n});\nconst ToolRequestSchema = import_core.z.object({\n  /** The call id or reference for a specific request. */\n  ref: import_core.z.string().optional(),\n  /** The name of the tool to call. */\n  name: import_core.z.string(),\n  /** The input parameters for the tool, usually a JSON object. */\n  input: import_core.z.unknown().optional()\n});\nconst ToolRequestPartSchema = EmptyPartSchema.extend({\n  /** A request for a tool to be executed, usually provided by a model. */\n  toolRequest: ToolRequestSchema\n});\nconst ToolResponseSchema = import_core.z.object({\n  /** The call id or reference for a specific request. */\n  ref: import_core.z.string().optional(),\n  /** The name of the tool. */\n  name: import_core.z.string(),\n  /** The output data returned from the tool, usually a JSON object. */\n  output: import_core.z.unknown().optional()\n});\nconst ToolResponsePartSchema = EmptyPartSchema.extend({\n  /** A provided response to a tool call. */\n  toolResponse: ToolResponseSchema\n});\nconst DataPartSchema = EmptyPartSchema.extend({\n  data: import_core.z.unknown()\n});\nconst CustomPartSchema = EmptyPartSchema.extend({\n  custom: import_core.z.record(import_core.z.any())\n});\nconst ResourcePartSchema = EmptyPartSchema.extend({\n  resource: import_core.z.object({\n    uri: import_core.z.string()\n  })\n});\nconst PartSchema = import_core.z.union([TextPartSchema, MediaPartSchema]);\nconst DocumentDataSchema = import_core.z.object({\n  content: import_core.z.array(PartSchema),\n  metadata: import_core.z.record(import_core.z.string(), import_core.z.any()).optional()\n});\nfunction deepCopy(value) {\n  if (value === void 0) {\n    return value;\n  }\n  return JSON.parse(JSON.stringify(value));\n}\nclass Document {\n  content;\n  metadata;\n  constructor(data) {\n    this.content = deepCopy(data.content);\n    this.metadata = deepCopy(data.metadata);\n  }\n  static fromText(text, metadata) {\n    return new Document({\n      content: [{ text }],\n      metadata\n    });\n  }\n  // Construct a Document from a single media item\n  static fromMedia(url, contentType, metadata) {\n    return new Document({\n      content: [\n        {\n          media: {\n            contentType,\n            url\n          }\n        }\n      ],\n      metadata\n    });\n  }\n  // Construct a Document from content\n  static fromData(data, dataType, metadata) {\n    if (dataType === \"text\") {\n      return this.fromText(data, metadata);\n    }\n    return this.fromMedia(data, dataType, metadata);\n  }\n  /**\n   * Concatenates all `text` parts present in the document with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  get text() {\n    return this.content.map((part) => part.text || \"\").join(\"\");\n  }\n  /**\n   * Media array getter.\n   * @returns the array of media parts.\n   */\n  get media() {\n    return this.content.filter((part) => part.media && !part.text).map((part) => part.media);\n  }\n  /**\n   * Gets the first item in the document. Either text or media url.\n   */\n  get data() {\n    if (this.text) {\n      return this.text;\n    }\n    if (this.media) {\n      return this.media[0].url;\n    }\n    return \"\";\n  }\n  /**\n   * Gets the contentType of the data that is returned by data()\n   */\n  get dataType() {\n    if (this.text) {\n      return \"text\";\n    }\n    if (this.media && this.media[0].contentType) {\n      return this.media[0].contentType;\n    }\n    return void 0;\n  }\n  toJSON() {\n    return {\n      content: deepCopy(this.content),\n      metadata: deepCopy(this.metadata)\n    };\n  }\n  /**\n   * Embedders may return multiple embeddings for a single document.\n   * But storage still requires a 1:1 relationship. So we create an\n   * array of Documents from a single document - one per embedding.\n   * @param embeddings The embeddings to create the documents from.\n   * @returns an array of documents based on this document and the embeddings.\n   */\n  getEmbeddingDocuments(embeddings) {\n    const documents = [];\n    for (const embedding of embeddings) {\n      const jsonDoc = this.toJSON();\n      if (embedding.metadata) {\n        if (!jsonDoc.metadata) {\n          jsonDoc.metadata = {};\n        }\n        jsonDoc.metadata.embedMetadata = embedding.metadata;\n      }\n      documents.push(new Document(jsonDoc));\n    }\n    checkUniqueDocuments(documents);\n    return documents;\n  }\n}\nfunction checkUniqueDocuments(documents) {\n  const seen = /* @__PURE__ */ new Set();\n  for (const doc of documents) {\n    const serialized = JSON.stringify(doc);\n    if (seen.has(serialized)) {\n      console.warn(\n        \"Warning: embedding documents are not unique. Are you missing embed metadata?\"\n      );\n      return false;\n    }\n    seen.add(serialized);\n  }\n  return true;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=document.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/embedder.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/embedder.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar embedder_exports = {};\n__export(embedder_exports, {\n  EmbedderInfoSchema: () => EmbedderInfoSchema,\n  EmbeddingSchema: () => EmbeddingSchema,\n  defineEmbedder: () => defineEmbedder,\n  embed: () => embed,\n  embedMany: () => embedMany,\n  embedder: () => embedder,\n  embedderActionMetadata: () => embedderActionMetadata,\n  embedderRef: () => embedderRef\n});\nmodule.exports = __toCommonJS(embedder_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nconst EmbeddingSchema = import_core.z.object({\n  embedding: import_core.z.array(import_core.z.number()),\n  metadata: import_core.z.record(import_core.z.string(), import_core.z.unknown()).optional()\n});\nconst EmbedRequestSchema = import_core.z.object({\n  input: import_core.z.array(import_document.DocumentDataSchema),\n  options: import_core.z.any().optional()\n});\nconst EmbedResponseSchema = import_core.z.object({\n  embeddings: import_core.z.array(EmbeddingSchema)\n  // TODO: stats, etc.\n});\nfunction withMetadata(embedder2, configSchema) {\n  const withMeta = embedder2;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction embedder(options, runner) {\n  const embedder2 = (0, import_core.action)(\n    embedderActionOptions(options),\n    (i, opts) => runner(\n      {\n        input: i.input.map((dd) => new import_document.Document(dd)),\n        options: i.options\n      },\n      opts\n    )\n  );\n  const ewm = withMetadata(\n    embedder2,\n    options.configSchema\n  );\n  return ewm;\n}\nfunction embedderActionOptions(options) {\n  return {\n    actionType: \"embedder\",\n    name: options.name,\n    inputSchema: EmbedRequestSchema,\n    outputSchema: EmbedResponseSchema,\n    metadata: {\n      type: \"embedder\",\n      info: options.info,\n      embedder: {\n        customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0\n      }\n    }\n  };\n}\nfunction defineEmbedder(registry, options, runner) {\n  const embedder2 = (0, import_core.defineAction)(\n    registry,\n    embedderActionOptions(options),\n    (i) => runner(\n      i.input.map((dd) => new import_document.Document(dd)),\n      i.options\n    )\n  );\n  const ewm = withMetadata(\n    embedder2,\n    options.configSchema\n  );\n  return ewm;\n}\nasync function embed(registry, params) {\n  const embedder2 = await resolveEmbedder(registry, params);\n  if (!embedder2.embedderAction) {\n    let embedderId;\n    if (typeof params.embedder === \"string\") {\n      embedderId = params.embedder;\n    } else if (params.embedder?.__action?.name) {\n      embedderId = params.embedder.__action.name;\n    } else {\n      embedderId = params.embedder.name;\n    }\n    throw new Error(`Unable to resolve embedder ${embedderId}`);\n  }\n  const response = await embedder2.embedderAction({\n    input: typeof params.content === \"string\" ? [import_document.Document.fromText(params.content, params.metadata)] : [params.content],\n    options: {\n      version: embedder2.version,\n      ...embedder2.config,\n      ...params.options\n    }\n  });\n  return response.embeddings;\n}\nasync function resolveEmbedder(registry, params) {\n  if (typeof params.embedder === \"string\") {\n    return {\n      embedderAction: await registry.lookupAction(\n        `/embedder/${params.embedder}`\n      )\n    };\n  } else if (Object.hasOwnProperty.call(params.embedder, \"__action\")) {\n    return {\n      embedderAction: params.embedder\n    };\n  } else if (Object.hasOwnProperty.call(params.embedder, \"name\")) {\n    const ref = params.embedder;\n    return {\n      embedderAction: await registry.lookupAction(\n        `/embedder/${params.embedder.name}`\n      ),\n      config: {\n        ...ref.config\n      },\n      version: ref.version\n    };\n  }\n  throw new Error(`failed to resolve embedder ${params.embedder}`);\n}\nasync function embedMany(registry, params) {\n  let embedder2;\n  if (typeof params.embedder === \"string\") {\n    embedder2 = await registry.lookupAction(`/embedder/${params.embedder}`);\n  } else if (Object.hasOwnProperty.call(params.embedder, \"info\")) {\n    embedder2 = await registry.lookupAction(\n      `/embedder/${params.embedder.name}`\n    );\n  } else {\n    embedder2 = params.embedder;\n  }\n  if (!embedder2) {\n    throw new Error(\"Unable to utilize the provided embedder\");\n  }\n  const response = await embedder2({\n    input: params.content.map(\n      (i) => typeof i === \"string\" ? import_document.Document.fromText(i, params.metadata) : i\n    ),\n    options: params.options\n  });\n  return response.embeddings;\n}\nconst EmbedderInfoSchema = import_core.z.object({\n  /** Friendly label for this model (e.g. \"Google AI - Gemini Pro\") */\n  label: import_core.z.string().optional(),\n  /** Supported model capabilities. */\n  supports: import_core.z.object({\n    /** Model can input this type of data. */\n    input: import_core.z.array(import_core.z.enum([\"text\", \"image\", \"video\"])).optional(),\n    /** Model can support multiple languages */\n    multilingual: import_core.z.boolean().optional()\n  }).optional(),\n  /** Embedding dimension */\n  dimensions: import_core.z.number().optional()\n});\nfunction embedderRef(options) {\n  let name = options.name;\n  if (options.namespace && !name.startsWith(options.namespace + \"/\")) {\n    name = `${options.namespace}/${name}`;\n  }\n  return { ...options, name };\n}\nfunction embedderActionMetadata({\n  name,\n  info,\n  configSchema\n}) {\n  return {\n    actionType: \"embedder\",\n    name,\n    inputJsonSchema: (0, import_schema.toJsonSchema)({ schema: EmbedRequestSchema }),\n    outputJsonSchema: (0, import_schema.toJsonSchema)({ schema: EmbedResponseSchema }),\n    metadata: {\n      embedder: {\n        ...info,\n        customOptions: configSchema ? (0, import_schema.toJsonSchema)({ schema: configSchema }) : void 0\n      }\n    }\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=embedder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/embedder.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/evaluator.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/evaluator.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar evaluator_exports = {};\n__export(evaluator_exports, {\n  ATTR_PREFIX: () => ATTR_PREFIX,\n  BaseDataPointSchema: () => BaseDataPointSchema,\n  BaseEvalDataPointSchema: () => BaseEvalDataPointSchema,\n  EVALUATOR_METADATA_KEY_DEFINITION: () => EVALUATOR_METADATA_KEY_DEFINITION,\n  EVALUATOR_METADATA_KEY_DISPLAY_NAME: () => EVALUATOR_METADATA_KEY_DISPLAY_NAME,\n  EVALUATOR_METADATA_KEY_IS_BILLED: () => EVALUATOR_METADATA_KEY_IS_BILLED,\n  EvalResponseSchema: () => EvalResponseSchema,\n  EvalResponsesSchema: () => EvalResponsesSchema,\n  EvalStatusEnum: () => EvalStatusEnum,\n  EvaluatorInfoSchema: () => EvaluatorInfoSchema,\n  SPAN_STATE_ATTR: () => SPAN_STATE_ATTR,\n  ScoreSchema: () => ScoreSchema,\n  defineEvaluator: () => defineEvaluator,\n  evaluate: () => evaluate,\n  evaluator: () => evaluator,\n  evaluatorRef: () => evaluatorRef\n});\nmodule.exports = __toCommonJS(evaluator_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst ATTR_PREFIX = \"genkit\";\nconst SPAN_STATE_ATTR = ATTR_PREFIX + \":state\";\nconst BaseDataPointSchema = import_core.z.object({\n  input: import_core.z.unknown(),\n  output: import_core.z.unknown().optional(),\n  context: import_core.z.array(import_core.z.unknown()).optional(),\n  reference: import_core.z.unknown().optional(),\n  testCaseId: import_core.z.string().optional(),\n  traceIds: import_core.z.array(import_core.z.string()).optional()\n});\nconst BaseEvalDataPointSchema = BaseDataPointSchema.extend({\n  testCaseId: import_core.z.string()\n});\nconst EvalStatusEnumSchema = import_core.z.enum([\"UNKNOWN\", \"PASS\", \"FAIL\"]);\nvar EvalStatusEnum = /* @__PURE__ */ ((EvalStatusEnum2) => {\n  EvalStatusEnum2[\"UNKNOWN\"] = \"UNKNOWN\";\n  EvalStatusEnum2[\"PASS\"] = \"PASS\";\n  EvalStatusEnum2[\"FAIL\"] = \"FAIL\";\n  return EvalStatusEnum2;\n})(EvalStatusEnum || {});\nconst ScoreSchema = import_core.z.object({\n  id: import_core.z.string().describe(\n    \"Optional ID to differentiate different scores if applying in a single evaluation\"\n  ).optional(),\n  score: import_core.z.union([import_core.z.number(), import_core.z.string(), import_core.z.boolean()]).optional(),\n  status: EvalStatusEnumSchema.optional(),\n  error: import_core.z.string().optional(),\n  details: import_core.z.object({\n    reasoning: import_core.z.string().optional()\n  }).passthrough().optional()\n});\nconst EVALUATOR_METADATA_KEY_DISPLAY_NAME = \"evaluatorDisplayName\";\nconst EVALUATOR_METADATA_KEY_DEFINITION = \"evaluatorDefinition\";\nconst EVALUATOR_METADATA_KEY_IS_BILLED = \"evaluatorIsBilled\";\nconst EvalResponseSchema = import_core.z.object({\n  sampleIndex: import_core.z.number().optional(),\n  testCaseId: import_core.z.string(),\n  traceId: import_core.z.string().optional(),\n  spanId: import_core.z.string().optional(),\n  evaluation: import_core.z.union([ScoreSchema, import_core.z.array(ScoreSchema)])\n});\nconst EvalResponsesSchema = import_core.z.array(EvalResponseSchema);\nfunction withMetadata(evaluator2, dataPointType, configSchema) {\n  const withMeta = evaluator2;\n  withMeta.__dataPointType = dataPointType;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nconst EvalRequestSchema = import_core.z.object({\n  dataset: import_core.z.array(BaseDataPointSchema),\n  evalRunId: import_core.z.string(),\n  options: import_core.z.unknown()\n});\nfunction defineEvaluator(registry, options, runner) {\n  const e = evaluator(options, runner);\n  registry.registerAction(\"evaluator\", e);\n  return e;\n}\nfunction evaluator(options, runner) {\n  const evalMetadata = {};\n  evalMetadata[EVALUATOR_METADATA_KEY_IS_BILLED] = options.isBilled == void 0 ? true : options.isBilled;\n  evalMetadata[EVALUATOR_METADATA_KEY_DISPLAY_NAME] = options.displayName;\n  evalMetadata[EVALUATOR_METADATA_KEY_DEFINITION] = options.definition;\n  if (options.configSchema) {\n    evalMetadata[\"customOptions\"] = (0, import_schema.toJsonSchema)({\n      schema: options.configSchema\n    });\n  }\n  const evaluator2 = (0, import_core.action)(\n    {\n      actionType: \"evaluator\",\n      name: options.name,\n      inputSchema: EvalRequestSchema.extend({\n        dataset: options.dataPointType ? import_core.z.array(options.dataPointType) : import_core.z.array(BaseDataPointSchema),\n        options: options.configSchema ?? import_core.z.unknown(),\n        evalRunId: import_core.z.string(),\n        batchSize: import_core.z.number().optional()\n      }),\n      outputSchema: EvalResponsesSchema,\n      metadata: {\n        type: \"evaluator\",\n        evaluator: evalMetadata\n      }\n    },\n    async (i) => {\n      const evalResponses = [];\n      const batches = getBatchedArray(i.dataset, i.batchSize);\n      for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {\n        const batch = batches[batchIndex];\n        try {\n          await (0, import_tracing.runInNewSpan)(\n            {\n              metadata: {\n                name: i.batchSize ? `Batch ${batchIndex}` : `Test Case ${batch[0].testCaseId}`,\n                metadata: { \"evaluator:evalRunId\": i.evalRunId }\n              },\n              labels: {\n                [import_tracing.SPAN_TYPE_ATTR]: \"evaluator\"\n              }\n            },\n            async (metadata, otSpan) => {\n              const spanId = otSpan.spanContext().spanId;\n              const traceId = otSpan.spanContext().traceId;\n              const evalRunPromises = batch.map((d, index) => {\n                const sampleIndex = i.batchSize ? i.batchSize * batchIndex + index : batchIndex;\n                const datapoint = d;\n                metadata.input = {\n                  input: datapoint.input,\n                  output: datapoint.output,\n                  context: datapoint.context\n                };\n                const evalOutputPromise = runner(datapoint, i.options).then((result) => ({\n                  ...result,\n                  traceId,\n                  spanId,\n                  sampleIndex\n                })).catch((error) => {\n                  return {\n                    sampleIndex,\n                    spanId,\n                    traceId,\n                    testCaseId: datapoint.testCaseId,\n                    evaluation: {\n                      error: `Evaluation of test case ${datapoint.testCaseId} failed: \n${error}`\n                    }\n                  };\n                });\n                return evalOutputPromise;\n              });\n              const allResults = await Promise.all(evalRunPromises);\n              metadata.output = allResults.length === 1 ? allResults[0] : allResults;\n              allResults.map((result) => {\n                evalResponses.push(result);\n              });\n            }\n          );\n        } catch (e) {\n          import_logging.logger.error(\n            `Evaluation of batch ${batchIndex} failed: \n${e.stack}`\n          );\n          continue;\n        }\n      }\n      return evalResponses;\n    }\n  );\n  const ewm = withMetadata(\n    evaluator2,\n    options.dataPointType,\n    options.configSchema\n  );\n  return ewm;\n}\nasync function evaluate(registry, params) {\n  let evaluator2;\n  if (typeof params.evaluator === \"string\") {\n    evaluator2 = await registry.lookupAction(`/evaluator/${params.evaluator}`);\n  } else if (Object.hasOwnProperty.call(params.evaluator, \"info\")) {\n    evaluator2 = await registry.lookupAction(\n      `/evaluator/${params.evaluator.name}`\n    );\n  } else {\n    evaluator2 = params.evaluator;\n  }\n  if (!evaluator2) {\n    throw new Error(\"Unable to utilize the provided evaluator\");\n  }\n  return await evaluator2({\n    dataset: params.dataset,\n    options: params.options,\n    evalRunId: params.evalRunId ?? (0, import_crypto.randomUUID)()\n  });\n}\nconst EvaluatorInfoSchema = import_core.z.object({\n  /** Friendly label for this evaluator */\n  label: import_core.z.string().optional(),\n  metrics: import_core.z.array(import_core.z.string())\n});\nfunction evaluatorRef(options) {\n  return { ...options };\n}\nfunction getBatchedArray(arr, batchSize) {\n  let size;\n  if (!batchSize) {\n    size = 1;\n  } else {\n    size = batchSize;\n  }\n  const batches = [];\n  for (var i = 0; i < arr.length; i += size) {\n    batches.push(\n      arr.slice(i, i + size).map((d) => ({\n        ...d,\n        testCaseId: d.testCaseId ?? (0, import_crypto.randomUUID)()\n      }))\n    );\n  }\n  return batches;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=evaluator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9ldmFsdWF0b3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxrQkFBa0IsbUJBQU8sQ0FBQyxxRkFBaUI7QUFDM0MscUJBQXFCLG1CQUFPLENBQUMsK0ZBQXlCO0FBQ3RELG9CQUFvQixtQkFBTyxDQUFDLDZGQUF3QjtBQUNwRCxxQkFBcUIsbUJBQU8sQ0FBQywrRkFBeUI7QUFDdEQsb0JBQW9CLG1CQUFPLENBQUMsc0JBQVE7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzQkFBc0I7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiw2QkFBNkI7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxXQUFXLGlCQUFpQixvQkFBb0I7QUFDN0YsNEJBQTRCO0FBQzVCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELHNCQUFzQjtBQUM5RSxFQUFFLE1BQU07QUFDUjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxtQ0FBbUMsWUFBWTtBQUMvQyxFQUFFLFFBQVE7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELGlCQUFpQjtBQUM1RSxJQUFJO0FBQ0o7QUFDQSxvQkFBb0Isc0JBQXNCO0FBQzFDO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGdCQUFnQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQWlCTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1qcy1hcHAvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9saWIvZXZhbHVhdG9yLmpzP2RkYzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGV2YWx1YXRvcl9leHBvcnRzID0ge307XG5fX2V4cG9ydChldmFsdWF0b3JfZXhwb3J0cywge1xuICBBVFRSX1BSRUZJWDogKCkgPT4gQVRUUl9QUkVGSVgsXG4gIEJhc2VEYXRhUG9pbnRTY2hlbWE6ICgpID0+IEJhc2VEYXRhUG9pbnRTY2hlbWEsXG4gIEJhc2VFdmFsRGF0YVBvaW50U2NoZW1hOiAoKSA9PiBCYXNlRXZhbERhdGFQb2ludFNjaGVtYSxcbiAgRVZBTFVBVE9SX01FVEFEQVRBX0tFWV9ERUZJTklUSU9OOiAoKSA9PiBFVkFMVUFUT1JfTUVUQURBVEFfS0VZX0RFRklOSVRJT04sXG4gIEVWQUxVQVRPUl9NRVRBREFUQV9LRVlfRElTUExBWV9OQU1FOiAoKSA9PiBFVkFMVUFUT1JfTUVUQURBVEFfS0VZX0RJU1BMQVlfTkFNRSxcbiAgRVZBTFVBVE9SX01FVEFEQVRBX0tFWV9JU19CSUxMRUQ6ICgpID0+IEVWQUxVQVRPUl9NRVRBREFUQV9LRVlfSVNfQklMTEVELFxuICBFdmFsUmVzcG9uc2VTY2hlbWE6ICgpID0+IEV2YWxSZXNwb25zZVNjaGVtYSxcbiAgRXZhbFJlc3BvbnNlc1NjaGVtYTogKCkgPT4gRXZhbFJlc3BvbnNlc1NjaGVtYSxcbiAgRXZhbFN0YXR1c0VudW06ICgpID0+IEV2YWxTdGF0dXNFbnVtLFxuICBFdmFsdWF0b3JJbmZvU2NoZW1hOiAoKSA9PiBFdmFsdWF0b3JJbmZvU2NoZW1hLFxuICBTUEFOX1NUQVRFX0FUVFI6ICgpID0+IFNQQU5fU1RBVEVfQVRUUixcbiAgU2NvcmVTY2hlbWE6ICgpID0+IFNjb3JlU2NoZW1hLFxuICBkZWZpbmVFdmFsdWF0b3I6ICgpID0+IGRlZmluZUV2YWx1YXRvcixcbiAgZXZhbHVhdGU6ICgpID0+IGV2YWx1YXRlLFxuICBldmFsdWF0b3I6ICgpID0+IGV2YWx1YXRvcixcbiAgZXZhbHVhdG9yUmVmOiAoKSA9PiBldmFsdWF0b3JSZWZcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoZXZhbHVhdG9yX2V4cG9ydHMpO1xudmFyIGltcG9ydF9jb3JlID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZVwiKTtcbnZhciBpbXBvcnRfbG9nZ2luZyA9IHJlcXVpcmUoXCJAZ2Vua2l0LWFpL2NvcmUvbG9nZ2luZ1wiKTtcbnZhciBpbXBvcnRfc2NoZW1hID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZS9zY2hlbWFcIik7XG52YXIgaW1wb3J0X3RyYWNpbmcgPSByZXF1aXJlKFwiQGdlbmtpdC1haS9jb3JlL3RyYWNpbmdcIik7XG52YXIgaW1wb3J0X2NyeXB0byA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5jb25zdCBBVFRSX1BSRUZJWCA9IFwiZ2Vua2l0XCI7XG5jb25zdCBTUEFOX1NUQVRFX0FUVFIgPSBBVFRSX1BSRUZJWCArIFwiOnN0YXRlXCI7XG5jb25zdCBCYXNlRGF0YVBvaW50U2NoZW1hID0gaW1wb3J0X2NvcmUuei5vYmplY3Qoe1xuICBpbnB1dDogaW1wb3J0X2NvcmUuei51bmtub3duKCksXG4gIG91dHB1dDogaW1wb3J0X2NvcmUuei51bmtub3duKCkub3B0aW9uYWwoKSxcbiAgY29udGV4dDogaW1wb3J0X2NvcmUuei5hcnJheShpbXBvcnRfY29yZS56LnVua25vd24oKSkub3B0aW9uYWwoKSxcbiAgcmVmZXJlbmNlOiBpbXBvcnRfY29yZS56LnVua25vd24oKS5vcHRpb25hbCgpLFxuICB0ZXN0Q2FzZUlkOiBpbXBvcnRfY29yZS56LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIHRyYWNlSWRzOiBpbXBvcnRfY29yZS56LmFycmF5KGltcG9ydF9jb3JlLnouc3RyaW5nKCkpLm9wdGlvbmFsKClcbn0pO1xuY29uc3QgQmFzZUV2YWxEYXRhUG9pbnRTY2hlbWEgPSBCYXNlRGF0YVBvaW50U2NoZW1hLmV4dGVuZCh7XG4gIHRlc3RDYXNlSWQ6IGltcG9ydF9jb3JlLnouc3RyaW5nKClcbn0pO1xuY29uc3QgRXZhbFN0YXR1c0VudW1TY2hlbWEgPSBpbXBvcnRfY29yZS56LmVudW0oW1wiVU5LTk9XTlwiLCBcIlBBU1NcIiwgXCJGQUlMXCJdKTtcbnZhciBFdmFsU3RhdHVzRW51bSA9IC8qIEBfX1BVUkVfXyAqLyAoKEV2YWxTdGF0dXNFbnVtMikgPT4ge1xuICBFdmFsU3RhdHVzRW51bTJbXCJVTktOT1dOXCJdID0gXCJVTktOT1dOXCI7XG4gIEV2YWxTdGF0dXNFbnVtMltcIlBBU1NcIl0gPSBcIlBBU1NcIjtcbiAgRXZhbFN0YXR1c0VudW0yW1wiRkFJTFwiXSA9IFwiRkFJTFwiO1xuICByZXR1cm4gRXZhbFN0YXR1c0VudW0yO1xufSkoRXZhbFN0YXR1c0VudW0gfHwge30pO1xuY29uc3QgU2NvcmVTY2hlbWEgPSBpbXBvcnRfY29yZS56Lm9iamVjdCh7XG4gIGlkOiBpbXBvcnRfY29yZS56LnN0cmluZygpLmRlc2NyaWJlKFxuICAgIFwiT3B0aW9uYWwgSUQgdG8gZGlmZmVyZW50aWF0ZSBkaWZmZXJlbnQgc2NvcmVzIGlmIGFwcGx5aW5nIGluIGEgc2luZ2xlIGV2YWx1YXRpb25cIlxuICApLm9wdGlvbmFsKCksXG4gIHNjb3JlOiBpbXBvcnRfY29yZS56LnVuaW9uKFtpbXBvcnRfY29yZS56Lm51bWJlcigpLCBpbXBvcnRfY29yZS56LnN0cmluZygpLCBpbXBvcnRfY29yZS56LmJvb2xlYW4oKV0pLm9wdGlvbmFsKCksXG4gIHN0YXR1czogRXZhbFN0YXR1c0VudW1TY2hlbWEub3B0aW9uYWwoKSxcbiAgZXJyb3I6IGltcG9ydF9jb3JlLnouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgZGV0YWlsczogaW1wb3J0X2NvcmUuei5vYmplY3Qoe1xuICAgIHJlYXNvbmluZzogaW1wb3J0X2NvcmUuei5zdHJpbmcoKS5vcHRpb25hbCgpXG4gIH0pLnBhc3N0aHJvdWdoKCkub3B0aW9uYWwoKVxufSk7XG5jb25zdCBFVkFMVUFUT1JfTUVUQURBVEFfS0VZX0RJU1BMQVlfTkFNRSA9IFwiZXZhbHVhdG9yRGlzcGxheU5hbWVcIjtcbmNvbnN0IEVWQUxVQVRPUl9NRVRBREFUQV9LRVlfREVGSU5JVElPTiA9IFwiZXZhbHVhdG9yRGVmaW5pdGlvblwiO1xuY29uc3QgRVZBTFVBVE9SX01FVEFEQVRBX0tFWV9JU19CSUxMRUQgPSBcImV2YWx1YXRvcklzQmlsbGVkXCI7XG5jb25zdCBFdmFsUmVzcG9uc2VTY2hlbWEgPSBpbXBvcnRfY29yZS56Lm9iamVjdCh7XG4gIHNhbXBsZUluZGV4OiBpbXBvcnRfY29yZS56Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gIHRlc3RDYXNlSWQ6IGltcG9ydF9jb3JlLnouc3RyaW5nKCksXG4gIHRyYWNlSWQ6IGltcG9ydF9jb3JlLnouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgc3BhbklkOiBpbXBvcnRfY29yZS56LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIGV2YWx1YXRpb246IGltcG9ydF9jb3JlLnoudW5pb24oW1Njb3JlU2NoZW1hLCBpbXBvcnRfY29yZS56LmFycmF5KFNjb3JlU2NoZW1hKV0pXG59KTtcbmNvbnN0IEV2YWxSZXNwb25zZXNTY2hlbWEgPSBpbXBvcnRfY29yZS56LmFycmF5KEV2YWxSZXNwb25zZVNjaGVtYSk7XG5mdW5jdGlvbiB3aXRoTWV0YWRhdGEoZXZhbHVhdG9yMiwgZGF0YVBvaW50VHlwZSwgY29uZmlnU2NoZW1hKSB7XG4gIGNvbnN0IHdpdGhNZXRhID0gZXZhbHVhdG9yMjtcbiAgd2l0aE1ldGEuX19kYXRhUG9pbnRUeXBlID0gZGF0YVBvaW50VHlwZTtcbiAgd2l0aE1ldGEuX19jb25maWdTY2hlbWEgPSBjb25maWdTY2hlbWE7XG4gIHJldHVybiB3aXRoTWV0YTtcbn1cbmNvbnN0IEV2YWxSZXF1ZXN0U2NoZW1hID0gaW1wb3J0X2NvcmUuei5vYmplY3Qoe1xuICBkYXRhc2V0OiBpbXBvcnRfY29yZS56LmFycmF5KEJhc2VEYXRhUG9pbnRTY2hlbWEpLFxuICBldmFsUnVuSWQ6IGltcG9ydF9jb3JlLnouc3RyaW5nKCksXG4gIG9wdGlvbnM6IGltcG9ydF9jb3JlLnoudW5rbm93bigpXG59KTtcbmZ1bmN0aW9uIGRlZmluZUV2YWx1YXRvcihyZWdpc3RyeSwgb3B0aW9ucywgcnVubmVyKSB7XG4gIGNvbnN0IGUgPSBldmFsdWF0b3Iob3B0aW9ucywgcnVubmVyKTtcbiAgcmVnaXN0cnkucmVnaXN0ZXJBY3Rpb24oXCJldmFsdWF0b3JcIiwgZSk7XG4gIHJldHVybiBlO1xufVxuZnVuY3Rpb24gZXZhbHVhdG9yKG9wdGlvbnMsIHJ1bm5lcikge1xuICBjb25zdCBldmFsTWV0YWRhdGEgPSB7fTtcbiAgZXZhbE1ldGFkYXRhW0VWQUxVQVRPUl9NRVRBREFUQV9LRVlfSVNfQklMTEVEXSA9IG9wdGlvbnMuaXNCaWxsZWQgPT0gdm9pZCAwID8gdHJ1ZSA6IG9wdGlvbnMuaXNCaWxsZWQ7XG4gIGV2YWxNZXRhZGF0YVtFVkFMVUFUT1JfTUVUQURBVEFfS0VZX0RJU1BMQVlfTkFNRV0gPSBvcHRpb25zLmRpc3BsYXlOYW1lO1xuICBldmFsTWV0YWRhdGFbRVZBTFVBVE9SX01FVEFEQVRBX0tFWV9ERUZJTklUSU9OXSA9IG9wdGlvbnMuZGVmaW5pdGlvbjtcbiAgaWYgKG9wdGlvbnMuY29uZmlnU2NoZW1hKSB7XG4gICAgZXZhbE1ldGFkYXRhW1wiY3VzdG9tT3B0aW9uc1wiXSA9ICgwLCBpbXBvcnRfc2NoZW1hLnRvSnNvblNjaGVtYSkoe1xuICAgICAgc2NoZW1hOiBvcHRpb25zLmNvbmZpZ1NjaGVtYVxuICAgIH0pO1xuICB9XG4gIGNvbnN0IGV2YWx1YXRvcjIgPSAoMCwgaW1wb3J0X2NvcmUuYWN0aW9uKShcbiAgICB7XG4gICAgICBhY3Rpb25UeXBlOiBcImV2YWx1YXRvclwiLFxuICAgICAgbmFtZTogb3B0aW9ucy5uYW1lLFxuICAgICAgaW5wdXRTY2hlbWE6IEV2YWxSZXF1ZXN0U2NoZW1hLmV4dGVuZCh7XG4gICAgICAgIGRhdGFzZXQ6IG9wdGlvbnMuZGF0YVBvaW50VHlwZSA/IGltcG9ydF9jb3JlLnouYXJyYXkob3B0aW9ucy5kYXRhUG9pbnRUeXBlKSA6IGltcG9ydF9jb3JlLnouYXJyYXkoQmFzZURhdGFQb2ludFNjaGVtYSksXG4gICAgICAgIG9wdGlvbnM6IG9wdGlvbnMuY29uZmlnU2NoZW1hID8/IGltcG9ydF9jb3JlLnoudW5rbm93bigpLFxuICAgICAgICBldmFsUnVuSWQ6IGltcG9ydF9jb3JlLnouc3RyaW5nKCksXG4gICAgICAgIGJhdGNoU2l6ZTogaW1wb3J0X2NvcmUuei5udW1iZXIoKS5vcHRpb25hbCgpXG4gICAgICB9KSxcbiAgICAgIG91dHB1dFNjaGVtYTogRXZhbFJlc3BvbnNlc1NjaGVtYSxcbiAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgIHR5cGU6IFwiZXZhbHVhdG9yXCIsXG4gICAgICAgIGV2YWx1YXRvcjogZXZhbE1ldGFkYXRhXG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyAoaSkgPT4ge1xuICAgICAgY29uc3QgZXZhbFJlc3BvbnNlcyA9IFtdO1xuICAgICAgY29uc3QgYmF0Y2hlcyA9IGdldEJhdGNoZWRBcnJheShpLmRhdGFzZXQsIGkuYmF0Y2hTaXplKTtcbiAgICAgIGZvciAobGV0IGJhdGNoSW5kZXggPSAwOyBiYXRjaEluZGV4IDwgYmF0Y2hlcy5sZW5ndGg7IGJhdGNoSW5kZXgrKykge1xuICAgICAgICBjb25zdCBiYXRjaCA9IGJhdGNoZXNbYmF0Y2hJbmRleF07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgKDAsIGltcG9ydF90cmFjaW5nLnJ1bkluTmV3U3BhbikoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogaS5iYXRjaFNpemUgPyBgQmF0Y2ggJHtiYXRjaEluZGV4fWAgOiBgVGVzdCBDYXNlICR7YmF0Y2hbMF0udGVzdENhc2VJZH1gLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB7IFwiZXZhbHVhdG9yOmV2YWxSdW5JZFwiOiBpLmV2YWxSdW5JZCB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgIFtpbXBvcnRfdHJhY2luZy5TUEFOX1RZUEVfQVRUUl06IFwiZXZhbHVhdG9yXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFzeW5jIChtZXRhZGF0YSwgb3RTcGFuKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHNwYW5JZCA9IG90U3Bhbi5zcGFuQ29udGV4dCgpLnNwYW5JZDtcbiAgICAgICAgICAgICAgY29uc3QgdHJhY2VJZCA9IG90U3Bhbi5zcGFuQ29udGV4dCgpLnRyYWNlSWQ7XG4gICAgICAgICAgICAgIGNvbnN0IGV2YWxSdW5Qcm9taXNlcyA9IGJhdGNoLm1hcCgoZCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzYW1wbGVJbmRleCA9IGkuYmF0Y2hTaXplID8gaS5iYXRjaFNpemUgKiBiYXRjaEluZGV4ICsgaW5kZXggOiBiYXRjaEluZGV4O1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFwb2ludCA9IGQ7XG4gICAgICAgICAgICAgICAgbWV0YWRhdGEuaW5wdXQgPSB7XG4gICAgICAgICAgICAgICAgICBpbnB1dDogZGF0YXBvaW50LmlucHV0LFxuICAgICAgICAgICAgICAgICAgb3V0cHV0OiBkYXRhcG9pbnQub3V0cHV0LFxuICAgICAgICAgICAgICAgICAgY29udGV4dDogZGF0YXBvaW50LmNvbnRleHRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGV2YWxPdXRwdXRQcm9taXNlID0gcnVubmVyKGRhdGFwb2ludCwgaS5vcHRpb25zKS50aGVuKChyZXN1bHQpID0+ICh7XG4gICAgICAgICAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgICAgICAgICB0cmFjZUlkLFxuICAgICAgICAgICAgICAgICAgc3BhbklkLFxuICAgICAgICAgICAgICAgICAgc2FtcGxlSW5kZXhcbiAgICAgICAgICAgICAgICB9KSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzYW1wbGVJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgc3BhbklkLFxuICAgICAgICAgICAgICAgICAgICB0cmFjZUlkLFxuICAgICAgICAgICAgICAgICAgICB0ZXN0Q2FzZUlkOiBkYXRhcG9pbnQudGVzdENhc2VJZCxcbiAgICAgICAgICAgICAgICAgICAgZXZhbHVhdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBgRXZhbHVhdGlvbiBvZiB0ZXN0IGNhc2UgJHtkYXRhcG9pbnQudGVzdENhc2VJZH0gZmFpbGVkOiBcbiR7ZXJyb3J9YFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBldmFsT3V0cHV0UHJvbWlzZTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGNvbnN0IGFsbFJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChldmFsUnVuUHJvbWlzZXMpO1xuICAgICAgICAgICAgICBtZXRhZGF0YS5vdXRwdXQgPSBhbGxSZXN1bHRzLmxlbmd0aCA9PT0gMSA/IGFsbFJlc3VsdHNbMF0gOiBhbGxSZXN1bHRzO1xuICAgICAgICAgICAgICBhbGxSZXN1bHRzLm1hcCgocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgZXZhbFJlc3BvbnNlcy5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBpbXBvcnRfbG9nZ2luZy5sb2dnZXIuZXJyb3IoXG4gICAgICAgICAgICBgRXZhbHVhdGlvbiBvZiBiYXRjaCAke2JhdGNoSW5kZXh9IGZhaWxlZDogXG4ke2Uuc3RhY2t9YFxuICAgICAgICAgICk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBldmFsUmVzcG9uc2VzO1xuICAgIH1cbiAgKTtcbiAgY29uc3QgZXdtID0gd2l0aE1ldGFkYXRhKFxuICAgIGV2YWx1YXRvcjIsXG4gICAgb3B0aW9ucy5kYXRhUG9pbnRUeXBlLFxuICAgIG9wdGlvbnMuY29uZmlnU2NoZW1hXG4gICk7XG4gIHJldHVybiBld207XG59XG5hc3luYyBmdW5jdGlvbiBldmFsdWF0ZShyZWdpc3RyeSwgcGFyYW1zKSB7XG4gIGxldCBldmFsdWF0b3IyO1xuICBpZiAodHlwZW9mIHBhcmFtcy5ldmFsdWF0b3IgPT09IFwic3RyaW5nXCIpIHtcbiAgICBldmFsdWF0b3IyID0gYXdhaXQgcmVnaXN0cnkubG9va3VwQWN0aW9uKGAvZXZhbHVhdG9yLyR7cGFyYW1zLmV2YWx1YXRvcn1gKTtcbiAgfSBlbHNlIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChwYXJhbXMuZXZhbHVhdG9yLCBcImluZm9cIikpIHtcbiAgICBldmFsdWF0b3IyID0gYXdhaXQgcmVnaXN0cnkubG9va3VwQWN0aW9uKFxuICAgICAgYC9ldmFsdWF0b3IvJHtwYXJhbXMuZXZhbHVhdG9yLm5hbWV9YFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgZXZhbHVhdG9yMiA9IHBhcmFtcy5ldmFsdWF0b3I7XG4gIH1cbiAgaWYgKCFldmFsdWF0b3IyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIHV0aWxpemUgdGhlIHByb3ZpZGVkIGV2YWx1YXRvclwiKTtcbiAgfVxuICByZXR1cm4gYXdhaXQgZXZhbHVhdG9yMih7XG4gICAgZGF0YXNldDogcGFyYW1zLmRhdGFzZXQsXG4gICAgb3B0aW9uczogcGFyYW1zLm9wdGlvbnMsXG4gICAgZXZhbFJ1bklkOiBwYXJhbXMuZXZhbFJ1bklkID8/ICgwLCBpbXBvcnRfY3J5cHRvLnJhbmRvbVVVSUQpKClcbiAgfSk7XG59XG5jb25zdCBFdmFsdWF0b3JJbmZvU2NoZW1hID0gaW1wb3J0X2NvcmUuei5vYmplY3Qoe1xuICAvKiogRnJpZW5kbHkgbGFiZWwgZm9yIHRoaXMgZXZhbHVhdG9yICovXG4gIGxhYmVsOiBpbXBvcnRfY29yZS56LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIG1ldHJpY3M6IGltcG9ydF9jb3JlLnouYXJyYXkoaW1wb3J0X2NvcmUuei5zdHJpbmcoKSlcbn0pO1xuZnVuY3Rpb24gZXZhbHVhdG9yUmVmKG9wdGlvbnMpIHtcbiAgcmV0dXJuIHsgLi4ub3B0aW9ucyB9O1xufVxuZnVuY3Rpb24gZ2V0QmF0Y2hlZEFycmF5KGFyciwgYmF0Y2hTaXplKSB7XG4gIGxldCBzaXplO1xuICBpZiAoIWJhdGNoU2l6ZSkge1xuICAgIHNpemUgPSAxO1xuICB9IGVsc2Uge1xuICAgIHNpemUgPSBiYXRjaFNpemU7XG4gIH1cbiAgY29uc3QgYmF0Y2hlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkgKz0gc2l6ZSkge1xuICAgIGJhdGNoZXMucHVzaChcbiAgICAgIGFyci5zbGljZShpLCBpICsgc2l6ZSkubWFwKChkKSA9PiAoe1xuICAgICAgICAuLi5kLFxuICAgICAgICB0ZXN0Q2FzZUlkOiBkLnRlc3RDYXNlSWQgPz8gKDAsIGltcG9ydF9jcnlwdG8ucmFuZG9tVVVJRCkoKVxuICAgICAgfSkpXG4gICAgKTtcbiAgfVxuICByZXR1cm4gYmF0Y2hlcztcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBBVFRSX1BSRUZJWCxcbiAgQmFzZURhdGFQb2ludFNjaGVtYSxcbiAgQmFzZUV2YWxEYXRhUG9pbnRTY2hlbWEsXG4gIEVWQUxVQVRPUl9NRVRBREFUQV9LRVlfREVGSU5JVElPTixcbiAgRVZBTFVBVE9SX01FVEFEQVRBX0tFWV9ESVNQTEFZX05BTUUsXG4gIEVWQUxVQVRPUl9NRVRBREFUQV9LRVlfSVNfQklMTEVELFxuICBFdmFsUmVzcG9uc2VTY2hlbWEsXG4gIEV2YWxSZXNwb25zZXNTY2hlbWEsXG4gIEV2YWxTdGF0dXNFbnVtLFxuICBFdmFsdWF0b3JJbmZvU2NoZW1hLFxuICBTUEFOX1NUQVRFX0FUVFIsXG4gIFNjb3JlU2NoZW1hLFxuICBkZWZpbmVFdmFsdWF0b3IsXG4gIGV2YWx1YXRlLFxuICBldmFsdWF0b3IsXG4gIGV2YWx1YXRvclJlZlxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmFsdWF0b3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/evaluator.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/extract.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar extract_exports = {};\n__export(extract_exports, {\n  extractItems: () => extractItems,\n  extractJson: () => extractJson,\n  parsePartialJson: () => parsePartialJson\n});\nmodule.exports = __toCommonJS(extract_exports);\nvar import_json5 = __toESM(__webpack_require__(/*! json5 */ \"(action-browser)/./node_modules/json5/dist/index.mjs\"));\nvar import_partial_json = __webpack_require__(/*! partial-json */ \"(action-browser)/./node_modules/partial-json/dist/index.js\");\nfunction parsePartialJson(jsonString) {\n  return import_json5.default.parse(JSON.stringify((0, import_partial_json.parse)(jsonString, import_partial_json.Allow.ALL)));\n}\nfunction extractJson(text, throwOnBadJson) {\n  let openingChar;\n  let closingChar;\n  let startPos;\n  let nestingCount = 0;\n  let inString = false;\n  let escapeNext = false;\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i].replace(/\\u00A0/g, \" \");\n    if (escapeNext) {\n      escapeNext = false;\n      continue;\n    }\n    if (char === \"\\\\\") {\n      escapeNext = true;\n      continue;\n    }\n    if (char === '\"') {\n      inString = !inString;\n      continue;\n    }\n    if (inString) {\n      continue;\n    }\n    if (!openingChar && (char === \"{\" || char === \"[\")) {\n      openingChar = char;\n      closingChar = char === \"{\" ? \"}\" : \"]\";\n      startPos = i;\n      nestingCount++;\n    } else if (char === openingChar) {\n      nestingCount++;\n    } else if (char === closingChar) {\n      nestingCount--;\n      if (!nestingCount) {\n        return import_json5.default.parse(text.substring(startPos || 0, i + 1));\n      }\n    }\n  }\n  if (startPos !== void 0 && nestingCount > 0) {\n    try {\n      return parsePartialJson(text.substring(startPos));\n    } catch {\n      if (throwOnBadJson) {\n        throw new Error(`Invalid JSON extracted from model output: ${text}`);\n      }\n      return null;\n    }\n  }\n  if (throwOnBadJson) {\n    throw new Error(`Invalid JSON extracted from model output: ${text}`);\n  }\n  return null;\n}\nfunction extractItems(text, cursor = 0) {\n  const items = [];\n  let currentCursor = cursor;\n  if (cursor === 0) {\n    const arrayStart = text.indexOf(\"[\");\n    if (arrayStart === -1) {\n      return { items: [], cursor: text.length };\n    }\n    currentCursor = arrayStart + 1;\n  }\n  let objectStart = -1;\n  let braceCount = 0;\n  let inString = false;\n  let escapeNext = false;\n  for (let i = currentCursor; i < text.length; i++) {\n    const char = text[i];\n    if (escapeNext) {\n      escapeNext = false;\n      continue;\n    }\n    if (char === \"\\\\\") {\n      escapeNext = true;\n      continue;\n    }\n    if (char === '\"') {\n      inString = !inString;\n      continue;\n    }\n    if (inString) {\n      continue;\n    }\n    if (char === \"{\") {\n      if (braceCount === 0) {\n        objectStart = i;\n      }\n      braceCount++;\n    } else if (char === \"}\") {\n      braceCount--;\n      if (braceCount === 0 && objectStart !== -1) {\n        try {\n          const obj = import_json5.default.parse(text.substring(objectStart, i + 1));\n          items.push(obj);\n          currentCursor = i + 1;\n          objectStart = -1;\n        } catch {\n        }\n      }\n    } else if (char === \"]\" && braceCount === 0) {\n      break;\n    }\n  }\n  return {\n    items,\n    cursor: currentCursor\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=extract.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/array.js":
/*!*********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/array.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar array_exports = {};\n__export(array_exports, {\n  arrayFormatter: () => arrayFormatter\n});\nmodule.exports = __toCommonJS(array_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_extract = __webpack_require__(/*! ../extract */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\");\nconst arrayFormatter = {\n  name: \"array\",\n  config: {\n    contentType: \"application/json\",\n    constrained: true\n  },\n  handler: (schema) => {\n    if (schema && schema.type !== \"array\") {\n      throw new import_core.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `Must supply an 'array' schema type when using the 'items' parser format.`\n      });\n    }\n    let instructions;\n    if (schema) {\n      instructions = `Output should be a JSON array conforming to the following schema:\n    \n\\`\\`\\`\n${JSON.stringify(schema)}\n\\`\\`\\`\n    `;\n    }\n    return {\n      parseChunk: (chunk) => {\n        const cursor = chunk.previousChunks?.length ? (0, import_extract.extractItems)(chunk.previousText).cursor : 0;\n        const { items } = (0, import_extract.extractItems)(chunk.accumulatedText, cursor);\n        return items;\n      },\n      parseMessage: (message) => {\n        const { items } = (0, import_extract.extractItems)(message.text, 0);\n        return items;\n      },\n      instructions\n    };\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=array.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2FycmF5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMscUZBQWlCO0FBQzNDLHFCQUFxQixtQkFBTyxDQUFDLGdGQUFZO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQSxPQUFPO0FBQ1A7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUVMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWpzLWFwcC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2FycmF5LmpzPzMzYWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGFycmF5X2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGFycmF5X2V4cG9ydHMsIHtcbiAgYXJyYXlGb3JtYXR0ZXI6ICgpID0+IGFycmF5Rm9ybWF0dGVyXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGFycmF5X2V4cG9ydHMpO1xudmFyIGltcG9ydF9jb3JlID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZVwiKTtcbnZhciBpbXBvcnRfZXh0cmFjdCA9IHJlcXVpcmUoXCIuLi9leHRyYWN0XCIpO1xuY29uc3QgYXJyYXlGb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwiYXJyYXlcIixcbiAgY29uZmlnOiB7XG4gICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIGNvbnN0cmFpbmVkOiB0cnVlXG4gIH0sXG4gIGhhbmRsZXI6IChzY2hlbWEpID0+IHtcbiAgICBpZiAoc2NoZW1hICYmIHNjaGVtYS50eXBlICE9PSBcImFycmF5XCIpIHtcbiAgICAgIHRocm93IG5ldyBpbXBvcnRfY29yZS5HZW5raXRFcnJvcih7XG4gICAgICAgIHN0YXR1czogXCJJTlZBTElEX0FSR1VNRU5UXCIsXG4gICAgICAgIG1lc3NhZ2U6IGBNdXN0IHN1cHBseSBhbiAnYXJyYXknIHNjaGVtYSB0eXBlIHdoZW4gdXNpbmcgdGhlICdpdGVtcycgcGFyc2VyIGZvcm1hdC5gXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IGluc3RydWN0aW9ucztcbiAgICBpZiAoc2NoZW1hKSB7XG4gICAgICBpbnN0cnVjdGlvbnMgPSBgT3V0cHV0IHNob3VsZCBiZSBhIEpTT04gYXJyYXkgY29uZm9ybWluZyB0byB0aGUgZm9sbG93aW5nIHNjaGVtYTpcbiAgICBcblxcYFxcYFxcYFxuJHtKU09OLnN0cmluZ2lmeShzY2hlbWEpfVxuXFxgXFxgXFxgXG4gICAgYDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcnNlQ2h1bms6IChjaHVuaykgPT4ge1xuICAgICAgICBjb25zdCBjdXJzb3IgPSBjaHVuay5wcmV2aW91c0NodW5rcz8ubGVuZ3RoID8gKDAsIGltcG9ydF9leHRyYWN0LmV4dHJhY3RJdGVtcykoY2h1bmsucHJldmlvdXNUZXh0KS5jdXJzb3IgOiAwO1xuICAgICAgICBjb25zdCB7IGl0ZW1zIH0gPSAoMCwgaW1wb3J0X2V4dHJhY3QuZXh0cmFjdEl0ZW1zKShjaHVuay5hY2N1bXVsYXRlZFRleHQsIGN1cnNvcik7XG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICAgIH0sXG4gICAgICBwYXJzZU1lc3NhZ2U6IChtZXNzYWdlKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgaXRlbXMgfSA9ICgwLCBpbXBvcnRfZXh0cmFjdC5leHRyYWN0SXRlbXMpKG1lc3NhZ2UudGV4dCwgMCk7XG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICAgIH0sXG4gICAgICBpbnN0cnVjdGlvbnNcbiAgICB9O1xuICB9XG59O1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFycmF5Rm9ybWF0dGVyXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFycmF5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/array.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/enum.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/enum.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar enum_exports = {};\n__export(enum_exports, {\n  enumFormatter: () => enumFormatter\n});\nmodule.exports = __toCommonJS(enum_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nconst enumFormatter = {\n  name: \"enum\",\n  config: {\n    contentType: \"text/enum\",\n    constrained: true\n  },\n  handler: (schema) => {\n    if (schema && schema.type !== \"string\" && schema.type !== \"enum\") {\n      throw new import_core.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `Must supply a 'string' or 'enum' schema type when using the enum parser format.`\n      });\n    }\n    let instructions;\n    if (schema?.enum) {\n      instructions = `Output should be ONLY one of the following enum values. Do not output any additional information or add quotes.\n\n${schema.enum.map((v) => v.toString()).join(\"\\n\")}`;\n    }\n    return {\n      parseMessage: (message) => {\n        return message.text.replace(/['\"]/g, \"\").trim();\n      },\n      instructions\n    };\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=enum.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2VudW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxrQkFBa0IsbUJBQU8sQ0FBQyxxRkFBaUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEVBQUUsZ0RBQWdEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtanMtYXBwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL2Zvcm1hdHMvZW51bS5qcz9kNGRkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBlbnVtX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGVudW1fZXhwb3J0cywge1xuICBlbnVtRm9ybWF0dGVyOiAoKSA9PiBlbnVtRm9ybWF0dGVyXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGVudW1fZXhwb3J0cyk7XG52YXIgaW1wb3J0X2NvcmUgPSByZXF1aXJlKFwiQGdlbmtpdC1haS9jb3JlXCIpO1xuY29uc3QgZW51bUZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJlbnVtXCIsXG4gIGNvbmZpZzoge1xuICAgIGNvbnRlbnRUeXBlOiBcInRleHQvZW51bVwiLFxuICAgIGNvbnN0cmFpbmVkOiB0cnVlXG4gIH0sXG4gIGhhbmRsZXI6IChzY2hlbWEpID0+IHtcbiAgICBpZiAoc2NoZW1hICYmIHNjaGVtYS50eXBlICE9PSBcInN0cmluZ1wiICYmIHNjaGVtYS50eXBlICE9PSBcImVudW1cIikge1xuICAgICAgdGhyb3cgbmV3IGltcG9ydF9jb3JlLkdlbmtpdEVycm9yKHtcbiAgICAgICAgc3RhdHVzOiBcIklOVkFMSURfQVJHVU1FTlRcIixcbiAgICAgICAgbWVzc2FnZTogYE11c3Qgc3VwcGx5IGEgJ3N0cmluZycgb3IgJ2VudW0nIHNjaGVtYSB0eXBlIHdoZW4gdXNpbmcgdGhlIGVudW0gcGFyc2VyIGZvcm1hdC5gXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IGluc3RydWN0aW9ucztcbiAgICBpZiAoc2NoZW1hPy5lbnVtKSB7XG4gICAgICBpbnN0cnVjdGlvbnMgPSBgT3V0cHV0IHNob3VsZCBiZSBPTkxZIG9uZSBvZiB0aGUgZm9sbG93aW5nIGVudW0gdmFsdWVzLiBEbyBub3Qgb3V0cHV0IGFueSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIG9yIGFkZCBxdW90ZXMuXG5cbiR7c2NoZW1hLmVudW0ubWFwKCh2KSA9PiB2LnRvU3RyaW5nKCkpLmpvaW4oXCJcXG5cIil9YDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcnNlTWVzc2FnZTogKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2UudGV4dC5yZXBsYWNlKC9bJ1wiXS9nLCBcIlwiKS50cmltKCk7XG4gICAgICB9LFxuICAgICAgaW5zdHJ1Y3Rpb25zXG4gICAgfTtcbiAgfVxufTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBlbnVtRm9ybWF0dGVyXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudW0uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/enum.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar formats_exports = {};\n__export(formats_exports, {\n  DEFAULT_FORMATS: () => DEFAULT_FORMATS,\n  configureFormats: () => configureFormats,\n  defineFormat: () => defineFormat,\n  injectInstructions: () => injectInstructions,\n  resolveFormat: () => resolveFormat,\n  resolveInstructions: () => resolveInstructions\n});\nmodule.exports = __toCommonJS(formats_exports);\nvar import_array = __webpack_require__(/*! ./array.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/array.js\");\nvar import_enum = __webpack_require__(/*! ./enum.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/enum.js\");\nvar import_json = __webpack_require__(/*! ./json.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/json.js\");\nvar import_jsonl = __webpack_require__(/*! ./jsonl.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/jsonl.js\");\nvar import_text = __webpack_require__(/*! ./text.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/text.js\");\nfunction defineFormat(registry, options, handler) {\n  const { name, ...config } = options;\n  const formatter = { config, handler };\n  registry.registerValue(\"format\", name, formatter);\n  return formatter;\n}\nasync function resolveFormat(registry, outputOpts) {\n  if (!outputOpts) return void 0;\n  if ((outputOpts.jsonSchema || outputOpts.schema) && !outputOpts.format) {\n    return registry.lookupValue(\"format\", \"json\");\n  }\n  if (outputOpts.format) {\n    return registry.lookupValue(\"format\", outputOpts.format);\n  }\n  return void 0;\n}\nfunction resolveInstructions(format, schema, instructionsOption) {\n  if (typeof instructionsOption === \"string\") return instructionsOption;\n  if (instructionsOption === false) return void 0;\n  if (!format) return void 0;\n  return format.handler(schema).instructions;\n}\nfunction injectInstructions(messages, instructions) {\n  if (!instructions) return messages;\n  if (messages.find(\n    (m2) => m2.content.find(\n      (p) => p.metadata?.purpose === \"output\" && !p.metadata?.pending\n    )\n  )) {\n    return messages;\n  }\n  const newPart = {\n    text: instructions,\n    metadata: { purpose: \"output\" }\n  };\n  let targetIndex = messages.findIndex((m2) => m2.role === \"system\");\n  if (targetIndex < 0)\n    targetIndex = messages.map((m2) => m2.role).lastIndexOf(\"user\");\n  if (targetIndex < 0) return messages;\n  const m = {\n    ...messages[targetIndex],\n    content: [...messages[targetIndex].content]\n  };\n  const partIndex = m.content.findIndex(\n    (p) => p.metadata?.purpose === \"output\" && p.metadata?.pending\n  );\n  if (partIndex > 0) {\n    m.content.splice(partIndex, 1, newPart);\n  } else {\n    m.content.push(newPart);\n  }\n  const outMessages = [...messages];\n  outMessages.splice(targetIndex, 1, m);\n  return outMessages;\n}\nconst DEFAULT_FORMATS = [\n  import_json.jsonFormatter,\n  import_array.arrayFormatter,\n  import_text.textFormatter,\n  import_enum.enumFormatter,\n  import_jsonl.jsonlFormatter\n];\nfunction configureFormats(registry) {\n  for (const format of DEFAULT_FORMATS) {\n    defineFormat(\n      registry,\n      { name: format.name, ...format.config },\n      format.handler\n    );\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG1CQUFtQixtQkFBTyxDQUFDLHNGQUFZO0FBQ3ZDLGtCQUFrQixtQkFBTyxDQUFDLG9GQUFXO0FBQ3JDLGtCQUFrQixtQkFBTyxDQUFDLG9GQUFXO0FBQ3JDLG1CQUFtQixtQkFBTyxDQUFDLHNGQUFZO0FBQ3ZDLGtCQUFrQixtQkFBTyxDQUFDLG9GQUFXO0FBQ3JDO0FBQ0EsVUFBVSxrQkFBa0I7QUFDNUIsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHFDQUFxQztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQU9MO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWpzLWFwcC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2luZGV4LmpzP2VmY2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGZvcm1hdHNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoZm9ybWF0c19leHBvcnRzLCB7XG4gIERFRkFVTFRfRk9STUFUUzogKCkgPT4gREVGQVVMVF9GT1JNQVRTLFxuICBjb25maWd1cmVGb3JtYXRzOiAoKSA9PiBjb25maWd1cmVGb3JtYXRzLFxuICBkZWZpbmVGb3JtYXQ6ICgpID0+IGRlZmluZUZvcm1hdCxcbiAgaW5qZWN0SW5zdHJ1Y3Rpb25zOiAoKSA9PiBpbmplY3RJbnN0cnVjdGlvbnMsXG4gIHJlc29sdmVGb3JtYXQ6ICgpID0+IHJlc29sdmVGb3JtYXQsXG4gIHJlc29sdmVJbnN0cnVjdGlvbnM6ICgpID0+IHJlc29sdmVJbnN0cnVjdGlvbnNcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoZm9ybWF0c19leHBvcnRzKTtcbnZhciBpbXBvcnRfYXJyYXkgPSByZXF1aXJlKFwiLi9hcnJheS5qc1wiKTtcbnZhciBpbXBvcnRfZW51bSA9IHJlcXVpcmUoXCIuL2VudW0uanNcIik7XG52YXIgaW1wb3J0X2pzb24gPSByZXF1aXJlKFwiLi9qc29uLmpzXCIpO1xudmFyIGltcG9ydF9qc29ubCA9IHJlcXVpcmUoXCIuL2pzb25sLmpzXCIpO1xudmFyIGltcG9ydF90ZXh0ID0gcmVxdWlyZShcIi4vdGV4dC5qc1wiKTtcbmZ1bmN0aW9uIGRlZmluZUZvcm1hdChyZWdpc3RyeSwgb3B0aW9ucywgaGFuZGxlcikge1xuICBjb25zdCB7IG5hbWUsIC4uLmNvbmZpZyB9ID0gb3B0aW9ucztcbiAgY29uc3QgZm9ybWF0dGVyID0geyBjb25maWcsIGhhbmRsZXIgfTtcbiAgcmVnaXN0cnkucmVnaXN0ZXJWYWx1ZShcImZvcm1hdFwiLCBuYW1lLCBmb3JtYXR0ZXIpO1xuICByZXR1cm4gZm9ybWF0dGVyO1xufVxuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZUZvcm1hdChyZWdpc3RyeSwgb3V0cHV0T3B0cykge1xuICBpZiAoIW91dHB1dE9wdHMpIHJldHVybiB2b2lkIDA7XG4gIGlmICgob3V0cHV0T3B0cy5qc29uU2NoZW1hIHx8IG91dHB1dE9wdHMuc2NoZW1hKSAmJiAhb3V0cHV0T3B0cy5mb3JtYXQpIHtcbiAgICByZXR1cm4gcmVnaXN0cnkubG9va3VwVmFsdWUoXCJmb3JtYXRcIiwgXCJqc29uXCIpO1xuICB9XG4gIGlmIChvdXRwdXRPcHRzLmZvcm1hdCkge1xuICAgIHJldHVybiByZWdpc3RyeS5sb29rdXBWYWx1ZShcImZvcm1hdFwiLCBvdXRwdXRPcHRzLmZvcm1hdCk7XG4gIH1cbiAgcmV0dXJuIHZvaWQgMDtcbn1cbmZ1bmN0aW9uIHJlc29sdmVJbnN0cnVjdGlvbnMoZm9ybWF0LCBzY2hlbWEsIGluc3RydWN0aW9uc09wdGlvbikge1xuICBpZiAodHlwZW9mIGluc3RydWN0aW9uc09wdGlvbiA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGluc3RydWN0aW9uc09wdGlvbjtcbiAgaWYgKGluc3RydWN0aW9uc09wdGlvbiA9PT0gZmFsc2UpIHJldHVybiB2b2lkIDA7XG4gIGlmICghZm9ybWF0KSByZXR1cm4gdm9pZCAwO1xuICByZXR1cm4gZm9ybWF0LmhhbmRsZXIoc2NoZW1hKS5pbnN0cnVjdGlvbnM7XG59XG5mdW5jdGlvbiBpbmplY3RJbnN0cnVjdGlvbnMobWVzc2FnZXMsIGluc3RydWN0aW9ucykge1xuICBpZiAoIWluc3RydWN0aW9ucykgcmV0dXJuIG1lc3NhZ2VzO1xuICBpZiAobWVzc2FnZXMuZmluZChcbiAgICAobTIpID0+IG0yLmNvbnRlbnQuZmluZChcbiAgICAgIChwKSA9PiBwLm1ldGFkYXRhPy5wdXJwb3NlID09PSBcIm91dHB1dFwiICYmICFwLm1ldGFkYXRhPy5wZW5kaW5nXG4gICAgKVxuICApKSB7XG4gICAgcmV0dXJuIG1lc3NhZ2VzO1xuICB9XG4gIGNvbnN0IG5ld1BhcnQgPSB7XG4gICAgdGV4dDogaW5zdHJ1Y3Rpb25zLFxuICAgIG1ldGFkYXRhOiB7IHB1cnBvc2U6IFwib3V0cHV0XCIgfVxuICB9O1xuICBsZXQgdGFyZ2V0SW5kZXggPSBtZXNzYWdlcy5maW5kSW5kZXgoKG0yKSA9PiBtMi5yb2xlID09PSBcInN5c3RlbVwiKTtcbiAgaWYgKHRhcmdldEluZGV4IDwgMClcbiAgICB0YXJnZXRJbmRleCA9IG1lc3NhZ2VzLm1hcCgobTIpID0+IG0yLnJvbGUpLmxhc3RJbmRleE9mKFwidXNlclwiKTtcbiAgaWYgKHRhcmdldEluZGV4IDwgMCkgcmV0dXJuIG1lc3NhZ2VzO1xuICBjb25zdCBtID0ge1xuICAgIC4uLm1lc3NhZ2VzW3RhcmdldEluZGV4XSxcbiAgICBjb250ZW50OiBbLi4ubWVzc2FnZXNbdGFyZ2V0SW5kZXhdLmNvbnRlbnRdXG4gIH07XG4gIGNvbnN0IHBhcnRJbmRleCA9IG0uY29udGVudC5maW5kSW5kZXgoXG4gICAgKHApID0+IHAubWV0YWRhdGE/LnB1cnBvc2UgPT09IFwib3V0cHV0XCIgJiYgcC5tZXRhZGF0YT8ucGVuZGluZ1xuICApO1xuICBpZiAocGFydEluZGV4ID4gMCkge1xuICAgIG0uY29udGVudC5zcGxpY2UocGFydEluZGV4LCAxLCBuZXdQYXJ0KTtcbiAgfSBlbHNlIHtcbiAgICBtLmNvbnRlbnQucHVzaChuZXdQYXJ0KTtcbiAgfVxuICBjb25zdCBvdXRNZXNzYWdlcyA9IFsuLi5tZXNzYWdlc107XG4gIG91dE1lc3NhZ2VzLnNwbGljZSh0YXJnZXRJbmRleCwgMSwgbSk7XG4gIHJldHVybiBvdXRNZXNzYWdlcztcbn1cbmNvbnN0IERFRkFVTFRfRk9STUFUUyA9IFtcbiAgaW1wb3J0X2pzb24uanNvbkZvcm1hdHRlcixcbiAgaW1wb3J0X2FycmF5LmFycmF5Rm9ybWF0dGVyLFxuICBpbXBvcnRfdGV4dC50ZXh0Rm9ybWF0dGVyLFxuICBpbXBvcnRfZW51bS5lbnVtRm9ybWF0dGVyLFxuICBpbXBvcnRfanNvbmwuanNvbmxGb3JtYXR0ZXJcbl07XG5mdW5jdGlvbiBjb25maWd1cmVGb3JtYXRzKHJlZ2lzdHJ5KSB7XG4gIGZvciAoY29uc3QgZm9ybWF0IG9mIERFRkFVTFRfRk9STUFUUykge1xuICAgIGRlZmluZUZvcm1hdChcbiAgICAgIHJlZ2lzdHJ5LFxuICAgICAgeyBuYW1lOiBmb3JtYXQubmFtZSwgLi4uZm9ybWF0LmNvbmZpZyB9LFxuICAgICAgZm9ybWF0LmhhbmRsZXJcbiAgICApO1xuICB9XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgREVGQVVMVF9GT1JNQVRTLFxuICBjb25maWd1cmVGb3JtYXRzLFxuICBkZWZpbmVGb3JtYXQsXG4gIGluamVjdEluc3RydWN0aW9ucyxcbiAgcmVzb2x2ZUZvcm1hdCxcbiAgcmVzb2x2ZUluc3RydWN0aW9uc1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/json.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/json.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar json_exports = {};\n__export(json_exports, {\n  jsonFormatter: () => jsonFormatter\n});\nmodule.exports = __toCommonJS(json_exports);\nvar import_extract = __webpack_require__(/*! ../extract */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\");\nconst jsonFormatter = {\n  name: \"json\",\n  config: {\n    format: \"json\",\n    contentType: \"application/json\",\n    constrained: true,\n    defaultInstructions: false\n  },\n  handler: (schema) => {\n    let instructions;\n    if (schema) {\n      instructions = `Output should be in JSON format and conform to the following schema:\n\n\\`\\`\\`\n${JSON.stringify(schema)}\n\\`\\`\\`\n`;\n    }\n    return {\n      parseChunk: (chunk) => {\n        return (0, import_extract.extractJson)(chunk.accumulatedText);\n      },\n      parseMessage: (message) => {\n        return (0, import_extract.extractJson)(message.text);\n      },\n      instructions\n    };\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=json.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2pzb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxxQkFBcUIsbUJBQU8sQ0FBQyxnRkFBWTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUVMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWpzLWFwcC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2pzb24uanM/NTRkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIganNvbl9leHBvcnRzID0ge307XG5fX2V4cG9ydChqc29uX2V4cG9ydHMsIHtcbiAganNvbkZvcm1hdHRlcjogKCkgPT4ganNvbkZvcm1hdHRlclxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhqc29uX2V4cG9ydHMpO1xudmFyIGltcG9ydF9leHRyYWN0ID0gcmVxdWlyZShcIi4uL2V4dHJhY3RcIik7XG5jb25zdCBqc29uRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImpzb25cIixcbiAgY29uZmlnOiB7XG4gICAgZm9ybWF0OiBcImpzb25cIixcbiAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgY29uc3RyYWluZWQ6IHRydWUsXG4gICAgZGVmYXVsdEluc3RydWN0aW9uczogZmFsc2VcbiAgfSxcbiAgaGFuZGxlcjogKHNjaGVtYSkgPT4ge1xuICAgIGxldCBpbnN0cnVjdGlvbnM7XG4gICAgaWYgKHNjaGVtYSkge1xuICAgICAgaW5zdHJ1Y3Rpb25zID0gYE91dHB1dCBzaG91bGQgYmUgaW4gSlNPTiBmb3JtYXQgYW5kIGNvbmZvcm0gdG8gdGhlIGZvbGxvd2luZyBzY2hlbWE6XG5cblxcYFxcYFxcYFxuJHtKU09OLnN0cmluZ2lmeShzY2hlbWEpfVxuXFxgXFxgXFxgXG5gO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgcGFyc2VDaHVuazogKGNodW5rKSA9PiB7XG4gICAgICAgIHJldHVybiAoMCwgaW1wb3J0X2V4dHJhY3QuZXh0cmFjdEpzb24pKGNodW5rLmFjY3VtdWxhdGVkVGV4dCk7XG4gICAgICB9LFxuICAgICAgcGFyc2VNZXNzYWdlOiAobWVzc2FnZSkgPT4ge1xuICAgICAgICByZXR1cm4gKDAsIGltcG9ydF9leHRyYWN0LmV4dHJhY3RKc29uKShtZXNzYWdlLnRleHQpO1xuICAgICAgfSxcbiAgICAgIGluc3RydWN0aW9uc1xuICAgIH07XG4gIH1cbn07XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAganNvbkZvcm1hdHRlclxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qc29uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/json.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/jsonl.js":
/*!*********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/jsonl.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar jsonl_exports = {};\n__export(jsonl_exports, {\n  jsonlFormatter: () => jsonlFormatter\n});\nmodule.exports = __toCommonJS(jsonl_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_json5 = __toESM(__webpack_require__(/*! json5 */ \"(action-browser)/./node_modules/json5/dist/index.mjs\"));\nvar import_extract = __webpack_require__(/*! ../extract */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\");\nfunction objectLines(text) {\n  return text.split(\"\\n\").map((line) => line.trim()).filter((line) => line.startsWith(\"{\"));\n}\nconst jsonlFormatter = {\n  name: \"jsonl\",\n  config: {\n    contentType: \"application/jsonl\"\n  },\n  handler: (schema) => {\n    if (schema && (schema.type !== \"array\" || schema.items?.type !== \"object\")) {\n      throw new import_core.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `Must supply an 'array' schema type containing 'object' items when using the 'jsonl' parser format.`\n      });\n    }\n    let instructions;\n    if (schema?.items) {\n      instructions = `Output should be JSONL format, a sequence of JSON objects (one per line) separated by a newline \\`\\\\n\\` character. Each line should be a JSON object conforming to the following schema:\n\n\\`\\`\\`\n${JSON.stringify(schema.items)}\n\\`\\`\\`\n    `;\n    }\n    return {\n      parseChunk: (chunk) => {\n        const results = [];\n        const text = chunk.accumulatedText;\n        let startIndex = 0;\n        if (chunk.previousChunks?.length) {\n          const lastNewline = chunk.previousText.lastIndexOf(\"\\n\");\n          if (lastNewline !== -1) {\n            startIndex = lastNewline + 1;\n          }\n        }\n        const lines = text.slice(startIndex).split(\"\\n\");\n        for (const line of lines) {\n          const trimmed = line.trim();\n          if (trimmed.startsWith(\"{\")) {\n            try {\n              const result = import_json5.default.parse(trimmed);\n              if (result) {\n                results.push(result);\n              }\n            } catch (e) {\n              break;\n            }\n          }\n        }\n        return results;\n      },\n      parseMessage: (message) => {\n        const items = objectLines(message.text).map((l) => (0, import_extract.extractJson)(l)).filter((l) => !!l);\n        return items;\n      },\n      instructions\n    };\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=jsonl.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2pzb25sLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLDhCQUE4QjtBQUN2RztBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLGtCQUFrQixtQkFBTyxDQUFDLHFGQUFpQjtBQUMzQywyQkFBMkIsbUJBQU8sQ0FBQyxtRUFBTztBQUMxQyxxQkFBcUIsbUJBQU8sQ0FBQyxnRkFBWTtBQUN6QztBQUNBLHdGQUF3RjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtanMtYXBwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL2Zvcm1hdHMvanNvbmwuanM/OTY3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKFxuICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNXG4gIC8vIGZpbGUgdGhhdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBDb21tb25KUyBmaWxlIHVzaW5nIGEgQmFiZWwtXG4gIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuIFwiX19lc01vZHVsZVwiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldFxuICAvLyBcImRlZmF1bHRcIiB0byB0aGUgQ29tbW9uSlMgXCJtb2R1bGUuZXhwb3J0c1wiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIganNvbmxfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoanNvbmxfZXhwb3J0cywge1xuICBqc29ubEZvcm1hdHRlcjogKCkgPT4ganNvbmxGb3JtYXR0ZXJcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoanNvbmxfZXhwb3J0cyk7XG52YXIgaW1wb3J0X2NvcmUgPSByZXF1aXJlKFwiQGdlbmtpdC1haS9jb3JlXCIpO1xudmFyIGltcG9ydF9qc29uNSA9IF9fdG9FU00ocmVxdWlyZShcImpzb241XCIpKTtcbnZhciBpbXBvcnRfZXh0cmFjdCA9IHJlcXVpcmUoXCIuLi9leHRyYWN0XCIpO1xuZnVuY3Rpb24gb2JqZWN0TGluZXModGV4dCkge1xuICByZXR1cm4gdGV4dC5zcGxpdChcIlxcblwiKS5tYXAoKGxpbmUpID0+IGxpbmUudHJpbSgpKS5maWx0ZXIoKGxpbmUpID0+IGxpbmUuc3RhcnRzV2l0aChcIntcIikpO1xufVxuY29uc3QganNvbmxGb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwianNvbmxcIixcbiAgY29uZmlnOiB7XG4gICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvbmxcIlxuICB9LFxuICBoYW5kbGVyOiAoc2NoZW1hKSA9PiB7XG4gICAgaWYgKHNjaGVtYSAmJiAoc2NoZW1hLnR5cGUgIT09IFwiYXJyYXlcIiB8fCBzY2hlbWEuaXRlbXM/LnR5cGUgIT09IFwib2JqZWN0XCIpKSB7XG4gICAgICB0aHJvdyBuZXcgaW1wb3J0X2NvcmUuR2Vua2l0RXJyb3Ioe1xuICAgICAgICBzdGF0dXM6IFwiSU5WQUxJRF9BUkdVTUVOVFwiLFxuICAgICAgICBtZXNzYWdlOiBgTXVzdCBzdXBwbHkgYW4gJ2FycmF5JyBzY2hlbWEgdHlwZSBjb250YWluaW5nICdvYmplY3QnIGl0ZW1zIHdoZW4gdXNpbmcgdGhlICdqc29ubCcgcGFyc2VyIGZvcm1hdC5gXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IGluc3RydWN0aW9ucztcbiAgICBpZiAoc2NoZW1hPy5pdGVtcykge1xuICAgICAgaW5zdHJ1Y3Rpb25zID0gYE91dHB1dCBzaG91bGQgYmUgSlNPTkwgZm9ybWF0LCBhIHNlcXVlbmNlIG9mIEpTT04gb2JqZWN0cyAob25lIHBlciBsaW5lKSBzZXBhcmF0ZWQgYnkgYSBuZXdsaW5lIFxcYFxcXFxuXFxgIGNoYXJhY3Rlci4gRWFjaCBsaW5lIHNob3VsZCBiZSBhIEpTT04gb2JqZWN0IGNvbmZvcm1pbmcgdG8gdGhlIGZvbGxvd2luZyBzY2hlbWE6XG5cblxcYFxcYFxcYFxuJHtKU09OLnN0cmluZ2lmeShzY2hlbWEuaXRlbXMpfVxuXFxgXFxgXFxgXG4gICAgYDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcnNlQ2h1bms6IChjaHVuaykgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHRzID0gW107XG4gICAgICAgIGNvbnN0IHRleHQgPSBjaHVuay5hY2N1bXVsYXRlZFRleHQ7XG4gICAgICAgIGxldCBzdGFydEluZGV4ID0gMDtcbiAgICAgICAgaWYgKGNodW5rLnByZXZpb3VzQ2h1bmtzPy5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zdCBsYXN0TmV3bGluZSA9IGNodW5rLnByZXZpb3VzVGV4dC5sYXN0SW5kZXhPZihcIlxcblwiKTtcbiAgICAgICAgICBpZiAobGFzdE5ld2xpbmUgIT09IC0xKSB7XG4gICAgICAgICAgICBzdGFydEluZGV4ID0gbGFzdE5ld2xpbmUgKyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsaW5lcyA9IHRleHQuc2xpY2Uoc3RhcnRJbmRleCkuc3BsaXQoXCJcXG5cIik7XG4gICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lcykge1xuICAgICAgICAgIGNvbnN0IHRyaW1tZWQgPSBsaW5lLnRyaW0oKTtcbiAgICAgICAgICBpZiAodHJpbW1lZC5zdGFydHNXaXRoKFwie1wiKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gaW1wb3J0X2pzb241LmRlZmF1bHQucGFyc2UodHJpbW1lZCk7XG4gICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICB9LFxuICAgICAgcGFyc2VNZXNzYWdlOiAobWVzc2FnZSkgPT4ge1xuICAgICAgICBjb25zdCBpdGVtcyA9IG9iamVjdExpbmVzKG1lc3NhZ2UudGV4dCkubWFwKChsKSA9PiAoMCwgaW1wb3J0X2V4dHJhY3QuZXh0cmFjdEpzb24pKGwpKS5maWx0ZXIoKGwpID0+ICEhbCk7XG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICAgIH0sXG4gICAgICBpbnN0cnVjdGlvbnNcbiAgICB9O1xuICB9XG59O1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGpzb25sRm9ybWF0dGVyXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpzb25sLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/jsonl.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/text.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/text.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar text_exports = {};\n__export(text_exports, {\n  textFormatter: () => textFormatter\n});\nmodule.exports = __toCommonJS(text_exports);\nconst textFormatter = {\n  name: \"text\",\n  config: {\n    contentType: \"text/plain\"\n  },\n  handler: () => {\n    return {\n      parseChunk: (chunk) => {\n        return chunk.text;\n      },\n      parseMessage: (message) => {\n        return message.text;\n      }\n    };\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=text.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL3RleHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FFTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1qcy1hcHAvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9saWIvZm9ybWF0cy90ZXh0LmpzPzUzNmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHRleHRfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQodGV4dF9leHBvcnRzLCB7XG4gIHRleHRGb3JtYXR0ZXI6ICgpID0+IHRleHRGb3JtYXR0ZXJcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlModGV4dF9leHBvcnRzKTtcbmNvbnN0IHRleHRGb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwidGV4dFwiLFxuICBjb25maWc6IHtcbiAgICBjb250ZW50VHlwZTogXCJ0ZXh0L3BsYWluXCJcbiAgfSxcbiAgaGFuZGxlcjogKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBwYXJzZUNodW5rOiAoY2h1bmspID0+IHtcbiAgICAgICAgcmV0dXJuIGNodW5rLnRleHQ7XG4gICAgICB9LFxuICAgICAgcGFyc2VNZXNzYWdlOiAobWVzc2FnZSkgPT4ge1xuICAgICAgICByZXR1cm4gbWVzc2FnZS50ZXh0O1xuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgdGV4dEZvcm1hdHRlclxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZXh0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/text.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/generate.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar generate_exports = {};\n__export(generate_exports, {\n  GenerateResponse: () => import_response.GenerateResponse,\n  GenerateResponseChunk: () => import_chunk.GenerateResponseChunk,\n  GenerationBlockedError: () => GenerationBlockedError,\n  GenerationResponseError: () => GenerationResponseError,\n  generate: () => generate,\n  generateOperation: () => generateOperation,\n  generateStream: () => generateStream,\n  tagAsPreamble: () => tagAsPreamble,\n  toGenerateActionOptions: () => toGenerateActionOptions,\n  toGenerateRequest: () => toGenerateRequest\n});\nmodule.exports = __toCommonJS(generate_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_async = __webpack_require__(/*! @genkit-ai/core/async */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async.js\");\nvar import_registry = __webpack_require__(/*! @genkit-ai/core/registry */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_formats = __webpack_require__(/*! ./formats/index.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/index.js\");\nvar import_action = __webpack_require__(/*! ./generate/action.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/action.js\");\nvar import_chunk = __webpack_require__(/*! ./generate/chunk.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/chunk.js\");\nvar import_response = __webpack_require__(/*! ./generate/response.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/response.js\");\nvar import_message = __webpack_require__(/*! ./message.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js\");\nvar import_model = __webpack_require__(/*! ./model.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\");\nvar import_prompt = __webpack_require__(/*! ./prompt.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js\");\nvar import_resource = __webpack_require__(/*! ./resource.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/resource.js\");\nvar import_tool = __webpack_require__(/*! ./tool.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\");\nasync function toGenerateRequest(registry, options) {\n  const messages = [];\n  if (options.system) {\n    messages.push({\n      role: \"system\",\n      content: import_message.Message.parseContent(options.system)\n    });\n  }\n  if (options.messages) {\n    messages.push(...options.messages.map((m) => import_message.Message.parseData(m)));\n  }\n  if (options.prompt) {\n    messages.push({\n      role: \"user\",\n      content: import_message.Message.parseContent(options.prompt)\n    });\n  }\n  if (messages.length === 0) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: \"at least one message is required in generate request\"\n    });\n  }\n  if (options.resume && !(messages.at(-1)?.role === \"model\" && messages.at(-1)?.content.find((p) => !!p.toolRequest))) {\n    throw new import_core.GenkitError({\n      status: \"FAILED_PRECONDITION\",\n      message: `Last message must be a 'model' role with at least one tool request to 'resume' generation.`,\n      detail: messages.at(-1)\n    });\n  }\n  let tools;\n  if (options.tools) {\n    tools = await (0, import_tool.resolveTools)(registry, options.tools);\n  }\n  const resolvedSchema = (0, import_schema.toJsonSchema)({\n    schema: options.output?.schema,\n    jsonSchema: options.output?.jsonSchema\n  });\n  const resolvedFormat = await (0, import_formats.resolveFormat)(registry, options.output);\n  const instructions = (0, import_formats.resolveInstructions)(\n    resolvedFormat,\n    resolvedSchema,\n    options?.output?.instructions\n  );\n  const out = {\n    messages: (0, import_action.shouldInjectFormatInstructions)(\n      resolvedFormat?.config,\n      options.output\n    ) ? (0, import_formats.injectInstructions)(messages, instructions) : messages,\n    config: options.config,\n    docs: options.docs,\n    tools: tools?.map(import_tool.toToolDefinition) || [],\n    output: {\n      ...resolvedFormat?.config || {},\n      ...options.output,\n      schema: resolvedSchema\n    }\n  };\n  if (!out?.output?.schema) delete out?.output?.schema;\n  return out;\n}\nclass GenerationResponseError extends import_core.GenkitError {\n  detail;\n  constructor(response, message, status, detail) {\n    super({\n      status: status || \"FAILED_PRECONDITION\",\n      message\n    });\n    this.detail = { response, ...detail };\n  }\n}\nasync function toolsToActionRefs(registry, toolOpt) {\n  if (!toolOpt) return;\n  const tools = [];\n  for (const t of toolOpt) {\n    if (typeof t === \"string\") {\n      tools.push(await resolveFullToolName(registry, t));\n    } else if ((0, import_core.isAction)(t) || (0, import_tool.isDynamicTool)(t)) {\n      tools.push(`/${t.__action.metadata?.type}/${t.__action.name}`);\n    } else if ((0, import_prompt.isExecutablePrompt)(t)) {\n      const promptToolAction = await t.asTool();\n      tools.push(`/prompt/${promptToolAction.__action.name}`);\n    } else {\n      throw new Error(`Unable to determine type of tool: ${JSON.stringify(t)}`);\n    }\n  }\n  return tools;\n}\nfunction messagesFromOptions(options) {\n  const messages = [];\n  if (options.system) {\n    messages.push({\n      role: \"system\",\n      content: import_message.Message.parseContent(options.system)\n    });\n  }\n  if (options.messages) {\n    messages.push(...options.messages);\n  }\n  if (options.prompt) {\n    messages.push({\n      role: \"user\",\n      content: import_message.Message.parseContent(options.prompt)\n    });\n  }\n  if (messages.length === 0) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: \"at least one message is required in generate request\"\n    });\n  }\n  return messages;\n}\nclass GenerationBlockedError extends GenerationResponseError {\n}\nasync function generate(registry, options) {\n  const resolvedOptions = {\n    ...await Promise.resolve(options)\n  };\n  const resolvedFormat = await (0, import_formats.resolveFormat)(registry, resolvedOptions.output);\n  registry = maybeRegisterDynamicTools(registry, resolvedOptions);\n  registry = maybeRegisterDynamicResources(registry, resolvedOptions);\n  const params = await toGenerateActionOptions(registry, resolvedOptions);\n  const tools = await toolsToActionRefs(registry, resolvedOptions.tools);\n  const streamingCallback = stripNoop(\n    resolvedOptions.onChunk ?? resolvedOptions.streamingCallback\n  );\n  const response = await (0, import_core.runWithContext)(\n    resolvedOptions.context,\n    () => (0, import_action.generateHelper)(registry, {\n      rawRequest: params,\n      middleware: resolvedOptions.use,\n      abortSignal: resolvedOptions.abortSignal,\n      streamingCallback\n    })\n  );\n  const request = await toGenerateRequest(registry, {\n    ...resolvedOptions,\n    tools\n  });\n  return new import_response.GenerateResponse(response, {\n    request: response.request ?? request,\n    parser: resolvedFormat?.handler(request.output?.schema).parseMessage\n  });\n}\nasync function generateOperation(registry, options) {\n  (0, import_core.assertUnstable)(registry, \"beta\", \"generateOperation is a beta feature.\");\n  options = await options;\n  const resolvedModel = await (0, import_model.resolveModel)(registry, options.model);\n  if (!resolvedModel.modelAction.__action.metadata?.model.supports?.longRunning) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: `Model '${resolvedModel.modelAction.__action.name}' does not support long running operations.`\n    });\n  }\n  const { operation } = await generate(registry, options);\n  if (!operation) {\n    throw new import_core.GenkitError({\n      status: \"FAILED_PRECONDITION\",\n      message: `Model '${resolvedModel.modelAction.__action.name}' did not return an operation.`\n    });\n  }\n  return operation;\n}\nfunction maybeRegisterDynamicTools(registry, options) {\n  let hasDynamicTools = false;\n  options?.tools?.forEach((t) => {\n    if ((0, import_tool.isDynamicTool)(t)) {\n      if (!hasDynamicTools) {\n        hasDynamicTools = true;\n        registry = import_registry.Registry.withParent(registry);\n      }\n      registry.registerAction(\"tool\", t);\n    }\n  });\n  return registry;\n}\nfunction maybeRegisterDynamicResources(registry, options) {\n  let hasDynamicResources = false;\n  options?.resources?.forEach((r) => {\n    if ((0, import_resource.isDynamicResourceAction)(r)) {\n      if (!hasDynamicResources) {\n        hasDynamicResources = true;\n        registry = import_registry.Registry.withParent(registry);\n      }\n      registry.registerAction(\"resource\", r);\n    }\n  });\n  return registry;\n}\nasync function toGenerateActionOptions(registry, options) {\n  const resolvedModel = await (0, import_model.resolveModel)(registry, options.model);\n  const tools = await toolsToActionRefs(registry, options.tools);\n  const messages = messagesFromOptions(options);\n  const resolvedSchema = (0, import_schema.toJsonSchema)({\n    schema: options.output?.schema,\n    jsonSchema: options.output?.jsonSchema\n  });\n  if ((options.output?.schema || options.output?.jsonSchema) && !options.output?.format) {\n    options.output.format = \"json\";\n  }\n  const params = {\n    model: resolvedModel.modelAction.__action.name,\n    docs: options.docs,\n    messages,\n    tools,\n    toolChoice: options.toolChoice,\n    config: {\n      version: resolvedModel.version,\n      ...stripUndefinedOptions(resolvedModel.config),\n      ...stripUndefinedOptions(options.config)\n    },\n    output: options.output && {\n      ...options.output,\n      format: options.output.format,\n      jsonSchema: resolvedSchema\n    },\n    // coerce reply and restart into arrays for the action schema\n    resume: options.resume && {\n      respond: [options.resume.respond || []].flat(),\n      restart: [options.resume.restart || []].flat(),\n      metadata: options.resume.metadata\n    },\n    returnToolRequests: options.returnToolRequests,\n    maxTurns: options.maxTurns,\n    stepName: options.stepName\n  };\n  if (Object.keys(params.config).length === 0 && !options.config) {\n    delete params.config;\n  }\n  return params;\n}\nfunction stripNoop(callback) {\n  if (callback === import_core.sentinelNoopStreamingCallback) {\n    return void 0;\n  }\n  return callback;\n}\nfunction stripUndefinedOptions(input) {\n  if (!input) return input;\n  const copy = { ...input };\n  Object.keys(input).forEach((key) => {\n    if (copy[key] === void 0) {\n      delete copy[key];\n    }\n  });\n  return copy;\n}\nasync function resolveFullToolName(registry, name) {\n  if (await registry.lookupAction(`/tool/${name}`)) {\n    return `/tool/${name}`;\n  } else if (await registry.lookupAction(`/prompt/${name}`)) {\n    return `/prompt/${name}`;\n  } else {\n    throw new Error(`Unable to determine type of of tool: ${name}`);\n  }\n}\nfunction generateStream(registry, options) {\n  const channel = new import_async.Channel();\n  const generated = Promise.resolve(options).then(\n    (resolvedOptions) => generate(registry, {\n      ...resolvedOptions,\n      onChunk: (chunk) => channel.send(chunk)\n    })\n  );\n  generated.then(\n    () => channel.close(),\n    (err) => channel.error(err)\n  );\n  return {\n    response: generated,\n    stream: channel\n  };\n}\nfunction tagAsPreamble(msgs) {\n  if (!msgs) {\n    return void 0;\n  }\n  return msgs.map((m) => ({\n    ...m,\n    metadata: {\n      ...m.metadata,\n      preamble: true\n    }\n  }));\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=generate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/action.js":
/*!***********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/generate/action.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar action_exports = {};\n__export(action_exports, {\n  defineGenerateAction: () => defineGenerateAction,\n  generateHelper: () => generateHelper,\n  inferRoleFromParts: () => inferRoleFromParts,\n  shouldInjectFormatInstructions: () => shouldInjectFormatInstructions\n});\nmodule.exports = __toCommonJS(action_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_formats = __webpack_require__(/*! ../formats/index.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/index.js\");\nvar import_generate = __webpack_require__(/*! ../generate.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js\");\nvar import_chunk = __webpack_require__(/*! ../generate/chunk.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/chunk.js\");\nvar import_model = __webpack_require__(/*! ../model.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\");\nvar import_resource = __webpack_require__(/*! ../resource.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/resource.js\");\nvar import_tool = __webpack_require__(/*! ../tool.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\");\nvar import_resolve_tool_requests = __webpack_require__(/*! ./resolve-tool-requests.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/resolve-tool-requests.js\");\nfunction defineGenerateAction(registry) {\n  return (0, import_core.defineAction)(\n    registry,\n    {\n      actionType: \"util\",\n      name: \"generate\",\n      inputSchema: import_model.GenerateActionOptionsSchema,\n      outputSchema: import_model.GenerateResponseSchema,\n      streamSchema: import_model.GenerateResponseChunkSchema\n    },\n    async (request, { streamingRequested, sendChunk }) => {\n      const generateFn = (sendChunk2) => generate(registry, {\n        rawRequest: request,\n        currentTurn: 0,\n        messageIndex: 0,\n        // Generate util action does not support middleware. Maybe when we add named/registered middleware....\n        middleware: [],\n        streamingCallback: sendChunk2\n      });\n      return streamingRequested ? generateFn(\n        (c) => sendChunk(c.toJSON ? c.toJSON() : c)\n      ) : generateFn();\n    }\n  );\n}\nasync function generateHelper(registry, options) {\n  const currentTurn = options.currentTurn ?? 0;\n  const messageIndex = options.messageIndex ?? 0;\n  return await (0, import_tracing.runInNewSpan)(\n    registry,\n    {\n      metadata: {\n        name: options.rawRequest.stepName || \"generate\"\n      },\n      labels: {\n        [import_tracing.SPAN_TYPE_ATTR]: \"util\"\n      }\n    },\n    async (metadata) => {\n      metadata.name = options.rawRequest.stepName || \"generate\";\n      metadata.input = options.rawRequest;\n      const output = await generate(registry, {\n        rawRequest: options.rawRequest,\n        middleware: options.middleware,\n        currentTurn,\n        messageIndex,\n        abortSignal: options.abortSignal,\n        streamingCallback: options.streamingCallback\n      });\n      metadata.output = JSON.stringify(output);\n      return output;\n    }\n  );\n}\nasync function resolveParameters(registry, request) {\n  const [model, tools, format] = await Promise.all([\n    (0, import_model.resolveModel)(registry, request.model, { warnDeprecated: true }).then(\n      (r) => r.modelAction\n    ),\n    (0, import_tool.resolveTools)(registry, request.tools),\n    (0, import_formats.resolveFormat)(registry, request.output)\n  ]);\n  return { model, tools, format };\n}\nfunction applyFormat(rawRequest, resolvedFormat) {\n  const outRequest = { ...rawRequest };\n  if (rawRequest.output?.jsonSchema && !rawRequest.output?.format) {\n    outRequest.output = { ...rawRequest.output, format: \"json\" };\n  }\n  const instructions = (0, import_formats.resolveInstructions)(\n    resolvedFormat,\n    outRequest.output?.jsonSchema,\n    outRequest?.output?.instructions\n  );\n  if (resolvedFormat) {\n    if (shouldInjectFormatInstructions(resolvedFormat.config, rawRequest?.output)) {\n      outRequest.messages = (0, import_formats.injectInstructions)(\n        outRequest.messages,\n        instructions\n      );\n    }\n    outRequest.output = {\n      // use output config from the format\n      ...resolvedFormat.config,\n      // if anything is set explicitly, use that\n      ...outRequest.output\n    };\n  }\n  return outRequest;\n}\nfunction shouldInjectFormatInstructions(formatConfig, rawRequestConfig) {\n  return formatConfig?.defaultInstructions !== false || rawRequestConfig?.instructions;\n}\nfunction applyTransferPreamble(rawRequest, transferPreamble) {\n  if (!transferPreamble) {\n    return rawRequest;\n  }\n  return (0, import_core.stripUndefinedProps)({\n    ...rawRequest,\n    messages: [\n      ...(0, import_generate.tagAsPreamble)(transferPreamble.messages),\n      ...rawRequest.messages.filter((m) => !m.metadata?.preamble)\n    ],\n    toolChoice: transferPreamble.toolChoice || rawRequest.toolChoice,\n    tools: transferPreamble.tools || rawRequest.tools,\n    config: transferPreamble.config || rawRequest.config\n  });\n}\nasync function generate(registry, {\n  rawRequest,\n  middleware,\n  currentTurn,\n  messageIndex,\n  abortSignal,\n  streamingCallback\n}) {\n  const { model, tools, format } = await resolveParameters(\n    registry,\n    rawRequest\n  );\n  rawRequest = applyFormat(rawRequest, format);\n  rawRequest = await applyResources(registry, rawRequest);\n  await (0, import_resolve_tool_requests.assertValidToolNames)(tools);\n  const {\n    revisedRequest,\n    interruptedResponse,\n    toolMessage: resumedToolMessage\n  } = await (0, import_resolve_tool_requests.resolveResumeOption)(registry, rawRequest);\n  if (interruptedResponse) {\n    throw new import_core.GenkitError({\n      status: \"FAILED_PRECONDITION\",\n      message: \"One or more tools triggered an interrupt during a restarted execution.\",\n      detail: { message: interruptedResponse.message }\n    });\n  }\n  rawRequest = revisedRequest;\n  const request = await actionToGenerateRequest(\n    rawRequest,\n    tools,\n    format,\n    model\n  );\n  const previousChunks = [];\n  let chunkRole = \"model\";\n  const makeChunk = (role, chunk) => {\n    if (role !== chunkRole && previousChunks.length) messageIndex++;\n    chunkRole = role;\n    const prevToSend = [...previousChunks];\n    previousChunks.push(chunk);\n    return new import_chunk.GenerateResponseChunk(chunk, {\n      index: messageIndex,\n      role,\n      previousChunks: prevToSend,\n      parser: format?.handler(request.output?.schema).parseChunk\n    });\n  };\n  if (resumedToolMessage && streamingCallback) {\n    streamingCallback(makeChunk(\"tool\", resumedToolMessage));\n  }\n  var response;\n  const dispatch = async (index, req) => {\n    if (!middleware || index === middleware.length) {\n      return await model(req, {\n        abortSignal,\n        onChunk: streamingCallback && ((chunk) => streamingCallback && streamingCallback(makeChunk(\"model\", chunk)))\n      });\n    }\n    const currentMiddleware = middleware[index];\n    return currentMiddleware(\n      req,\n      async (modifiedReq) => dispatch(index + 1, modifiedReq || req)\n    );\n  };\n  const modelResponse = await dispatch(0, request);\n  if (model.__action.actionType === \"background-model\") {\n    response = new import_generate.GenerateResponse(\n      { operation: modelResponse },\n      {\n        request,\n        parser: format?.handler(request.output?.schema).parseMessage\n      }\n    );\n  } else {\n    response = new import_generate.GenerateResponse(modelResponse, {\n      request,\n      parser: format?.handler(request.output?.schema).parseMessage\n    });\n  }\n  if (model.__action.actionType === \"background-model\") {\n    return response.toJSON();\n  }\n  response.assertValid();\n  const generatedMessage = response.message;\n  const toolRequests = generatedMessage.content.filter(\n    (part) => !!part.toolRequest\n  );\n  if (rawRequest.returnToolRequests || toolRequests.length === 0) {\n    if (toolRequests.length === 0) response.assertValidSchema(request);\n    return response.toJSON();\n  }\n  const maxIterations = rawRequest.maxTurns ?? 5;\n  if (currentTurn + 1 > maxIterations) {\n    throw new import_generate.GenerationResponseError(\n      response,\n      `Exceeded maximum tool call iterations (${maxIterations})`,\n      \"ABORTED\",\n      { request }\n    );\n  }\n  const { revisedModelMessage, toolMessage, transferPreamble } = await (0, import_resolve_tool_requests.resolveToolRequests)(registry, rawRequest, generatedMessage);\n  if (revisedModelMessage) {\n    return {\n      ...response.toJSON(),\n      finishReason: \"interrupted\",\n      finishMessage: \"One or more tool calls resulted in interrupts.\",\n      message: revisedModelMessage\n    };\n  }\n  streamingCallback?.(\n    makeChunk(\"tool\", {\n      content: toolMessage.content\n    })\n  );\n  let nextRequest = {\n    ...rawRequest,\n    messages: [...rawRequest.messages, generatedMessage.toJSON(), toolMessage]\n  };\n  nextRequest = applyTransferPreamble(nextRequest, transferPreamble);\n  return await generateHelper(registry, {\n    rawRequest: nextRequest,\n    middleware,\n    currentTurn: currentTurn + 1,\n    messageIndex: messageIndex + 1,\n    streamingCallback,\n    abortSignal\n  });\n}\nasync function actionToGenerateRequest(options, resolvedTools, resolvedFormat, model) {\n  const modelInfo = model.__action.metadata?.model;\n  if ((options.tools?.length ?? 0) > 0 && modelInfo?.supports && !modelInfo?.supports?.tools) {\n    import_logging.logger.warn(\n      `The model '${model.__action.name}' does not support tools (you set: ${options.tools?.length} tools). The model may not behave the way you expect.`\n    );\n  }\n  if (options.toolChoice && modelInfo?.supports && !modelInfo?.supports?.toolChoice) {\n    import_logging.logger.warn(\n      `The model '${model.__action.name}' does not support the 'toolChoice' option (you set: ${options.toolChoice}). The model may not behave the way you expect.`\n    );\n  }\n  const out = {\n    messages: options.messages,\n    config: options.config,\n    docs: options.docs,\n    tools: resolvedTools?.map(import_tool.toToolDefinition) || [],\n    output: (0, import_core.stripUndefinedProps)({\n      constrained: options.output?.constrained,\n      contentType: options.output?.contentType,\n      format: options.output?.format,\n      schema: options.output?.jsonSchema\n    })\n  };\n  if (options.toolChoice) {\n    out.toolChoice = options.toolChoice;\n  }\n  if (out.output && !out.output.schema) delete out.output.schema;\n  return out;\n}\nfunction inferRoleFromParts(parts) {\n  const uniqueRoles = /* @__PURE__ */ new Set();\n  for (const part of parts) {\n    const role = getRoleFromPart(part);\n    uniqueRoles.add(role);\n    if (uniqueRoles.size > 1) {\n      throw new Error(\"Contents contain mixed roles\");\n    }\n  }\n  return Array.from(uniqueRoles)[0];\n}\nfunction getRoleFromPart(part) {\n  if (part.toolRequest !== void 0) return \"model\";\n  if (part.toolResponse !== void 0) return \"tool\";\n  if (part.text !== void 0) return \"user\";\n  if (part.media !== void 0) return \"user\";\n  if (part.data !== void 0) return \"user\";\n  throw new Error(\"No recognized fields in content\");\n}\nasync function applyResources(registry, rawRequest) {\n  if (!rawRequest.messages.find((m) => !!m.content.find((c) => c.resource))) {\n    return rawRequest;\n  }\n  const updatedMessages = [];\n  for (const m of rawRequest.messages) {\n    if (!m.content.find((c) => c.resource)) {\n      updatedMessages.push(m);\n      continue;\n    }\n    const updatedContent = [];\n    for (const p of m.content) {\n      if (!p.resource) {\n        updatedContent.push(p);\n        continue;\n      }\n      const resource = await (0, import_resource.findMatchingResource)(registry, p.resource);\n      if (!resource) {\n        throw new import_core.GenkitError({\n          status: \"NOT_FOUND\",\n          message: `failed to find matching resource for ${p.resource.uri}`\n        });\n      }\n      const resourceParts = await resource(p.resource);\n      updatedContent.push(...resourceParts.content);\n    }\n    updatedMessages.push({\n      ...m,\n      content: updatedContent\n    });\n  }\n  return {\n    ...rawRequest,\n    messages: updatedMessages\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=action.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/action.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/chunk.js":
/*!**********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/generate/chunk.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar chunk_exports = {};\n__export(chunk_exports, {\n  GenerateResponseChunk: () => GenerateResponseChunk\n});\nmodule.exports = __toCommonJS(chunk_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_extract = __webpack_require__(/*! ../extract.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\");\nclass GenerateResponseChunk {\n  /** The index of the message this chunk corresponds to, starting with `0` for the first model response of the generation. */\n  index;\n  /** The role of the message this chunk corresponds to. Will always be `model` or `tool`. */\n  role;\n  /** The content generated in this chunk. */\n  content;\n  /** Custom model-specific data for this chunk. */\n  custom;\n  /** Accumulated chunks for partial output extraction. */\n  previousChunks;\n  /** The parser to be used to parse `output` from this chunk. */\n  parser;\n  constructor(data, options) {\n    this.content = data.content || [];\n    this.custom = data.custom;\n    this.previousChunks = options.previousChunks ? [...options.previousChunks] : void 0;\n    this.index = options.index;\n    this.role = options.role;\n    this.parser = options.parser;\n  }\n  /**\n   * Concatenates all `text` parts present in the chunk with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  get text() {\n    return this.content.map((part) => part.text || \"\").join(\"\");\n  }\n  /**\n   * Concatenates all `reasoning` parts present in the chunk with no delimiter.\n   * @returns A string of all concatenated reasoning parts.\n   */\n  get reasoning() {\n    return this.content.map((part) => part.reasoning || \"\").join(\"\");\n  }\n  /**\n   * Concatenates all `text` parts of all chunks from the response thus far.\n   * @returns A string of all concatenated chunk text content.\n   */\n  get accumulatedText() {\n    return this.previousText + this.text;\n  }\n  /**\n   * Concatenates all `text` parts of all preceding chunks.\n   */\n  get previousText() {\n    if (!this.previousChunks)\n      throw new import_core.GenkitError({\n        status: \"FAILED_PRECONDITION\",\n        message: \"Cannot compose accumulated text without previous chunks.\"\n      });\n    return this.previousChunks?.map((c) => c.content.map((p) => p.text || \"\").join(\"\")).join(\"\");\n  }\n  /**\n   * Returns the first media part detected in the chunk. Useful for extracting\n   * (for example) an image from a generation expected to create one.\n   * @returns The first detected `media` part in the chunk.\n   */\n  get media() {\n    return this.content.find((part) => part.media)?.media || null;\n  }\n  /**\n   * Returns the first detected `data` part of a chunk.\n   * @returns The first `data` part detected in the chunk (if any).\n   */\n  get data() {\n    return this.content.find((part) => part.data)?.data;\n  }\n  /**\n   * Returns all tool request found in this chunk.\n   * @returns Array of all tool request found in this chunk.\n   */\n  get toolRequests() {\n    return this.content.filter(\n      (part) => !!part.toolRequest\n    );\n  }\n  /**\n   * Parses the chunk into the desired output format using the parser associated\n   * with the generate request, or falls back to naive JSON parsing otherwise.\n   */\n  get output() {\n    if (this.parser) return this.parser(this);\n    return this.data || (0, import_extract.extractJson)(this.accumulatedText);\n  }\n  toJSON() {\n    const data = {\n      role: this.role,\n      index: this.index,\n      content: this.content\n    };\n    if (this.custom) {\n      data.custom = this.custom;\n    }\n    return data;\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=chunk.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9nZW5lcmF0ZS9jaHVuay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLGtCQUFrQixtQkFBTyxDQUFDLHFGQUFpQjtBQUMzQyxxQkFBcUIsbUJBQU8sQ0FBQyxtRkFBZTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtanMtYXBwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL2dlbmVyYXRlL2NodW5rLmpzPzAwZjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGNodW5rX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGNodW5rX2V4cG9ydHMsIHtcbiAgR2VuZXJhdGVSZXNwb25zZUNodW5rOiAoKSA9PiBHZW5lcmF0ZVJlc3BvbnNlQ2h1bmtcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoY2h1bmtfZXhwb3J0cyk7XG52YXIgaW1wb3J0X2NvcmUgPSByZXF1aXJlKFwiQGdlbmtpdC1haS9jb3JlXCIpO1xudmFyIGltcG9ydF9leHRyYWN0ID0gcmVxdWlyZShcIi4uL2V4dHJhY3QuanNcIik7XG5jbGFzcyBHZW5lcmF0ZVJlc3BvbnNlQ2h1bmsge1xuICAvKiogVGhlIGluZGV4IG9mIHRoZSBtZXNzYWdlIHRoaXMgY2h1bmsgY29ycmVzcG9uZHMgdG8sIHN0YXJ0aW5nIHdpdGggYDBgIGZvciB0aGUgZmlyc3QgbW9kZWwgcmVzcG9uc2Ugb2YgdGhlIGdlbmVyYXRpb24uICovXG4gIGluZGV4O1xuICAvKiogVGhlIHJvbGUgb2YgdGhlIG1lc3NhZ2UgdGhpcyBjaHVuayBjb3JyZXNwb25kcyB0by4gV2lsbCBhbHdheXMgYmUgYG1vZGVsYCBvciBgdG9vbGAuICovXG4gIHJvbGU7XG4gIC8qKiBUaGUgY29udGVudCBnZW5lcmF0ZWQgaW4gdGhpcyBjaHVuay4gKi9cbiAgY29udGVudDtcbiAgLyoqIEN1c3RvbSBtb2RlbC1zcGVjaWZpYyBkYXRhIGZvciB0aGlzIGNodW5rLiAqL1xuICBjdXN0b207XG4gIC8qKiBBY2N1bXVsYXRlZCBjaHVua3MgZm9yIHBhcnRpYWwgb3V0cHV0IGV4dHJhY3Rpb24uICovXG4gIHByZXZpb3VzQ2h1bmtzO1xuICAvKiogVGhlIHBhcnNlciB0byBiZSB1c2VkIHRvIHBhcnNlIGBvdXRwdXRgIGZyb20gdGhpcyBjaHVuay4gKi9cbiAgcGFyc2VyO1xuICBjb25zdHJ1Y3RvcihkYXRhLCBvcHRpb25zKSB7XG4gICAgdGhpcy5jb250ZW50ID0gZGF0YS5jb250ZW50IHx8IFtdO1xuICAgIHRoaXMuY3VzdG9tID0gZGF0YS5jdXN0b207XG4gICAgdGhpcy5wcmV2aW91c0NodW5rcyA9IG9wdGlvbnMucHJldmlvdXNDaHVua3MgPyBbLi4ub3B0aW9ucy5wcmV2aW91c0NodW5rc10gOiB2b2lkIDA7XG4gICAgdGhpcy5pbmRleCA9IG9wdGlvbnMuaW5kZXg7XG4gICAgdGhpcy5yb2xlID0gb3B0aW9ucy5yb2xlO1xuICAgIHRoaXMucGFyc2VyID0gb3B0aW9ucy5wYXJzZXI7XG4gIH1cbiAgLyoqXG4gICAqIENvbmNhdGVuYXRlcyBhbGwgYHRleHRgIHBhcnRzIHByZXNlbnQgaW4gdGhlIGNodW5rIHdpdGggbm8gZGVsaW1pdGVyLlxuICAgKiBAcmV0dXJucyBBIHN0cmluZyBvZiBhbGwgY29uY2F0ZW5hdGVkIHRleHQgcGFydHMuXG4gICAqL1xuICBnZXQgdGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50Lm1hcCgocGFydCkgPT4gcGFydC50ZXh0IHx8IFwiXCIpLmpvaW4oXCJcIik7XG4gIH1cbiAgLyoqXG4gICAqIENvbmNhdGVuYXRlcyBhbGwgYHJlYXNvbmluZ2AgcGFydHMgcHJlc2VudCBpbiB0aGUgY2h1bmsgd2l0aCBubyBkZWxpbWl0ZXIuXG4gICAqIEByZXR1cm5zIEEgc3RyaW5nIG9mIGFsbCBjb25jYXRlbmF0ZWQgcmVhc29uaW5nIHBhcnRzLlxuICAgKi9cbiAgZ2V0IHJlYXNvbmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50Lm1hcCgocGFydCkgPT4gcGFydC5yZWFzb25pbmcgfHwgXCJcIikuam9pbihcIlwiKTtcbiAgfVxuICAvKipcbiAgICogQ29uY2F0ZW5hdGVzIGFsbCBgdGV4dGAgcGFydHMgb2YgYWxsIGNodW5rcyBmcm9tIHRoZSByZXNwb25zZSB0aHVzIGZhci5cbiAgICogQHJldHVybnMgQSBzdHJpbmcgb2YgYWxsIGNvbmNhdGVuYXRlZCBjaHVuayB0ZXh0IGNvbnRlbnQuXG4gICAqL1xuICBnZXQgYWNjdW11bGF0ZWRUZXh0KCkge1xuICAgIHJldHVybiB0aGlzLnByZXZpb3VzVGV4dCArIHRoaXMudGV4dDtcbiAgfVxuICAvKipcbiAgICogQ29uY2F0ZW5hdGVzIGFsbCBgdGV4dGAgcGFydHMgb2YgYWxsIHByZWNlZGluZyBjaHVua3MuXG4gICAqL1xuICBnZXQgcHJldmlvdXNUZXh0KCkge1xuICAgIGlmICghdGhpcy5wcmV2aW91c0NodW5rcylcbiAgICAgIHRocm93IG5ldyBpbXBvcnRfY29yZS5HZW5raXRFcnJvcih7XG4gICAgICAgIHN0YXR1czogXCJGQUlMRURfUFJFQ09ORElUSU9OXCIsXG4gICAgICAgIG1lc3NhZ2U6IFwiQ2Fubm90IGNvbXBvc2UgYWNjdW11bGF0ZWQgdGV4dCB3aXRob3V0IHByZXZpb3VzIGNodW5rcy5cIlxuICAgICAgfSk7XG4gICAgcmV0dXJuIHRoaXMucHJldmlvdXNDaHVua3M/Lm1hcCgoYykgPT4gYy5jb250ZW50Lm1hcCgocCkgPT4gcC50ZXh0IHx8IFwiXCIpLmpvaW4oXCJcIikpLmpvaW4oXCJcIik7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZpcnN0IG1lZGlhIHBhcnQgZGV0ZWN0ZWQgaW4gdGhlIGNodW5rLiBVc2VmdWwgZm9yIGV4dHJhY3RpbmdcbiAgICogKGZvciBleGFtcGxlKSBhbiBpbWFnZSBmcm9tIGEgZ2VuZXJhdGlvbiBleHBlY3RlZCB0byBjcmVhdGUgb25lLlxuICAgKiBAcmV0dXJucyBUaGUgZmlyc3QgZGV0ZWN0ZWQgYG1lZGlhYCBwYXJ0IGluIHRoZSBjaHVuay5cbiAgICovXG4gIGdldCBtZWRpYSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50LmZpbmQoKHBhcnQpID0+IHBhcnQubWVkaWEpPy5tZWRpYSB8fCBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBmaXJzdCBkZXRlY3RlZCBgZGF0YWAgcGFydCBvZiBhIGNodW5rLlxuICAgKiBAcmV0dXJucyBUaGUgZmlyc3QgYGRhdGFgIHBhcnQgZGV0ZWN0ZWQgaW4gdGhlIGNodW5rIChpZiBhbnkpLlxuICAgKi9cbiAgZ2V0IGRhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudC5maW5kKChwYXJ0KSA9PiBwYXJ0LmRhdGEpPy5kYXRhO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFsbCB0b29sIHJlcXVlc3QgZm91bmQgaW4gdGhpcyBjaHVuay5cbiAgICogQHJldHVybnMgQXJyYXkgb2YgYWxsIHRvb2wgcmVxdWVzdCBmb3VuZCBpbiB0aGlzIGNodW5rLlxuICAgKi9cbiAgZ2V0IHRvb2xSZXF1ZXN0cygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50LmZpbHRlcihcbiAgICAgIChwYXJ0KSA9PiAhIXBhcnQudG9vbFJlcXVlc3RcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBQYXJzZXMgdGhlIGNodW5rIGludG8gdGhlIGRlc2lyZWQgb3V0cHV0IGZvcm1hdCB1c2luZyB0aGUgcGFyc2VyIGFzc29jaWF0ZWRcbiAgICogd2l0aCB0aGUgZ2VuZXJhdGUgcmVxdWVzdCwgb3IgZmFsbHMgYmFjayB0byBuYWl2ZSBKU09OIHBhcnNpbmcgb3RoZXJ3aXNlLlxuICAgKi9cbiAgZ2V0IG91dHB1dCgpIHtcbiAgICBpZiAodGhpcy5wYXJzZXIpIHJldHVybiB0aGlzLnBhcnNlcih0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5kYXRhIHx8ICgwLCBpbXBvcnRfZXh0cmFjdC5leHRyYWN0SnNvbikodGhpcy5hY2N1bXVsYXRlZFRleHQpO1xuICB9XG4gIHRvSlNPTigpIHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgcm9sZTogdGhpcy5yb2xlLFxuICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXG4gICAgICBjb250ZW50OiB0aGlzLmNvbnRlbnRcbiAgICB9O1xuICAgIGlmICh0aGlzLmN1c3RvbSkge1xuICAgICAgZGF0YS5jdXN0b20gPSB0aGlzLmN1c3RvbTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBHZW5lcmF0ZVJlc3BvbnNlQ2h1bmtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmsuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/chunk.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/resolve-tool-requests.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/generate/resolve-tool-requests.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar resolve_tool_requests_exports = {};\n__export(resolve_tool_requests_exports, {\n  assertValidToolNames: () => assertValidToolNames,\n  resolveRestartedTools: () => resolveRestartedTools,\n  resolveResumeOption: () => resolveResumeOption,\n  resolveToolRequest: () => resolveToolRequest,\n  resolveToolRequests: () => resolveToolRequests,\n  toPendingOutput: () => toPendingOutput,\n  toToolMap: () => toToolMap\n});\nmodule.exports = __toCommonJS(resolve_tool_requests_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_prompt = __webpack_require__(/*! ../prompt.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js\");\nvar import_tool = __webpack_require__(/*! ../tool.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\");\nfunction toToolMap(tools) {\n  assertValidToolNames(tools);\n  const out = {};\n  for (const tool of tools) {\n    const name = tool.__action.name;\n    const shortName = name.substring(name.lastIndexOf(\"/\") + 1);\n    out[shortName] = tool;\n  }\n  return out;\n}\nfunction assertValidToolNames(tools) {\n  const nameMap = {};\n  for (const tool of tools) {\n    const name = tool.__action.name;\n    const shortName = name.substring(name.lastIndexOf(\"/\") + 1);\n    if (nameMap[shortName]) {\n      throw new import_core.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `Cannot provide two tools with the same name: '${name}' and '${nameMap[shortName]}'`\n      });\n    }\n    nameMap[shortName] = name;\n  }\n}\nfunction toRunOptions(part) {\n  const out = { metadata: part.metadata };\n  if (part.metadata?.resumed) out.resumed = part.metadata.resumed;\n  return out;\n}\nfunction toPendingOutput(part, response) {\n  return {\n    ...part,\n    metadata: {\n      ...part.metadata,\n      pendingOutput: response.toolResponse.output\n    }\n  };\n}\nasync function resolveToolRequest(rawRequest, part, toolMap, runOptions) {\n  const tool = toolMap[part.toolRequest.name];\n  if (!tool) {\n    throw new import_core.GenkitError({\n      status: \"NOT_FOUND\",\n      message: `Tool ${part.toolRequest.name} not found`,\n      detail: { request: rawRequest }\n    });\n  }\n  if ((0, import_prompt.isPromptAction)(tool)) {\n    const preamble = await tool(part.toolRequest.input);\n    const response = {\n      toolResponse: {\n        name: part.toolRequest.name,\n        ref: part.toolRequest.ref,\n        output: `transferred to ${part.toolRequest.name}`\n      }\n    };\n    return { preamble, response };\n  }\n  try {\n    const output = await tool(part.toolRequest.input, toRunOptions(part));\n    const response = (0, import_core.stripUndefinedProps)({\n      toolResponse: {\n        name: part.toolRequest.name,\n        ref: part.toolRequest.ref,\n        output\n      }\n    });\n    return { response };\n  } catch (e) {\n    if (e instanceof import_tool.ToolInterruptError || // There's an inexplicable case when the above type check fails, only in tests.\n    e.name === \"ToolInterruptError\") {\n      const ie = e;\n      import_logging.logger.debug(\n        `tool '${toolMap[part.toolRequest?.name].__action.name}' triggered an interrupt${ie.metadata ? `: ${JSON.stringify(ie.metadata)}` : \"\"}`\n      );\n      const interrupt = {\n        toolRequest: part.toolRequest,\n        metadata: { ...part.metadata, interrupt: ie.metadata || true }\n      };\n      return { interrupt };\n    }\n    throw e;\n  }\n}\nasync function resolveToolRequests(registry, rawRequest, generatedMessage) {\n  const toolMap = toToolMap(await (0, import_tool.resolveTools)(registry, rawRequest.tools));\n  const responseParts = [];\n  let hasInterrupts = false;\n  let transferPreamble;\n  const revisedModelMessage = {\n    ...generatedMessage,\n    content: [...generatedMessage.content]\n  };\n  await Promise.all(\n    revisedModelMessage.content.map(async (part, i) => {\n      if (!part.toolRequest) return;\n      const { preamble, response, interrupt } = await resolveToolRequest(\n        rawRequest,\n        part,\n        toolMap\n      );\n      if (preamble) {\n        if (transferPreamble) {\n          throw new import_core.GenkitError({\n            status: \"INVALID_ARGUMENT\",\n            message: `Model attempted to transfer to multiple prompt tools.`\n          });\n        }\n        transferPreamble = preamble;\n      }\n      if (response) {\n        responseParts.push(response);\n        revisedModelMessage.content.splice(\n          i,\n          1,\n          toPendingOutput(part, response)\n        );\n      }\n      if (interrupt) {\n        revisedModelMessage.content.splice(i, 1, interrupt);\n        hasInterrupts = true;\n      }\n    })\n  );\n  if (hasInterrupts) {\n    return { revisedModelMessage };\n  }\n  return {\n    toolMessage: { role: \"tool\", content: responseParts },\n    transferPreamble\n  };\n}\nfunction findCorrespondingToolRequest(parts, part) {\n  const name = part.toolRequest?.name || part.toolResponse?.name;\n  const ref = part.toolRequest?.ref || part.toolResponse?.ref;\n  return parts.find(\n    (p) => p.toolRequest?.name === name && p.toolRequest?.ref === ref\n  );\n}\nfunction findCorrespondingToolResponse(parts, part) {\n  const name = part.toolRequest?.name || part.toolResponse?.name;\n  const ref = part.toolRequest?.ref || part.toolResponse?.ref;\n  return parts.find(\n    (p) => p.toolResponse?.name === name && p.toolResponse?.ref === ref\n  );\n}\nasync function resolveResumedToolRequest(rawRequest, part, toolMap) {\n  if (part.metadata?.pendingOutput) {\n    const { pendingOutput, ...metadata } = part.metadata;\n    const toolResponse = {\n      toolResponse: {\n        name: part.toolRequest.name,\n        ref: part.toolRequest.ref,\n        output: pendingOutput\n      },\n      metadata: { ...metadata, source: \"pending\" }\n    };\n    return (0, import_core.stripUndefinedProps)({\n      toolResponse,\n      toolRequest: { ...part, metadata }\n    });\n  }\n  const providedResponse = findCorrespondingToolResponse(\n    rawRequest.resume?.respond || [],\n    part\n  );\n  if (providedResponse) {\n    const toolResponse = providedResponse;\n    const { interrupt, ...metadata } = part.metadata || {};\n    return (0, import_core.stripUndefinedProps)({\n      toolResponse,\n      toolRequest: {\n        ...part,\n        metadata: { ...metadata, resolvedInterrupt: interrupt }\n      }\n    });\n  }\n  const restartRequest = findCorrespondingToolRequest(\n    rawRequest.resume?.restart || [],\n    part\n  );\n  if (restartRequest) {\n    const { response, interrupt, preamble } = await resolveToolRequest(\n      rawRequest,\n      restartRequest,\n      toolMap\n    );\n    if (preamble) {\n      throw new import_core.GenkitError({\n        status: \"INTERNAL\",\n        message: `Prompt tool '${restartRequest.toolRequest.name}' executed inside 'restart' resolution. This should never happen.`\n      });\n    }\n    if (interrupt) return { interrupt };\n    if (response) {\n      const toolResponse = response;\n      const { interrupt: interrupt2, ...metadata } = part.metadata || {};\n      return (0, import_core.stripUndefinedProps)({\n        toolResponse,\n        toolRequest: {\n          ...part,\n          metadata: { ...metadata, resolvedInterrupt: interrupt2 }\n        }\n      });\n    }\n  }\n  throw new import_core.GenkitError({\n    status: \"INVALID_ARGUMENT\",\n    message: `Unresolved tool request '${part.toolRequest.name}${part.toolRequest.ref ? `#${part.toolRequest.ref}` : \"\"}' was not handled by the 'resume' argument. You must supply replies or restarts for all interrupted tool requests.'`\n  });\n}\nasync function resolveResumeOption(registry, rawRequest) {\n  if (!rawRequest.resume) return { revisedRequest: rawRequest };\n  const toolMap = toToolMap(await (0, import_tool.resolveTools)(registry, rawRequest.tools));\n  const messages = rawRequest.messages;\n  const lastMessage = messages.at(-1);\n  if (!lastMessage || lastMessage.role !== \"model\" || !lastMessage.content.find((p) => p.toolRequest)) {\n    throw new import_core.GenkitError({\n      status: \"FAILED_PRECONDITION\",\n      message: `Cannot 'resume' generation unless the previous message is a model message with at least one tool request.`\n    });\n  }\n  const toolResponses = [];\n  let interrupted = false;\n  lastMessage.content = await Promise.all(\n    lastMessage.content.map(async (part) => {\n      if (!(0, import_tool.isToolRequest)(part)) return part;\n      const resolved = await resolveResumedToolRequest(\n        rawRequest,\n        part,\n        toolMap\n      );\n      if (resolved.interrupt) {\n        interrupted = true;\n        return resolved.interrupt;\n      }\n      toolResponses.push(resolved.toolResponse);\n      return resolved.toolRequest;\n    })\n  );\n  if (interrupted) {\n    return {\n      interruptedResponse: {\n        finishReason: \"interrupted\",\n        finishMessage: \"One or more tools triggered interrupts while resuming generation. The model was not called.\",\n        message: lastMessage\n      }\n    };\n  }\n  const numToolRequests = lastMessage.content.filter(\n    (p) => !!p.toolRequest\n  ).length;\n  if (toolResponses.length !== numToolRequests) {\n    throw new import_core.GenkitError({\n      status: \"FAILED_PRECONDITION\",\n      message: `Expected ${numToolRequests} tool responses but resolved to ${toolResponses.length}.`,\n      detail: { toolResponses, message: lastMessage }\n    });\n  }\n  const toolMessage = {\n    role: \"tool\",\n    content: toolResponses,\n    metadata: {\n      resumed: rawRequest.resume.metadata || true\n    }\n  };\n  return (0, import_core.stripUndefinedProps)({\n    revisedRequest: {\n      ...rawRequest,\n      resume: void 0,\n      messages: [...messages, toolMessage]\n    },\n    toolMessage\n  });\n}\nasync function resolveRestartedTools(registry, rawRequest) {\n  const toolMap = toToolMap(await (0, import_tool.resolveTools)(registry, rawRequest.tools));\n  const lastMessage = rawRequest.messages.at(-1);\n  if (!lastMessage || lastMessage.role !== \"model\") return [];\n  const restarts = lastMessage.content.filter(\n    (p) => p.toolRequest && p.metadata?.resumed\n  );\n  return await Promise.all(\n    restarts.map(async (p) => {\n      const { response, interrupt } = await resolveToolRequest(\n        rawRequest,\n        p,\n        toolMap\n      );\n      if (interrupt) return interrupt;\n      return toPendingOutput(p, response);\n    })\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=resolve-tool-requests.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/resolve-tool-requests.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/response.js":
/*!*************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/generate/response.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar response_exports = {};\n__export(response_exports, {\n  GenerateResponse: () => GenerateResponse\n});\nmodule.exports = __toCommonJS(response_exports);\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_generate = __webpack_require__(/*! ../generate.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js\");\nvar import_message = __webpack_require__(/*! ../message.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js\");\nclass GenerateResponse {\n  /** The generated message. */\n  message;\n  /** The reason generation stopped for this request. */\n  finishReason;\n  /** Additional information about why the model stopped generating, if any. */\n  finishMessage;\n  /** Usage information. */\n  usage;\n  /** Provider-specific response data. */\n  custom;\n  /** Provider-specific response data. */\n  raw;\n  /** The request that generated this response. */\n  request;\n  /** Model generation long running operation. */\n  operation;\n  /** Name of the model used. */\n  model;\n  /** The parser for output parsing of this response. */\n  parser;\n  constructor(response, options) {\n    const generatedMessage = response.message || response.candidates?.[0]?.message;\n    if (generatedMessage) {\n      this.message = new import_message.Message(generatedMessage, {\n        parser: options?.parser\n      });\n    }\n    this.finishReason = response.finishReason || response.candidates?.[0]?.finishReason;\n    this.finishMessage = response.finishMessage || response.candidates?.[0]?.finishMessage;\n    this.usage = response.usage || {};\n    this.custom = response.custom || {};\n    this.raw = response.raw || this.custom;\n    this.request = options?.request;\n    this.operation = response?.operation;\n  }\n  /**\n   * Throws an error if the response does not contain valid output.\n   */\n  assertValid() {\n    if (this.finishReason === \"blocked\") {\n      throw new import_generate.GenerationBlockedError(\n        this,\n        `Generation blocked${this.finishMessage ? `: ${this.finishMessage}` : \".\"}`\n      );\n    }\n    if (!this.message && !this.operation) {\n      throw new import_generate.GenerationResponseError(\n        this,\n        `Model did not generate a message. Finish reason: '${this.finishReason}': ${this.finishMessage}`\n      );\n    }\n  }\n  /**\n   * Throws an error if the response does not conform to expected schema.\n   */\n  assertValidSchema(request) {\n    if (request?.output?.schema || this.request?.output?.schema) {\n      const o = this.output;\n      (0, import_schema.parseSchema)(o, {\n        jsonSchema: request?.output?.schema || this.request?.output?.schema\n      });\n    }\n  }\n  isValid(request) {\n    try {\n      this.assertValid();\n      this.assertValidSchema(request);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n  /**\n   * If the generated message contains a `data` part, it is returned. Otherwise,\n   * the `output()` method extracts the first valid JSON object or array from the text\n   * contained in the selected candidate's message and returns it.\n   *\n   * @returns The structured output contained in the selected candidate.\n   */\n  get output() {\n    return this.message?.output || null;\n  }\n  /**\n   * Concatenates all `text` parts present in the generated message with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  get text() {\n    return this.message?.text || \"\";\n  }\n  /**\n   * Concatenates all `reasoning` parts present in the generated message with no delimiter.\n   * @returns A string of all concatenated reasoning parts.\n   */\n  get reasoning() {\n    return this.message?.reasoning || \"\";\n  }\n  /**\n   * Returns the first detected media part in the generated message. Useful for\n   * extracting (for example) an image from a generation expected to create one.\n   * @returns The first detected `media` part in the candidate.\n   */\n  get media() {\n    return this.message?.media || null;\n  }\n  /**\n   * Returns the first detected `data` part of the generated message.\n   * @returns The first `data` part detected in the candidate (if any).\n   */\n  get data() {\n    return this.message?.data || null;\n  }\n  /**\n   * Returns all tool request found in the generated message.\n   * @returns Array of all tool request found in the candidate.\n   */\n  get toolRequests() {\n    return this.message?.toolRequests || [];\n  }\n  /**\n   * Returns all tool requests annotated as interrupts found in the generated message.\n   * @returns A list of ToolRequestParts.\n   */\n  get interrupts() {\n    return this.message?.interrupts || [];\n  }\n  /**\n   * Returns the message history for the request by concatenating the model\n   * response to the list of messages from the request. The result of this\n   * method can be safely serialized to JSON for persistence in a database.\n   * @returns A serializable list of messages compatible with `generate({history})`.\n   */\n  get messages() {\n    if (!this.request)\n      throw new Error(\n        \"Can't construct history for response without request reference.\"\n      );\n    if (!this.message)\n      throw new Error(\n        \"Can't construct history for response without generated message.\"\n      );\n    return [...this.request?.messages, this.message.toJSON()];\n  }\n  toJSON() {\n    const out = {\n      message: this.message?.toJSON(),\n      finishReason: this.finishReason,\n      finishMessage: this.finishMessage,\n      usage: this.usage,\n      custom: this.custom.toJSON?.() || this.custom,\n      request: this.request,\n      operation: this.operation\n    };\n    if (!out.finishMessage) delete out.finishMessage;\n    if (!out.request) delete out.request;\n    if (!out.operation) delete out.operation;\n    return out;\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=response.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9nZW5lcmF0ZS9yZXNwb25zZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG9CQUFvQixtQkFBTyxDQUFDLDZGQUF3QjtBQUNwRCxzQkFBc0IsbUJBQU8sQ0FBQyxxRkFBZ0I7QUFDOUMscUJBQXFCLG1CQUFPLENBQUMsbUZBQWU7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QiwwQkFBMEIsbUJBQW1CLFFBQVE7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxrQkFBa0IsS0FBSyxtQkFBbUI7QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsUUFBUTtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUVMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWpzLWFwcC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9nZW5lcmF0ZS9yZXNwb25zZS5qcz84ZmY5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciByZXNwb25zZV9leHBvcnRzID0ge307XG5fX2V4cG9ydChyZXNwb25zZV9leHBvcnRzLCB7XG4gIEdlbmVyYXRlUmVzcG9uc2U6ICgpID0+IEdlbmVyYXRlUmVzcG9uc2Vcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMocmVzcG9uc2VfZXhwb3J0cyk7XG52YXIgaW1wb3J0X3NjaGVtYSA9IHJlcXVpcmUoXCJAZ2Vua2l0LWFpL2NvcmUvc2NoZW1hXCIpO1xudmFyIGltcG9ydF9nZW5lcmF0ZSA9IHJlcXVpcmUoXCIuLi9nZW5lcmF0ZS5qc1wiKTtcbnZhciBpbXBvcnRfbWVzc2FnZSA9IHJlcXVpcmUoXCIuLi9tZXNzYWdlLmpzXCIpO1xuY2xhc3MgR2VuZXJhdGVSZXNwb25zZSB7XG4gIC8qKiBUaGUgZ2VuZXJhdGVkIG1lc3NhZ2UuICovXG4gIG1lc3NhZ2U7XG4gIC8qKiBUaGUgcmVhc29uIGdlbmVyYXRpb24gc3RvcHBlZCBmb3IgdGhpcyByZXF1ZXN0LiAqL1xuICBmaW5pc2hSZWFzb247XG4gIC8qKiBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHdoeSB0aGUgbW9kZWwgc3RvcHBlZCBnZW5lcmF0aW5nLCBpZiBhbnkuICovXG4gIGZpbmlzaE1lc3NhZ2U7XG4gIC8qKiBVc2FnZSBpbmZvcm1hdGlvbi4gKi9cbiAgdXNhZ2U7XG4gIC8qKiBQcm92aWRlci1zcGVjaWZpYyByZXNwb25zZSBkYXRhLiAqL1xuICBjdXN0b207XG4gIC8qKiBQcm92aWRlci1zcGVjaWZpYyByZXNwb25zZSBkYXRhLiAqL1xuICByYXc7XG4gIC8qKiBUaGUgcmVxdWVzdCB0aGF0IGdlbmVyYXRlZCB0aGlzIHJlc3BvbnNlLiAqL1xuICByZXF1ZXN0O1xuICAvKiogTW9kZWwgZ2VuZXJhdGlvbiBsb25nIHJ1bm5pbmcgb3BlcmF0aW9uLiAqL1xuICBvcGVyYXRpb247XG4gIC8qKiBOYW1lIG9mIHRoZSBtb2RlbCB1c2VkLiAqL1xuICBtb2RlbDtcbiAgLyoqIFRoZSBwYXJzZXIgZm9yIG91dHB1dCBwYXJzaW5nIG9mIHRoaXMgcmVzcG9uc2UuICovXG4gIHBhcnNlcjtcbiAgY29uc3RydWN0b3IocmVzcG9uc2UsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBnZW5lcmF0ZWRNZXNzYWdlID0gcmVzcG9uc2UubWVzc2FnZSB8fCByZXNwb25zZS5jYW5kaWRhdGVzPy5bMF0/Lm1lc3NhZ2U7XG4gICAgaWYgKGdlbmVyYXRlZE1lc3NhZ2UpIHtcbiAgICAgIHRoaXMubWVzc2FnZSA9IG5ldyBpbXBvcnRfbWVzc2FnZS5NZXNzYWdlKGdlbmVyYXRlZE1lc3NhZ2UsIHtcbiAgICAgICAgcGFyc2VyOiBvcHRpb25zPy5wYXJzZXJcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLmZpbmlzaFJlYXNvbiA9IHJlc3BvbnNlLmZpbmlzaFJlYXNvbiB8fCByZXNwb25zZS5jYW5kaWRhdGVzPy5bMF0/LmZpbmlzaFJlYXNvbjtcbiAgICB0aGlzLmZpbmlzaE1lc3NhZ2UgPSByZXNwb25zZS5maW5pc2hNZXNzYWdlIHx8IHJlc3BvbnNlLmNhbmRpZGF0ZXM/LlswXT8uZmluaXNoTWVzc2FnZTtcbiAgICB0aGlzLnVzYWdlID0gcmVzcG9uc2UudXNhZ2UgfHwge307XG4gICAgdGhpcy5jdXN0b20gPSByZXNwb25zZS5jdXN0b20gfHwge307XG4gICAgdGhpcy5yYXcgPSByZXNwb25zZS5yYXcgfHwgdGhpcy5jdXN0b207XG4gICAgdGhpcy5yZXF1ZXN0ID0gb3B0aW9ucz8ucmVxdWVzdDtcbiAgICB0aGlzLm9wZXJhdGlvbiA9IHJlc3BvbnNlPy5vcGVyYXRpb247XG4gIH1cbiAgLyoqXG4gICAqIFRocm93cyBhbiBlcnJvciBpZiB0aGUgcmVzcG9uc2UgZG9lcyBub3QgY29udGFpbiB2YWxpZCBvdXRwdXQuXG4gICAqL1xuICBhc3NlcnRWYWxpZCgpIHtcbiAgICBpZiAodGhpcy5maW5pc2hSZWFzb24gPT09IFwiYmxvY2tlZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgaW1wb3J0X2dlbmVyYXRlLkdlbmVyYXRpb25CbG9ja2VkRXJyb3IoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIGBHZW5lcmF0aW9uIGJsb2NrZWQke3RoaXMuZmluaXNoTWVzc2FnZSA/IGA6ICR7dGhpcy5maW5pc2hNZXNzYWdlfWAgOiBcIi5cIn1gXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIXRoaXMubWVzc2FnZSAmJiAhdGhpcy5vcGVyYXRpb24pIHtcbiAgICAgIHRocm93IG5ldyBpbXBvcnRfZ2VuZXJhdGUuR2VuZXJhdGlvblJlc3BvbnNlRXJyb3IoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIGBNb2RlbCBkaWQgbm90IGdlbmVyYXRlIGEgbWVzc2FnZS4gRmluaXNoIHJlYXNvbjogJyR7dGhpcy5maW5pc2hSZWFzb259JzogJHt0aGlzLmZpbmlzaE1lc3NhZ2V9YFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFRocm93cyBhbiBlcnJvciBpZiB0aGUgcmVzcG9uc2UgZG9lcyBub3QgY29uZm9ybSB0byBleHBlY3RlZCBzY2hlbWEuXG4gICAqL1xuICBhc3NlcnRWYWxpZFNjaGVtYShyZXF1ZXN0KSB7XG4gICAgaWYgKHJlcXVlc3Q/Lm91dHB1dD8uc2NoZW1hIHx8IHRoaXMucmVxdWVzdD8ub3V0cHV0Py5zY2hlbWEpIHtcbiAgICAgIGNvbnN0IG8gPSB0aGlzLm91dHB1dDtcbiAgICAgICgwLCBpbXBvcnRfc2NoZW1hLnBhcnNlU2NoZW1hKShvLCB7XG4gICAgICAgIGpzb25TY2hlbWE6IHJlcXVlc3Q/Lm91dHB1dD8uc2NoZW1hIHx8IHRoaXMucmVxdWVzdD8ub3V0cHV0Py5zY2hlbWFcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBpc1ZhbGlkKHJlcXVlc3QpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5hc3NlcnRWYWxpZCgpO1xuICAgICAgdGhpcy5hc3NlcnRWYWxpZFNjaGVtYShyZXF1ZXN0KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIElmIHRoZSBnZW5lcmF0ZWQgbWVzc2FnZSBjb250YWlucyBhIGBkYXRhYCBwYXJ0LCBpdCBpcyByZXR1cm5lZC4gT3RoZXJ3aXNlLFxuICAgKiB0aGUgYG91dHB1dCgpYCBtZXRob2QgZXh0cmFjdHMgdGhlIGZpcnN0IHZhbGlkIEpTT04gb2JqZWN0IG9yIGFycmF5IGZyb20gdGhlIHRleHRcbiAgICogY29udGFpbmVkIGluIHRoZSBzZWxlY3RlZCBjYW5kaWRhdGUncyBtZXNzYWdlIGFuZCByZXR1cm5zIGl0LlxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgc3RydWN0dXJlZCBvdXRwdXQgY29udGFpbmVkIGluIHRoZSBzZWxlY3RlZCBjYW5kaWRhdGUuXG4gICAqL1xuICBnZXQgb3V0cHV0KCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2U/Lm91dHB1dCB8fCBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBDb25jYXRlbmF0ZXMgYWxsIGB0ZXh0YCBwYXJ0cyBwcmVzZW50IGluIHRoZSBnZW5lcmF0ZWQgbWVzc2FnZSB3aXRoIG5vIGRlbGltaXRlci5cbiAgICogQHJldHVybnMgQSBzdHJpbmcgb2YgYWxsIGNvbmNhdGVuYXRlZCB0ZXh0IHBhcnRzLlxuICAgKi9cbiAgZ2V0IHRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZT8udGV4dCB8fCBcIlwiO1xuICB9XG4gIC8qKlxuICAgKiBDb25jYXRlbmF0ZXMgYWxsIGByZWFzb25pbmdgIHBhcnRzIHByZXNlbnQgaW4gdGhlIGdlbmVyYXRlZCBtZXNzYWdlIHdpdGggbm8gZGVsaW1pdGVyLlxuICAgKiBAcmV0dXJucyBBIHN0cmluZyBvZiBhbGwgY29uY2F0ZW5hdGVkIHJlYXNvbmluZyBwYXJ0cy5cbiAgICovXG4gIGdldCByZWFzb25pbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZT8ucmVhc29uaW5nIHx8IFwiXCI7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZpcnN0IGRldGVjdGVkIG1lZGlhIHBhcnQgaW4gdGhlIGdlbmVyYXRlZCBtZXNzYWdlLiBVc2VmdWwgZm9yXG4gICAqIGV4dHJhY3RpbmcgKGZvciBleGFtcGxlKSBhbiBpbWFnZSBmcm9tIGEgZ2VuZXJhdGlvbiBleHBlY3RlZCB0byBjcmVhdGUgb25lLlxuICAgKiBAcmV0dXJucyBUaGUgZmlyc3QgZGV0ZWN0ZWQgYG1lZGlhYCBwYXJ0IGluIHRoZSBjYW5kaWRhdGUuXG4gICAqL1xuICBnZXQgbWVkaWEoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZT8ubWVkaWEgfHwgbnVsbDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmlyc3QgZGV0ZWN0ZWQgYGRhdGFgIHBhcnQgb2YgdGhlIGdlbmVyYXRlZCBtZXNzYWdlLlxuICAgKiBAcmV0dXJucyBUaGUgZmlyc3QgYGRhdGFgIHBhcnQgZGV0ZWN0ZWQgaW4gdGhlIGNhbmRpZGF0ZSAoaWYgYW55KS5cbiAgICovXG4gIGdldCBkYXRhKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2U/LmRhdGEgfHwgbnVsbDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbGwgdG9vbCByZXF1ZXN0IGZvdW5kIGluIHRoZSBnZW5lcmF0ZWQgbWVzc2FnZS5cbiAgICogQHJldHVybnMgQXJyYXkgb2YgYWxsIHRvb2wgcmVxdWVzdCBmb3VuZCBpbiB0aGUgY2FuZGlkYXRlLlxuICAgKi9cbiAgZ2V0IHRvb2xSZXF1ZXN0cygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlPy50b29sUmVxdWVzdHMgfHwgW107XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIHRvb2wgcmVxdWVzdHMgYW5ub3RhdGVkIGFzIGludGVycnVwdHMgZm91bmQgaW4gdGhlIGdlbmVyYXRlZCBtZXNzYWdlLlxuICAgKiBAcmV0dXJucyBBIGxpc3Qgb2YgVG9vbFJlcXVlc3RQYXJ0cy5cbiAgICovXG4gIGdldCBpbnRlcnJ1cHRzKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2U/LmludGVycnVwdHMgfHwgW107XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG1lc3NhZ2UgaGlzdG9yeSBmb3IgdGhlIHJlcXVlc3QgYnkgY29uY2F0ZW5hdGluZyB0aGUgbW9kZWxcbiAgICogcmVzcG9uc2UgdG8gdGhlIGxpc3Qgb2YgbWVzc2FnZXMgZnJvbSB0aGUgcmVxdWVzdC4gVGhlIHJlc3VsdCBvZiB0aGlzXG4gICAqIG1ldGhvZCBjYW4gYmUgc2FmZWx5IHNlcmlhbGl6ZWQgdG8gSlNPTiBmb3IgcGVyc2lzdGVuY2UgaW4gYSBkYXRhYmFzZS5cbiAgICogQHJldHVybnMgQSBzZXJpYWxpemFibGUgbGlzdCBvZiBtZXNzYWdlcyBjb21wYXRpYmxlIHdpdGggYGdlbmVyYXRlKHtoaXN0b3J5fSlgLlxuICAgKi9cbiAgZ2V0IG1lc3NhZ2VzKCkge1xuICAgIGlmICghdGhpcy5yZXF1ZXN0KVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIkNhbid0IGNvbnN0cnVjdCBoaXN0b3J5IGZvciByZXNwb25zZSB3aXRob3V0IHJlcXVlc3QgcmVmZXJlbmNlLlwiXG4gICAgICApO1xuICAgIGlmICghdGhpcy5tZXNzYWdlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIkNhbid0IGNvbnN0cnVjdCBoaXN0b3J5IGZvciByZXNwb25zZSB3aXRob3V0IGdlbmVyYXRlZCBtZXNzYWdlLlwiXG4gICAgICApO1xuICAgIHJldHVybiBbLi4udGhpcy5yZXF1ZXN0Py5tZXNzYWdlcywgdGhpcy5tZXNzYWdlLnRvSlNPTigpXTtcbiAgfVxuICB0b0pTT04oKSB7XG4gICAgY29uc3Qgb3V0ID0ge1xuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlPy50b0pTT04oKSxcbiAgICAgIGZpbmlzaFJlYXNvbjogdGhpcy5maW5pc2hSZWFzb24sXG4gICAgICBmaW5pc2hNZXNzYWdlOiB0aGlzLmZpbmlzaE1lc3NhZ2UsXG4gICAgICB1c2FnZTogdGhpcy51c2FnZSxcbiAgICAgIGN1c3RvbTogdGhpcy5jdXN0b20udG9KU09OPy4oKSB8fCB0aGlzLmN1c3RvbSxcbiAgICAgIHJlcXVlc3Q6IHRoaXMucmVxdWVzdCxcbiAgICAgIG9wZXJhdGlvbjogdGhpcy5vcGVyYXRpb25cbiAgICB9O1xuICAgIGlmICghb3V0LmZpbmlzaE1lc3NhZ2UpIGRlbGV0ZSBvdXQuZmluaXNoTWVzc2FnZTtcbiAgICBpZiAoIW91dC5yZXF1ZXN0KSBkZWxldGUgb3V0LnJlcXVlc3Q7XG4gICAgaWYgKCFvdXQub3BlcmF0aW9uKSBkZWxldGUgb3V0Lm9wZXJhdGlvbjtcbiAgICByZXR1cm4gb3V0O1xuICB9XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgR2VuZXJhdGVSZXNwb25zZVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNwb25zZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/response.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar index_exports = {};\n__export(index_exports, {\n  BaseDataPointSchema: () => import_evaluator.BaseDataPointSchema,\n  Document: () => import_document.Document,\n  DocumentDataSchema: () => import_document.DocumentDataSchema,\n  EvalStatusEnum: () => import_evaluator.EvalStatusEnum,\n  GenerateResponse: () => import_generate.GenerateResponse,\n  GenerateResponseChunk: () => import_generate.GenerateResponseChunk,\n  GenerateResponseChunkSchema: () => import_model.GenerateResponseChunkSchema,\n  GenerationBlockedError: () => import_generate.GenerationBlockedError,\n  GenerationCommonConfigSchema: () => import_model.GenerationCommonConfigSchema,\n  GenerationResponseError: () => import_generate.GenerationResponseError,\n  Message: () => import_message.Message,\n  MessageSchema: () => import_model.MessageSchema,\n  ModelRequestSchema: () => import_model.ModelRequestSchema,\n  ModelResponseSchema: () => import_model.ModelResponseSchema,\n  PartSchema: () => import_model.PartSchema,\n  ResourceInputSchema: () => import_resource.ResourceInputSchema,\n  ResourceOutputSchema: () => import_resource.ResourceOutputSchema,\n  RoleSchema: () => import_model.RoleSchema,\n  ToolInterruptError: () => import_tool.ToolInterruptError,\n  asTool: () => import_tool.asTool,\n  checkOperation: () => import_check_operation.checkOperation,\n  defineHelper: () => import_prompt.defineHelper,\n  defineInterrupt: () => import_tool.defineInterrupt,\n  definePartial: () => import_prompt.definePartial,\n  definePrompt: () => import_prompt.definePrompt,\n  defineResource: () => import_resource.defineResource,\n  defineTool: () => import_tool.defineTool,\n  dynamicResource: () => import_resource.dynamicResource,\n  embed: () => import_embedder.embed,\n  embedderActionMetadata: () => import_embedder.embedderActionMetadata,\n  embedderRef: () => import_embedder.embedderRef,\n  evaluate: () => import_evaluator.evaluate,\n  evaluatorRef: () => import_evaluator.evaluatorRef,\n  generate: () => import_generate.generate,\n  generateOperation: () => import_generate.generateOperation,\n  generateStream: () => import_generate.generateStream,\n  index: () => import_retriever.index,\n  indexerRef: () => import_retriever.indexerRef,\n  interrupt: () => import_tool.interrupt,\n  isDynamicResourceAction: () => import_resource.isDynamicResourceAction,\n  isExecutablePrompt: () => import_prompt.isExecutablePrompt,\n  loadPromptFolder: () => import_prompt.loadPromptFolder,\n  modelActionMetadata: () => import_model.modelActionMetadata,\n  modelRef: () => import_model.modelRef,\n  prompt: () => import_prompt.prompt,\n  rerank: () => import_reranker.rerank,\n  rerankerRef: () => import_reranker.rerankerRef,\n  resource: () => import_resource.resource,\n  retrieve: () => import_retriever.retrieve,\n  retrieverRef: () => import_retriever.retrieverRef,\n  tagAsPreamble: () => import_generate.tagAsPreamble,\n  toGenerateRequest: () => import_generate.toGenerateRequest\n});\nmodule.exports = __toCommonJS(index_exports);\nvar import_check_operation = __webpack_require__(/*! ./check-operation.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/check-operation.js\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_embedder = __webpack_require__(/*! ./embedder.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/embedder.js\");\nvar import_evaluator = __webpack_require__(/*! ./evaluator.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/evaluator.js\");\nvar import_generate = __webpack_require__(/*! ./generate.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js\");\nvar import_message = __webpack_require__(/*! ./message.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js\");\nvar import_model = __webpack_require__(/*! ./model.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\");\nvar import_prompt = __webpack_require__(/*! ./prompt.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js\");\nvar import_reranker = __webpack_require__(/*! ./reranker.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/reranker.js\");\nvar import_resource = __webpack_require__(/*! ./resource.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/resource.js\");\nvar import_retriever = __webpack_require__(/*! ./retriever.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/retriever.js\");\nvar import_tool = __webpack_require__(/*! ./tool.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\");\n__reExport(index_exports, __webpack_require__(/*! ./types.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/types.js\"), module.exports);\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/message.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar message_exports = {};\n__export(message_exports, {\n  Message: () => Message\n});\nmodule.exports = __toCommonJS(message_exports);\nvar import_extract = __webpack_require__(/*! ./extract */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\");\nclass Message {\n  role;\n  content;\n  metadata;\n  parser;\n  static parseData(lenientMessage, defaultRole = \"user\") {\n    if (typeof lenientMessage === \"string\") {\n      return { role: defaultRole, content: [{ text: lenientMessage }] };\n    }\n    return {\n      ...lenientMessage,\n      content: Message.parseContent(lenientMessage.content)\n    };\n  }\n  static parse(lenientMessage) {\n    return new Message(Message.parseData(lenientMessage));\n  }\n  static parseContent(lenientPart) {\n    if (typeof lenientPart === \"string\") {\n      return [{ text: lenientPart }];\n    } else if (Array.isArray(lenientPart)) {\n      return lenientPart.map((p) => typeof p === \"string\" ? { text: p } : p);\n    } else {\n      return [lenientPart];\n    }\n  }\n  constructor(message, options) {\n    this.role = message.role;\n    this.content = message.content;\n    this.metadata = message.metadata;\n    this.parser = options?.parser;\n  }\n  /**\n   * Attempts to parse the content of the message according to the supplied\n   * output parser. Without a parser, returns `data` contained in the message or\n   * tries to parse JSON from the text of the message.\n   *\n   * @returns The structured output contained in the message.\n   */\n  get output() {\n    return this.parser?.(this) || this.data || (0, import_extract.extractJson)(this.text);\n  }\n  toolResponseParts() {\n    const res = this.content.filter((part) => !!part.toolResponse);\n    return res;\n  }\n  /**\n   * Concatenates all `text` parts present in the message with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  get text() {\n    return this.content.map((part) => part.text || \"\").join(\"\");\n  }\n  /**\n   * Concatenates all `reasoning` parts present in the message with no delimiter.\n   * @returns A string of all concatenated reasoning parts.\n   */\n  get reasoning() {\n    return this.content.map((part) => part.reasoning || \"\").join(\"\");\n  }\n  /**\n   * Returns the first media part detected in the message. Useful for extracting\n   * (for example) an image from a generation expected to create one.\n   * @returns The first detected `media` part in the message.\n   */\n  get media() {\n    return this.content.find((part) => part.media)?.media || null;\n  }\n  /**\n   * Returns the first detected `data` part of a message.\n   * @returns The first `data` part detected in the message (if any).\n   */\n  get data() {\n    return this.content.find((part) => part.data)?.data;\n  }\n  /**\n   * Returns all tool request found in this message.\n   * @returns Array of all tool request found in this message.\n   */\n  get toolRequests() {\n    return this.content.filter(\n      (part) => !!part.toolRequest\n    );\n  }\n  /**\n   * Returns all tool requests annotated with interrupt metadata.\n   * @returns Array of all interrupt tool requests.\n   */\n  get interrupts() {\n    return this.toolRequests.filter((t) => !!t.metadata?.interrupt);\n  }\n  /**\n   * Converts the Message to a plain JS object.\n   * @returns Plain JS object representing the data contained in the message.\n   */\n  toJSON() {\n    const out = {\n      role: this.role,\n      content: [...this.content]\n    };\n    if (this.metadata) out.metadata = this.metadata;\n    return out;\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=message.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9tZXNzYWdlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsK0VBQVc7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtCQUErQixzQkFBc0I7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixtQkFBbUI7QUFDbkMsTUFBTTtBQUNOLDhEQUE4RCxVQUFVO0FBQ3hFLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FFTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1qcy1hcHAvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9saWIvbWVzc2FnZS5qcz9lMjBjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBtZXNzYWdlX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KG1lc3NhZ2VfZXhwb3J0cywge1xuICBNZXNzYWdlOiAoKSA9PiBNZXNzYWdlXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKG1lc3NhZ2VfZXhwb3J0cyk7XG52YXIgaW1wb3J0X2V4dHJhY3QgPSByZXF1aXJlKFwiLi9leHRyYWN0XCIpO1xuY2xhc3MgTWVzc2FnZSB7XG4gIHJvbGU7XG4gIGNvbnRlbnQ7XG4gIG1ldGFkYXRhO1xuICBwYXJzZXI7XG4gIHN0YXRpYyBwYXJzZURhdGEobGVuaWVudE1lc3NhZ2UsIGRlZmF1bHRSb2xlID0gXCJ1c2VyXCIpIHtcbiAgICBpZiAodHlwZW9mIGxlbmllbnRNZXNzYWdlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4geyByb2xlOiBkZWZhdWx0Um9sZSwgY29udGVudDogW3sgdGV4dDogbGVuaWVudE1lc3NhZ2UgfV0gfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmxlbmllbnRNZXNzYWdlLFxuICAgICAgY29udGVudDogTWVzc2FnZS5wYXJzZUNvbnRlbnQobGVuaWVudE1lc3NhZ2UuY29udGVudClcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBwYXJzZShsZW5pZW50TWVzc2FnZSkge1xuICAgIHJldHVybiBuZXcgTWVzc2FnZShNZXNzYWdlLnBhcnNlRGF0YShsZW5pZW50TWVzc2FnZSkpO1xuICB9XG4gIHN0YXRpYyBwYXJzZUNvbnRlbnQobGVuaWVudFBhcnQpIHtcbiAgICBpZiAodHlwZW9mIGxlbmllbnRQYXJ0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gW3sgdGV4dDogbGVuaWVudFBhcnQgfV07XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGxlbmllbnRQYXJ0KSkge1xuICAgICAgcmV0dXJuIGxlbmllbnRQYXJ0Lm1hcCgocCkgPT4gdHlwZW9mIHAgPT09IFwic3RyaW5nXCIgPyB7IHRleHQ6IHAgfSA6IHApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW2xlbmllbnRQYXJ0XTtcbiAgICB9XG4gIH1cbiAgY29uc3RydWN0b3IobWVzc2FnZSwgb3B0aW9ucykge1xuICAgIHRoaXMucm9sZSA9IG1lc3NhZ2Uucm9sZTtcbiAgICB0aGlzLmNvbnRlbnQgPSBtZXNzYWdlLmNvbnRlbnQ7XG4gICAgdGhpcy5tZXRhZGF0YSA9IG1lc3NhZ2UubWV0YWRhdGE7XG4gICAgdGhpcy5wYXJzZXIgPSBvcHRpb25zPy5wYXJzZXI7XG4gIH1cbiAgLyoqXG4gICAqIEF0dGVtcHRzIHRvIHBhcnNlIHRoZSBjb250ZW50IG9mIHRoZSBtZXNzYWdlIGFjY29yZGluZyB0byB0aGUgc3VwcGxpZWRcbiAgICogb3V0cHV0IHBhcnNlci4gV2l0aG91dCBhIHBhcnNlciwgcmV0dXJucyBgZGF0YWAgY29udGFpbmVkIGluIHRoZSBtZXNzYWdlIG9yXG4gICAqIHRyaWVzIHRvIHBhcnNlIEpTT04gZnJvbSB0aGUgdGV4dCBvZiB0aGUgbWVzc2FnZS5cbiAgICpcbiAgICogQHJldHVybnMgVGhlIHN0cnVjdHVyZWQgb3V0cHV0IGNvbnRhaW5lZCBpbiB0aGUgbWVzc2FnZS5cbiAgICovXG4gIGdldCBvdXRwdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyc2VyPy4odGhpcykgfHwgdGhpcy5kYXRhIHx8ICgwLCBpbXBvcnRfZXh0cmFjdC5leHRyYWN0SnNvbikodGhpcy50ZXh0KTtcbiAgfVxuICB0b29sUmVzcG9uc2VQYXJ0cygpIHtcbiAgICBjb25zdCByZXMgPSB0aGlzLmNvbnRlbnQuZmlsdGVyKChwYXJ0KSA9PiAhIXBhcnQudG9vbFJlc3BvbnNlKTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIC8qKlxuICAgKiBDb25jYXRlbmF0ZXMgYWxsIGB0ZXh0YCBwYXJ0cyBwcmVzZW50IGluIHRoZSBtZXNzYWdlIHdpdGggbm8gZGVsaW1pdGVyLlxuICAgKiBAcmV0dXJucyBBIHN0cmluZyBvZiBhbGwgY29uY2F0ZW5hdGVkIHRleHQgcGFydHMuXG4gICAqL1xuICBnZXQgdGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50Lm1hcCgocGFydCkgPT4gcGFydC50ZXh0IHx8IFwiXCIpLmpvaW4oXCJcIik7XG4gIH1cbiAgLyoqXG4gICAqIENvbmNhdGVuYXRlcyBhbGwgYHJlYXNvbmluZ2AgcGFydHMgcHJlc2VudCBpbiB0aGUgbWVzc2FnZSB3aXRoIG5vIGRlbGltaXRlci5cbiAgICogQHJldHVybnMgQSBzdHJpbmcgb2YgYWxsIGNvbmNhdGVuYXRlZCByZWFzb25pbmcgcGFydHMuXG4gICAqL1xuICBnZXQgcmVhc29uaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnQubWFwKChwYXJ0KSA9PiBwYXJ0LnJlYXNvbmluZyB8fCBcIlwiKS5qb2luKFwiXCIpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBmaXJzdCBtZWRpYSBwYXJ0IGRldGVjdGVkIGluIHRoZSBtZXNzYWdlLiBVc2VmdWwgZm9yIGV4dHJhY3RpbmdcbiAgICogKGZvciBleGFtcGxlKSBhbiBpbWFnZSBmcm9tIGEgZ2VuZXJhdGlvbiBleHBlY3RlZCB0byBjcmVhdGUgb25lLlxuICAgKiBAcmV0dXJucyBUaGUgZmlyc3QgZGV0ZWN0ZWQgYG1lZGlhYCBwYXJ0IGluIHRoZSBtZXNzYWdlLlxuICAgKi9cbiAgZ2V0IG1lZGlhKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnQuZmluZCgocGFydCkgPT4gcGFydC5tZWRpYSk/Lm1lZGlhIHx8IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZpcnN0IGRldGVjdGVkIGBkYXRhYCBwYXJ0IG9mIGEgbWVzc2FnZS5cbiAgICogQHJldHVybnMgVGhlIGZpcnN0IGBkYXRhYCBwYXJ0IGRldGVjdGVkIGluIHRoZSBtZXNzYWdlIChpZiBhbnkpLlxuICAgKi9cbiAgZ2V0IGRhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudC5maW5kKChwYXJ0KSA9PiBwYXJ0LmRhdGEpPy5kYXRhO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFsbCB0b29sIHJlcXVlc3QgZm91bmQgaW4gdGhpcyBtZXNzYWdlLlxuICAgKiBAcmV0dXJucyBBcnJheSBvZiBhbGwgdG9vbCByZXF1ZXN0IGZvdW5kIGluIHRoaXMgbWVzc2FnZS5cbiAgICovXG4gIGdldCB0b29sUmVxdWVzdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudC5maWx0ZXIoXG4gICAgICAocGFydCkgPT4gISFwYXJ0LnRvb2xSZXF1ZXN0XG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbGwgdG9vbCByZXF1ZXN0cyBhbm5vdGF0ZWQgd2l0aCBpbnRlcnJ1cHQgbWV0YWRhdGEuXG4gICAqIEByZXR1cm5zIEFycmF5IG9mIGFsbCBpbnRlcnJ1cHQgdG9vbCByZXF1ZXN0cy5cbiAgICovXG4gIGdldCBpbnRlcnJ1cHRzKCkge1xuICAgIHJldHVybiB0aGlzLnRvb2xSZXF1ZXN0cy5maWx0ZXIoKHQpID0+ICEhdC5tZXRhZGF0YT8uaW50ZXJydXB0KTtcbiAgfVxuICAvKipcbiAgICogQ29udmVydHMgdGhlIE1lc3NhZ2UgdG8gYSBwbGFpbiBKUyBvYmplY3QuXG4gICAqIEByZXR1cm5zIFBsYWluIEpTIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGRhdGEgY29udGFpbmVkIGluIHRoZSBtZXNzYWdlLlxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIGNvbnN0IG91dCA9IHtcbiAgICAgIHJvbGU6IHRoaXMucm9sZSxcbiAgICAgIGNvbnRlbnQ6IFsuLi50aGlzLmNvbnRlbnRdXG4gICAgfTtcbiAgICBpZiAodGhpcy5tZXRhZGF0YSkgb3V0Lm1ldGFkYXRhID0gdGhpcy5tZXRhZGF0YTtcbiAgICByZXR1cm4gb3V0O1xuICB9XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgTWVzc2FnZVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXNzYWdlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/model-types.js":
/*!*******************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/model-types.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar model_types_exports = {};\n__export(model_types_exports, {\n  CandidateErrorSchema: () => CandidateErrorSchema,\n  CandidateSchema: () => CandidateSchema,\n  FinishReasonSchema: () => FinishReasonSchema,\n  GenerateActionOptionsSchema: () => GenerateActionOptionsSchema,\n  GenerateActionOutputConfig: () => GenerateActionOutputConfig,\n  GenerateRequestSchema: () => GenerateRequestSchema,\n  GenerateResponseChunkSchema: () => GenerateResponseChunkSchema,\n  GenerateResponseSchema: () => GenerateResponseSchema,\n  GenerationCommonConfigDescriptions: () => GenerationCommonConfigDescriptions,\n  GenerationCommonConfigSchema: () => GenerationCommonConfigSchema,\n  GenerationUsageSchema: () => GenerationUsageSchema,\n  MessageSchema: () => MessageSchema,\n  ModelInfoSchema: () => ModelInfoSchema,\n  ModelRequestSchema: () => ModelRequestSchema,\n  ModelResponseChunkSchema: () => ModelResponseChunkSchema,\n  ModelResponseSchema: () => ModelResponseSchema,\n  OutputConfigSchema: () => OutputConfigSchema,\n  PartSchema: () => PartSchema,\n  RoleSchema: () => RoleSchema,\n  ToolDefinitionSchema: () => ToolDefinitionSchema\n});\nmodule.exports = __toCommonJS(model_types_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nconst PartSchema = import_core.z.union([\n  import_document.TextPartSchema,\n  import_document.MediaPartSchema,\n  import_document.ToolRequestPartSchema,\n  import_document.ToolResponsePartSchema,\n  import_document.DataPartSchema,\n  import_document.CustomPartSchema,\n  import_document.ReasoningPartSchema,\n  import_document.ResourcePartSchema\n]);\nconst RoleSchema = import_core.z.enum([\"system\", \"user\", \"model\", \"tool\"]);\nconst MessageSchema = import_core.z.object({\n  role: RoleSchema,\n  content: import_core.z.array(PartSchema),\n  metadata: import_core.z.record(import_core.z.unknown()).optional()\n});\nconst ModelInfoSchema = import_core.z.object({\n  /** Acceptable names for this model (e.g. different versions). */\n  versions: import_core.z.array(import_core.z.string()).optional(),\n  /** Friendly label for this model (e.g. \"Google AI - Gemini Pro\") */\n  label: import_core.z.string().optional(),\n  /** Model Specific configuration. */\n  configSchema: import_core.z.record(import_core.z.any()).optional(),\n  /** Supported model capabilities. */\n  supports: import_core.z.object({\n    /** Model can process historical messages passed with a prompt. */\n    multiturn: import_core.z.boolean().optional(),\n    /** Model can process media as part of the prompt (multimodal input). */\n    media: import_core.z.boolean().optional(),\n    /** Model can perform tool calls. */\n    tools: import_core.z.boolean().optional(),\n    /** Model can accept messages with role \"system\". */\n    systemRole: import_core.z.boolean().optional(),\n    /** Model can output this type of data. */\n    output: import_core.z.array(import_core.z.string()).optional(),\n    /** Model supports output in these content types. */\n    contentType: import_core.z.array(import_core.z.string()).optional(),\n    /** Model can natively support document-based context grounding. */\n    context: import_core.z.boolean().optional(),\n    /** Model can natively support constrained generation. */\n    constrained: import_core.z.enum([\"none\", \"all\", \"no-tools\"]).optional(),\n    /** Model supports controlling tool choice, e.g. forced tool calling. */\n    toolChoice: import_core.z.boolean().optional()\n  }).optional(),\n  /** At which stage of development this model is.\n   * - `featured` models are recommended for general use.\n   * - `stable` models are well-tested and reliable.\n   * - `unstable` models are experimental and may change.\n   * - `legacy` models are no longer recommended for new projects.\n   * - `deprecated` models are deprecated by the provider and may be removed in future versions.\n   */\n  stage: import_core.z.enum([\"featured\", \"stable\", \"unstable\", \"legacy\", \"deprecated\"]).optional()\n});\nconst ToolDefinitionSchema = import_core.z.object({\n  name: import_core.z.string(),\n  description: import_core.z.string(),\n  inputSchema: import_core.z.record(import_core.z.any()).describe(\"Valid JSON Schema representing the input of the tool.\").nullish(),\n  outputSchema: import_core.z.record(import_core.z.any()).describe(\"Valid JSON Schema describing the output of the tool.\").nullish(),\n  metadata: import_core.z.record(import_core.z.any()).describe(\"additional metadata for this tool definition\").optional()\n});\nconst GenerationCommonConfigDescriptions = {\n  temperature: \"Controls the degree of randomness in token selection. A lower value is good for a more predictable response. A higher value leads to more diverse or unexpected results.\",\n  maxOutputTokens: \"The maximum number of tokens to include in the response.\",\n  topK: \"The maximum number of tokens to consider when sampling.\",\n  topP: \"Decides how many possible words to consider. A higher value means that the model looks at more possible words, even the less likely ones, which makes the generated text more diverse.\"\n};\nconst GenerationCommonConfigSchema = import_core.z.object({\n  version: import_core.z.string().describe(\n    \"A specific version of a model family, e.g. `gemini-2.0-flash` for the `googleai` family.\"\n  ).optional(),\n  temperature: import_core.z.number().describe(GenerationCommonConfigDescriptions.temperature).optional(),\n  maxOutputTokens: import_core.z.number().describe(GenerationCommonConfigDescriptions.maxOutputTokens).optional(),\n  topK: import_core.z.number().describe(GenerationCommonConfigDescriptions.topK).optional(),\n  topP: import_core.z.number().describe(GenerationCommonConfigDescriptions.topP).optional(),\n  stopSequences: import_core.z.array(import_core.z.string()).max(5).describe(\n    \"Set of character sequences (up to 5) that will stop output generation.\"\n  ).optional()\n}).passthrough();\nconst OutputConfigSchema = import_core.z.object({\n  format: import_core.z.string().optional(),\n  schema: import_core.z.record(import_core.z.any()).optional(),\n  constrained: import_core.z.boolean().optional(),\n  contentType: import_core.z.string().optional()\n});\nconst ModelRequestSchema = import_core.z.object({\n  messages: import_core.z.array(MessageSchema),\n  config: import_core.z.any().optional(),\n  tools: import_core.z.array(ToolDefinitionSchema).optional(),\n  toolChoice: import_core.z.enum([\"auto\", \"required\", \"none\"]).optional(),\n  output: OutputConfigSchema.optional(),\n  docs: import_core.z.array(import_document.DocumentDataSchema).optional()\n});\nconst GenerateRequestSchema = ModelRequestSchema.extend({\n  /** @deprecated All responses now return a single candidate. This will always be `undefined`. */\n  candidates: import_core.z.number().optional()\n});\nconst GenerationUsageSchema = import_core.z.object({\n  inputTokens: import_core.z.number().optional(),\n  outputTokens: import_core.z.number().optional(),\n  totalTokens: import_core.z.number().optional(),\n  inputCharacters: import_core.z.number().optional(),\n  outputCharacters: import_core.z.number().optional(),\n  inputImages: import_core.z.number().optional(),\n  outputImages: import_core.z.number().optional(),\n  inputVideos: import_core.z.number().optional(),\n  outputVideos: import_core.z.number().optional(),\n  inputAudioFiles: import_core.z.number().optional(),\n  outputAudioFiles: import_core.z.number().optional(),\n  custom: import_core.z.record(import_core.z.number()).optional(),\n  thoughtsTokens: import_core.z.number().optional(),\n  cachedContentTokens: import_core.z.number().optional()\n});\nconst FinishReasonSchema = import_core.z.enum([\n  \"stop\",\n  \"length\",\n  \"blocked\",\n  \"interrupted\",\n  \"other\",\n  \"unknown\"\n]);\nconst CandidateSchema = import_core.z.object({\n  index: import_core.z.number(),\n  message: MessageSchema,\n  usage: GenerationUsageSchema.optional(),\n  finishReason: FinishReasonSchema,\n  finishMessage: import_core.z.string().optional(),\n  custom: import_core.z.unknown()\n});\nconst CandidateErrorSchema = import_core.z.object({\n  index: import_core.z.number(),\n  code: import_core.z.enum([\"blocked\", \"other\", \"unknown\"]),\n  message: import_core.z.string().optional()\n});\nconst ModelResponseSchema = import_core.z.object({\n  message: MessageSchema.optional(),\n  finishReason: FinishReasonSchema,\n  finishMessage: import_core.z.string().optional(),\n  latencyMs: import_core.z.number().optional(),\n  usage: GenerationUsageSchema.optional(),\n  /** @deprecated use `raw` instead */\n  custom: import_core.z.unknown(),\n  raw: import_core.z.unknown(),\n  request: GenerateRequestSchema.optional(),\n  operation: import_core.OperationSchema.optional()\n});\nconst GenerateResponseSchema = ModelResponseSchema.extend({\n  /** @deprecated All responses now return a single candidate. Only the first candidate will be used if supplied. Return `message`, `finishReason`, and `finishMessage` instead. */\n  candidates: import_core.z.array(CandidateSchema).optional(),\n  finishReason: FinishReasonSchema.optional()\n});\nconst ModelResponseChunkSchema = import_core.z.object({\n  role: RoleSchema.optional(),\n  /** index of the message this chunk belongs to. */\n  index: import_core.z.number().optional(),\n  /** The chunk of content to stream right now. */\n  content: import_core.z.array(PartSchema),\n  /** Model-specific extra information attached to this chunk. */\n  custom: import_core.z.unknown().optional(),\n  /** If true, the chunk includes all data from previous chunks. Otherwise, considered to be incremental. */\n  aggregated: import_core.z.boolean().optional()\n});\nconst GenerateResponseChunkSchema = ModelResponseChunkSchema;\nconst GenerateActionOutputConfig = import_core.z.object({\n  format: import_core.z.string().optional(),\n  contentType: import_core.z.string().optional(),\n  instructions: import_core.z.union([import_core.z.boolean(), import_core.z.string()]).optional(),\n  jsonSchema: import_core.z.any().optional(),\n  constrained: import_core.z.boolean().optional()\n});\nconst GenerateActionOptionsSchema = import_core.z.object({\n  /** A model name (e.g. `vertexai/gemini-1.0-pro`). */\n  model: import_core.z.string(),\n  /** Retrieved documents to be used as context for this generation. */\n  docs: import_core.z.array(import_document.DocumentDataSchema).optional(),\n  /** Conversation history for multi-turn prompting when supported by the underlying model. */\n  messages: import_core.z.array(MessageSchema),\n  /** List of registered tool names for this generation if supported by the underlying model. */\n  tools: import_core.z.array(import_core.z.string()).optional(),\n  /** Tool calling mode. `auto` lets the model decide whether to use tools, `required` forces the model to choose a tool, and `none` forces the model not to use any tools. Defaults to `auto`.  */\n  toolChoice: import_core.z.enum([\"auto\", \"required\", \"none\"]).optional(),\n  /** Configuration for the generation request. */\n  config: import_core.z.any().optional(),\n  /** Configuration for the desired output of the request. Defaults to the model's default output if unspecified. */\n  output: GenerateActionOutputConfig.optional(),\n  /** Options for resuming an interrupted generation. */\n  resume: import_core.z.object({\n    respond: import_core.z.array(import_document.ToolResponsePartSchema).optional(),\n    restart: import_core.z.array(import_document.ToolRequestPartSchema).optional(),\n    metadata: import_core.z.record(import_core.z.any()).optional()\n  }).optional(),\n  /** When true, return tool calls for manual processing instead of automatically resolving them. */\n  returnToolRequests: import_core.z.boolean().optional(),\n  /** Maximum number of tool call iterations that can be performed in a single generate call (default 5). */\n  maxTurns: import_core.z.number().optional(),\n  /** Custom step name for this generate call to display in trace views. Defaults to \"generate\". */\n  stepName: import_core.z.string().optional()\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=model-types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/model-types.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js":
/*!*************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/model.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar model_exports = {};\n__export(model_exports, {\n  CustomPartSchema: () => import_document.CustomPartSchema,\n  DataPartSchema: () => import_document.DataPartSchema,\n  MediaPartSchema: () => import_document.MediaPartSchema,\n  TextPartSchema: () => import_document.TextPartSchema,\n  ToolRequestPartSchema: () => import_document.ToolRequestPartSchema,\n  ToolResponsePartSchema: () => import_document.ToolResponsePartSchema,\n  backgroundModel: () => backgroundModel,\n  defineBackgroundModel: () => defineBackgroundModel,\n  defineGenerateAction: () => import_action.defineGenerateAction,\n  defineModel: () => defineModel,\n  getBasicUsageStats: () => getBasicUsageStats,\n  model: () => model,\n  modelActionMetadata: () => modelActionMetadata,\n  modelRef: () => modelRef,\n  resolveModel: () => resolveModel,\n  simulateConstrainedGeneration: () => import_middleware.simulateConstrainedGeneration\n});\nmodule.exports = __toCommonJS(model_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_node_perf_hooks = __webpack_require__(/*! node:perf_hooks */ \"node:perf_hooks\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_model_types = __webpack_require__(/*! ./model-types.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model-types.js\");\nvar import_middleware = __webpack_require__(/*! ./model/middleware.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model/middleware.js\");\nvar import_action = __webpack_require__(/*! ./generate/action.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/action.js\");\n__reExport(model_exports, __webpack_require__(/*! ./model-types.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model-types.js\"), module.exports);\nfunction model(options, runner) {\n  const act = (0, import_core.action)(modelActionOptions(options), (input, ctx) => {\n    const startTimeMs = import_node_perf_hooks.performance.now();\n    return runner(input, ctx).then((response) => {\n      const timedResponse = {\n        ...response,\n        latencyMs: import_node_perf_hooks.performance.now() - startTimeMs\n      };\n      return timedResponse;\n    });\n  });\n  Object.assign(act, {\n    __configSchema: options.configSchema || import_core.z.unknown()\n  });\n  return act;\n}\nfunction modelActionOptions(options) {\n  const label = options.label || options.name;\n  const middleware = getModelMiddleware(options);\n  return {\n    actionType: \"model\",\n    name: options.name,\n    description: label,\n    inputSchema: import_model_types.GenerateRequestSchema,\n    outputSchema: import_model_types.GenerateResponseSchema,\n    metadata: {\n      model: {\n        label,\n        customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0,\n        versions: options.versions,\n        supports: options.supports\n      }\n    },\n    use: middleware\n  };\n}\nfunction defineModel(registry, options, runner) {\n  const act = (0, import_core.defineAction)(\n    registry,\n    modelActionOptions(options),\n    (input, ctx) => {\n      const startTimeMs = import_node_perf_hooks.performance.now();\n      const secondParam = options.apiVersion === \"v2\" ? ctx : ctx.streamingRequested ? ctx.sendChunk : void 0;\n      return runner(input, secondParam).then((response) => {\n        const timedResponse = {\n          ...response,\n          latencyMs: import_node_perf_hooks.performance.now() - startTimeMs\n        };\n        return timedResponse;\n      });\n    }\n  );\n  Object.assign(act, {\n    __configSchema: options.configSchema || import_core.z.unknown()\n  });\n  return act;\n}\nfunction defineBackgroundModel(registry, options) {\n  const act = backgroundModel(options);\n  (0, import_core.registerBackgroundAction)(registry, act);\n  return act;\n}\nfunction backgroundModel(options) {\n  const label = options.label || options.name;\n  const middleware = getModelMiddleware(options);\n  const act = (0, import_core.backgroundAction)({\n    actionType: \"background-model\",\n    name: options.name,\n    description: label,\n    inputSchema: import_model_types.GenerateRequestSchema,\n    outputSchema: import_model_types.GenerateResponseSchema,\n    metadata: {\n      model: {\n        label,\n        customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0,\n        versions: options.versions,\n        supports: options.supports\n      }\n    },\n    use: middleware,\n    async start(request) {\n      const startTimeMs = import_node_perf_hooks.performance.now();\n      const response = await options.start(request);\n      Object.assign(response, {\n        latencyMs: import_node_perf_hooks.performance.now() - startTimeMs\n      });\n      return response;\n    },\n    async check(op) {\n      return options.check(op);\n    },\n    cancel: options.cancel ? async (op) => {\n      if (!options.cancel) {\n        throw new import_core.GenkitError({\n          status: \"UNIMPLEMENTED\",\n          message: \"cancel not implemented\"\n        });\n      }\n      return options.cancel(op);\n    } : void 0\n  });\n  Object.assign(act, {\n    __configSchema: options.configSchema || import_core.z.unknown()\n  });\n  return act;\n}\nfunction getModelMiddleware(options) {\n  const middleware = options.use || [];\n  if (!options?.supports?.context) middleware.push((0, import_middleware.augmentWithContext)());\n  const constratedSimulator = (0, import_middleware.simulateConstrainedGeneration)();\n  middleware.push((req, next) => {\n    if (!options?.supports?.constrained || options?.supports?.constrained === \"none\" || options?.supports?.constrained === \"no-tools\" && (req.tools?.length ?? 0) > 0) {\n      return constratedSimulator(req, next);\n    }\n    return next(req);\n  });\n  return middleware;\n}\nfunction modelActionMetadata({\n  name,\n  info,\n  configSchema,\n  background\n}) {\n  return {\n    actionType: background ? \"background-model\" : \"model\",\n    name,\n    inputJsonSchema: (0, import_schema.toJsonSchema)({ schema: import_model_types.GenerateRequestSchema }),\n    outputJsonSchema: background ? (0, import_schema.toJsonSchema)({ schema: import_core.OperationSchema }) : (0, import_schema.toJsonSchema)({ schema: import_model_types.GenerateResponseSchema }),\n    metadata: {\n      model: {\n        ...info,\n        customOptions: configSchema ? (0, import_schema.toJsonSchema)({ schema: configSchema }) : void 0\n      }\n    }\n  };\n}\nfunction modelRef(options) {\n  let name = options.name;\n  if (options.namespace && !name.startsWith(options.namespace + \"/\")) {\n    name = `${options.namespace}/${name}`;\n  }\n  const ref = {\n    ...options,\n    name\n  };\n  ref.withConfig = (cfg) => {\n    return modelRef({\n      ...options,\n      name,\n      config: cfg\n    });\n  };\n  ref.withVersion = (version) => {\n    return modelRef({\n      ...options,\n      name,\n      version\n    });\n  };\n  return ref;\n}\nfunction getBasicUsageStats(input, response) {\n  const inputCounts = getPartCounts(input.flatMap((md) => md.content));\n  const outputCounts = getPartCounts(\n    Array.isArray(response) ? response.flatMap((c) => c.message.content) : response.content\n  );\n  return {\n    inputCharacters: inputCounts.characters,\n    inputImages: inputCounts.images,\n    inputVideos: inputCounts.videos,\n    inputAudioFiles: inputCounts.audio,\n    outputCharacters: outputCounts.characters,\n    outputImages: outputCounts.images,\n    outputVideos: outputCounts.videos,\n    outputAudioFiles: outputCounts.audio\n  };\n}\nfunction getPartCounts(parts) {\n  return parts.reduce(\n    (counts, part) => {\n      const isImage = part.media?.contentType?.startsWith(\"image\") || part.media?.url?.startsWith(\"data:image\");\n      const isVideo = part.media?.contentType?.startsWith(\"video\") || part.media?.url?.startsWith(\"data:video\");\n      const isAudio = part.media?.contentType?.startsWith(\"audio\") || part.media?.url?.startsWith(\"data:audio\");\n      return {\n        characters: counts.characters + (part.text?.length || 0),\n        images: counts.images + (isImage ? 1 : 0),\n        videos: counts.videos + (isVideo ? 1 : 0),\n        audio: counts.audio + (isAudio ? 1 : 0)\n      };\n    },\n    { characters: 0, images: 0, videos: 0, audio: 0 }\n  );\n}\nasync function resolveModel(registry, model2, options) {\n  let out;\n  let modelId;\n  if (!model2) {\n    model2 = await registry.lookupValue(\"defaultModel\", \"defaultModel\");\n  }\n  if (!model2) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: \"Must supply a `model` to `generate()` calls.\"\n    });\n  }\n  if (typeof model2 === \"string\") {\n    modelId = model2;\n    out = { modelAction: await lookupModel(registry, model2) };\n  } else if (model2.hasOwnProperty(\"__action\")) {\n    modelId = model2.__action.name;\n    out = { modelAction: model2 };\n  } else {\n    const ref = model2;\n    modelId = ref.name;\n    out = {\n      modelAction: await lookupModel(registry, ref.name),\n      config: {\n        ...ref.config\n      },\n      version: ref.version\n    };\n  }\n  if (!out.modelAction) {\n    throw new import_core.GenkitError({\n      status: \"NOT_FOUND\",\n      message: `Model '${modelId}' not found`\n    });\n  }\n  if (options?.warnDeprecated && out.modelAction.__action.metadata?.model?.stage === \"deprecated\") {\n    import_logging.logger.warn(\n      `Model '${out.modelAction.__action.name}' is deprecated and may be removed in a future release.`\n    );\n  }\n  return out;\n}\nasync function lookupModel(registry, model2) {\n  return await registry.lookupAction(`/model/${model2}`) || await registry.lookupAction(`/background-model/${model2}`);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=model.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/model/middleware.js":
/*!************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/model/middleware.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar middleware_exports = {};\n__export(middleware_exports, {\n  CONTEXT_PREFACE: () => CONTEXT_PREFACE,\n  augmentWithContext: () => augmentWithContext,\n  downloadRequestMedia: () => downloadRequestMedia,\n  simulateConstrainedGeneration: () => simulateConstrainedGeneration,\n  simulateSystemPrompt: () => simulateSystemPrompt,\n  validateSupport: () => validateSupport\n});\nmodule.exports = __toCommonJS(middleware_exports);\nvar import_document = __webpack_require__(/*! ../document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_formats = __webpack_require__(/*! ../formats/index.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/index.js\");\nfunction downloadRequestMedia(options) {\n  return async (req, next) => {\n    const { default: fetch } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/fetch-blob\"), __webpack_require__.e(\"vendor-chunks/formdata-polyfill\"), __webpack_require__.e(\"vendor-chunks/data-uri-to-buffer\"), __webpack_require__.e(\"vendor-chunks/web-streams-polyfill\"), __webpack_require__.e(\"vendor-chunks/node-domexception\")]).then(__webpack_require__.bind(__webpack_require__, /*! node-fetch */ \"(action-browser)/./node_modules/node-fetch/src/index.js\"));\n    const newReq = {\n      ...req,\n      messages: await Promise.all(\n        req.messages.map(async (message) => {\n          const content = await Promise.all(\n            message.content.map(async (part) => {\n              if (!part.media || !part.media.url.startsWith(\"http\") || options?.filter && !options?.filter(part)) {\n                return part;\n              }\n              const response = await fetch(part.media.url, {\n                size: options?.maxBytes\n              });\n              if (response.status !== 200)\n                throw new Error(\n                  `HTTP error downloading media '${part.media.url}': ${await response.text()}`\n                );\n              const contentType = part.media.contentType || response.headers.get(\"content-type\") || \"\";\n              return {\n                media: {\n                  contentType,\n                  url: `data:${contentType};base64,${Buffer.from(\n                    await response.arrayBuffer()\n                  ).toString(\"base64\")}`\n                }\n              };\n            })\n          );\n          return {\n            ...message,\n            content\n          };\n        })\n      )\n    };\n    return next(newReq);\n  };\n}\nfunction validateSupport(options) {\n  const supports = options.supports || {};\n  return async (req, next) => {\n    function invalid(message) {\n      throw new Error(\n        `Model '${options.name}' does not support ${message}. Request: ${JSON.stringify(\n          req,\n          null,\n          2\n        )}`\n      );\n    }\n    if (supports.media === false && req.messages.some((message) => message.content.some((part) => part.media)))\n      invalid(\"media, but media was provided\");\n    if (supports.tools === false && req.tools?.length)\n      invalid(\"tool use, but tools were provided\");\n    if (supports.multiturn === false && req.messages.length > 1)\n      invalid(`multiple messages, but ${req.messages.length} were provided`);\n    return next();\n  };\n}\nfunction lastUserMessage(messages) {\n  for (let i = messages.length - 1; i >= 0; i--) {\n    if (messages[i].role === \"user\") {\n      return messages[i];\n    }\n  }\n  return void 0;\n}\nfunction simulateSystemPrompt(options) {\n  const preface = options?.preface || \"SYSTEM INSTRUCTIONS:\\n\";\n  const acknowledgement = options?.acknowledgement || \"Understood.\";\n  return (req, next) => {\n    const messages = [...req.messages];\n    for (let i = 0; i < messages.length; i++) {\n      if (req.messages[i].role === \"system\") {\n        const systemPrompt = messages[i].content;\n        messages.splice(\n          i,\n          1,\n          { role: \"user\", content: [{ text: preface }, ...systemPrompt] },\n          { role: \"model\", content: [{ text: acknowledgement }] }\n        );\n        break;\n      }\n    }\n    return next({ ...req, messages });\n  };\n}\nconst CONTEXT_PREFACE = \"\\n\\nUse the following information to complete your task:\\n\\n\";\nconst CONTEXT_ITEM_TEMPLATE = (d, index, options) => {\n  let out = \"- \";\n  if (options?.citationKey) {\n    out += `[${d.metadata[options.citationKey]}]: `;\n  } else if (options?.citationKey === void 0) {\n    out += `[${d.metadata?.[\"ref\"] || d.metadata?.[\"id\"] || index}]: `;\n  }\n  out += d.text + \"\\n\";\n  return out;\n};\nfunction augmentWithContext(options) {\n  const preface = typeof options?.preface === \"undefined\" ? CONTEXT_PREFACE : options.preface;\n  const itemTemplate = options?.itemTemplate || CONTEXT_ITEM_TEMPLATE;\n  return (req, next) => {\n    if (!req.docs?.length) return next(req);\n    const userMessage = lastUserMessage(req.messages);\n    if (!userMessage) return next(req);\n    const contextPartIndex = userMessage?.content.findIndex(\n      (p) => p.metadata?.purpose === \"context\"\n    );\n    const contextPart = contextPartIndex >= 0 && userMessage.content[contextPartIndex];\n    if (contextPart && !contextPart.metadata?.pending) {\n      return next(req);\n    }\n    let out = `${preface || \"\"}`;\n    req.docs?.forEach((d, i) => {\n      out += itemTemplate(new import_document.Document(d), i, options);\n    });\n    out += \"\\n\";\n    if (contextPartIndex >= 0) {\n      userMessage.content[contextPartIndex] = {\n        ...contextPart,\n        text: out,\n        metadata: { purpose: \"context\" }\n      };\n    } else {\n      userMessage.content.push({ text: out, metadata: { purpose: \"context\" } });\n    }\n    return next(req);\n  };\n}\nconst DEFAULT_CONSTRAINED_GENERATION_INSTRUCTIONS = (schema) => `Output should be in JSON format and conform to the following schema:\n\n\\`\\`\\`\n${JSON.stringify(schema)}\n\\`\\`\\`\n`;\nfunction simulateConstrainedGeneration(options) {\n  return (req, next) => {\n    let instructions;\n    if (req.output?.constrained && req.output?.schema) {\n      instructions = (options?.instructionsRenderer ?? DEFAULT_CONSTRAINED_GENERATION_INSTRUCTIONS)(req.output?.schema);\n      req = {\n        ...req,\n        messages: (0, import_formats.injectInstructions)(req.messages, instructions),\n        output: {\n          ...req.output,\n          // we're simulating it, so to the underlying model it's unconstrained.\n          constrained: false,\n          format: void 0,\n          contentType: void 0,\n          schema: void 0\n        }\n      };\n    }\n    return next(req);\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=middleware.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/model/middleware.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js":
/*!**************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/prompt.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar prompt_exports = {};\n__export(prompt_exports, {\n  defineHelper: () => defineHelper,\n  definePartial: () => definePartial,\n  definePrompt: () => definePrompt,\n  isExecutablePrompt: () => isExecutablePrompt,\n  isPromptAction: () => isPromptAction,\n  loadPromptFolder: () => loadPromptFolder,\n  loadPromptFolderRecursively: () => loadPromptFolderRecursively,\n  prompt: () => prompt\n});\nmodule.exports = __toCommonJS(prompt_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_async = __webpack_require__(/*! @genkit-ai/core/async */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_fs = __webpack_require__(/*! fs */ \"fs\");\nvar import_path = __webpack_require__(/*! path */ \"path\");\nvar import_generate = __webpack_require__(/*! ./generate.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js\");\nvar import_message = __webpack_require__(/*! ./message.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js\");\nvar import_model = __webpack_require__(/*! ./model.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\");\nvar import_session = __webpack_require__(/*! ./session.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/session.js\");\nfunction isPromptAction(action) {\n  return action.__action.metadata?.type === \"prompt\";\n}\nfunction definePrompt(registry, options) {\n  return definePromptAsync(\n    registry,\n    `${options.name}${options.variant ? `.${options.variant}` : \"\"}`,\n    Promise.resolve(options),\n    options.metadata\n  );\n}\nfunction definePromptAsync(registry, name, optionsPromise, metadata) {\n  const promptCache = {};\n  const renderOptionsFn = async (input, renderOptions) => {\n    return await (0, import_tracing.runInNewSpan)(\n      {\n        metadata: {\n          name: \"render\",\n          input\n        },\n        labels: {\n          [import_tracing.SPAN_TYPE_ATTR]: \"promptTemplate\"\n        }\n      },\n      async (metadata2) => {\n        const messages = [];\n        renderOptions = { ...renderOptions };\n        const session = (0, import_session.getCurrentSession)(registry);\n        const resolvedOptions = await optionsPromise;\n        await renderSystemPrompt(\n          registry,\n          session,\n          input,\n          messages,\n          resolvedOptions,\n          promptCache,\n          renderOptions\n        );\n        await renderMessages(\n          registry,\n          session,\n          input,\n          messages,\n          resolvedOptions,\n          renderOptions,\n          promptCache\n        );\n        await renderUserPrompt(\n          registry,\n          session,\n          input,\n          messages,\n          resolvedOptions,\n          promptCache,\n          renderOptions\n        );\n        let docs;\n        if (typeof resolvedOptions.docs === \"function\") {\n          docs = await resolvedOptions.docs(input, {\n            state: session?.state,\n            context: renderOptions?.context || (0, import_core.getContext)() || {}\n          });\n        } else {\n          docs = resolvedOptions.docs;\n        }\n        const opts = (0, import_core.stripUndefinedProps)({\n          model: resolvedOptions.model,\n          maxTurns: resolvedOptions.maxTurns,\n          messages,\n          docs,\n          tools: resolvedOptions.tools,\n          returnToolRequests: resolvedOptions.returnToolRequests,\n          toolChoice: resolvedOptions.toolChoice,\n          context: resolvedOptions.context,\n          output: resolvedOptions.output,\n          use: resolvedOptions.use,\n          ...(0, import_core.stripUndefinedProps)(renderOptions),\n          config: {\n            ...resolvedOptions?.config,\n            ...renderOptions?.config\n          },\n          metadata: resolvedOptions.metadata?.metadata ? {\n            prompt: resolvedOptions.metadata?.metadata\n          } : void 0\n        });\n        if (renderOptions?.abortSignal) {\n          opts.abortSignal = renderOptions.abortSignal;\n        }\n        if (Object.keys(opts.config).length === 0 && !renderOptions?.config) {\n          delete opts.config;\n        }\n        metadata2.output = opts;\n        return opts;\n      }\n    );\n  };\n  const rendererActionConfig = (0, import_async.lazy)(\n    () => optionsPromise.then((options) => {\n      const metadata2 = promptMetadata(options);\n      return {\n        name: `${options.name}${options.variant ? `.${options.variant}` : \"\"}`,\n        inputJsonSchema: options.input?.jsonSchema,\n        inputSchema: options.input?.schema,\n        description: options.description,\n        actionType: \"prompt\",\n        metadata: metadata2,\n        fn: async (input) => {\n          return (0, import_generate.toGenerateRequest)(\n            registry,\n            await renderOptionsFn(input, void 0)\n          );\n        }\n      };\n    })\n  );\n  const rendererAction = (0, import_core.defineActionAsync)(\n    registry,\n    \"prompt\",\n    name,\n    rendererActionConfig,\n    (action) => {\n      action.__executablePrompt = executablePrompt;\n    }\n  );\n  const executablePromptActionConfig = (0, import_async.lazy)(\n    () => optionsPromise.then((options) => {\n      const metadata2 = promptMetadata(options);\n      return {\n        name: `${options.name}${options.variant ? `.${options.variant}` : \"\"}`,\n        inputJsonSchema: options.input?.jsonSchema,\n        inputSchema: options.input?.schema,\n        outputSchema: import_model.GenerateActionOptionsSchema,\n        description: options.description,\n        actionType: \"executable-prompt\",\n        metadata: metadata2,\n        fn: async (input) => {\n          return await (0, import_generate.toGenerateActionOptions)(\n            registry,\n            await renderOptionsFn(input, void 0)\n          );\n        }\n      };\n    })\n  );\n  (0, import_core.defineActionAsync)(\n    registry,\n    \"executable-prompt\",\n    name,\n    executablePromptActionConfig,\n    (action) => {\n      action.__executablePrompt = executablePrompt;\n    }\n  );\n  const executablePrompt = wrapInExecutablePrompt({\n    registry,\n    name,\n    renderOptionsFn,\n    rendererAction,\n    metadata\n  });\n  return executablePrompt;\n}\nfunction promptMetadata(options) {\n  const metadata = {\n    ...options.metadata,\n    prompt: {\n      ...options.metadata?.prompt,\n      config: options.config,\n      input: {\n        schema: options.input ? (0, import_schema.toJsonSchema)(options.input) : void 0\n      },\n      name: options.name.includes(\".\") ? options.name.split(\".\")[0] : options.name,\n      model: modelName(options.model)\n    },\n    type: \"prompt\"\n  };\n  if (options.variant) {\n    metadata.prompt.variant = options.variant;\n  }\n  return metadata;\n}\nfunction wrapInExecutablePrompt(wrapOpts) {\n  const executablePrompt = async (input, opts) => {\n    return await (0, import_tracing.runInNewSpan)(\n      wrapOpts.registry,\n      {\n        metadata: {\n          name: (await wrapOpts.rendererAction).__action.name,\n          input\n        },\n        labels: {\n          [import_tracing.SPAN_TYPE_ATTR]: \"dotprompt\"\n        }\n      },\n      async (metadata) => {\n        const output = await (0, import_generate.generate)(wrapOpts.registry, {\n          ...await wrapOpts.renderOptionsFn(input, opts)\n        });\n        metadata.output = output;\n        return output;\n      }\n    );\n  };\n  executablePrompt.ref = { name: wrapOpts.name, metadata: wrapOpts.metadata };\n  executablePrompt.render = async (input, opts) => {\n    return {\n      ...await wrapOpts.renderOptionsFn(input, opts)\n    };\n  };\n  executablePrompt.stream = (input, opts) => {\n    return (0, import_generate.generateStream)(\n      wrapOpts.registry,\n      wrapOpts.renderOptionsFn(input, opts)\n    );\n  };\n  executablePrompt.asTool = async () => {\n    return await wrapOpts.rendererAction;\n  };\n  return executablePrompt;\n}\nasync function renderSystemPrompt(registry, session, input, messages, options, promptCache, renderOptions) {\n  if (typeof options.system === \"function\") {\n    messages.push({\n      role: \"system\",\n      content: normalizeParts(\n        await options.system(input, {\n          state: session?.state,\n          context: renderOptions?.context || (0, import_core.getContext)() || {}\n        })\n      )\n    });\n  } else if (typeof options.system === \"string\") {\n    if (!promptCache.system) {\n      promptCache.system = await registry.dotprompt.compile(options.system);\n    }\n    messages.push({\n      role: \"system\",\n      content: await renderDotpromptToParts(\n        registry,\n        promptCache.system,\n        input,\n        session,\n        options,\n        renderOptions\n      )\n    });\n  } else if (options.system) {\n    messages.push({\n      role: \"system\",\n      content: normalizeParts(options.system)\n    });\n  }\n}\nasync function renderMessages(registry, session, input, messages, options, renderOptions, promptCache) {\n  if (options.messages) {\n    if (typeof options.messages === \"function\") {\n      messages.push(\n        ...await options.messages(input, {\n          state: session?.state,\n          context: renderOptions?.context || (0, import_core.getContext)() || {},\n          history: renderOptions?.messages\n        })\n      );\n    } else if (typeof options.messages === \"string\") {\n      if (!promptCache.messages) {\n        promptCache.messages = await registry.dotprompt.compile(\n          options.messages\n        );\n      }\n      const rendered = await promptCache.messages({\n        input,\n        context: {\n          ...renderOptions?.context || (0, import_core.getContext)(),\n          state: session?.state\n        },\n        messages: renderOptions?.messages?.map(\n          (m) => import_message.Message.parseData(m)\n        )\n      });\n      messages.push(...rendered.messages);\n    } else {\n      messages.push(...options.messages);\n    }\n  } else {\n    if (renderOptions.messages) {\n      messages.push(...renderOptions.messages);\n    }\n  }\n  if (renderOptions?.messages) {\n    delete renderOptions.messages;\n  }\n}\nasync function renderUserPrompt(registry, session, input, messages, options, promptCache, renderOptions) {\n  if (typeof options.prompt === \"function\") {\n    messages.push({\n      role: \"user\",\n      content: normalizeParts(\n        await options.prompt(input, {\n          state: session?.state,\n          context: renderOptions?.context || (0, import_core.getContext)() || {}\n        })\n      )\n    });\n  } else if (typeof options.prompt === \"string\") {\n    if (!promptCache.userPrompt) {\n      promptCache.userPrompt = await registry.dotprompt.compile(options.prompt);\n    }\n    messages.push({\n      role: \"user\",\n      content: await renderDotpromptToParts(\n        registry,\n        promptCache.userPrompt,\n        input,\n        session,\n        options,\n        renderOptions\n      )\n    });\n  } else if (options.prompt) {\n    messages.push({\n      role: \"user\",\n      content: normalizeParts(options.prompt)\n    });\n  }\n}\nfunction modelName(modelArg) {\n  if (modelArg === void 0) {\n    return void 0;\n  }\n  if (typeof modelArg === \"string\") {\n    return modelArg;\n  }\n  if (modelArg.name) {\n    return modelArg.name;\n  }\n  return modelArg.__action.name;\n}\nfunction normalizeParts(parts) {\n  if (Array.isArray(parts)) return parts;\n  if (typeof parts === \"string\") {\n    return [\n      {\n        text: parts\n      }\n    ];\n  }\n  return [parts];\n}\nasync function renderDotpromptToParts(registry, promptFn, input, session, options, renderOptions) {\n  const renderred = await promptFn({\n    input,\n    context: {\n      ...renderOptions?.context || (0, import_core.getContext)(),\n      state: session?.state\n    }\n  });\n  if (renderred.messages.length !== 1) {\n    throw new Error(\"parts tempate must produce only one message\");\n  }\n  return renderred.messages[0].content;\n}\nfunction isExecutablePrompt(obj) {\n  return !!obj?.render && !!obj?.asTool && !!obj?.stream;\n}\nfunction loadPromptFolder(registry, dir = \"./prompts\", ns) {\n  const promptsPath = (0, import_path.resolve)(dir);\n  if ((0, import_fs.existsSync)(promptsPath)) {\n    loadPromptFolderRecursively(registry, dir, ns, \"\");\n  }\n}\nfunction loadPromptFolderRecursively(registry, dir, ns, subDir) {\n  const promptsPath = (0, import_path.resolve)(dir);\n  const dirEnts = (0, import_fs.readdirSync)((0, import_path.join)(promptsPath, subDir), {\n    withFileTypes: true\n  });\n  for (const dirEnt of dirEnts) {\n    const parentPath = (0, import_path.join)(promptsPath, subDir);\n    const fileName = dirEnt.name;\n    if (dirEnt.isFile() && fileName.endsWith(\".prompt\")) {\n      if (fileName.startsWith(\"_\")) {\n        const partialName = fileName.substring(1, fileName.length - 7);\n        definePartial(\n          registry,\n          partialName,\n          (0, import_fs.readFileSync)((0, import_path.join)(parentPath, fileName), {\n            encoding: \"utf8\"\n          })\n        );\n        import_logging.logger.debug(\n          `Registered Dotprompt partial \"${partialName}\" from \"${(0, import_path.join)(parentPath, fileName)}\"`\n        );\n      } else {\n        loadPrompt(\n          registry,\n          promptsPath,\n          fileName,\n          subDir ? `${subDir}/` : \"\",\n          ns\n        );\n      }\n    } else if (dirEnt.isDirectory()) {\n      loadPromptFolderRecursively(registry, dir, ns, (0, import_path.join)(subDir, fileName));\n    }\n  }\n}\nfunction definePartial(registry, name, source) {\n  registry.dotprompt.definePartial(name, source);\n}\nfunction defineHelper(registry, name, fn) {\n  registry.dotprompt.defineHelper(name, fn);\n}\nfunction loadPrompt(registry, path, filename, prefix = \"\", ns = \"dotprompt\") {\n  let name = `${prefix ?? \"\"}${(0, import_path.basename)(filename, \".prompt\")}`;\n  let variant = null;\n  if (name.includes(\".\")) {\n    const parts = name.split(\".\");\n    name = parts[0];\n    variant = parts[1];\n  }\n  const source = (0, import_fs.readFileSync)((0, import_path.join)(path, prefix ?? \"\", filename), \"utf8\");\n  const parsedPrompt = registry.dotprompt.parse(source);\n  definePromptAsync(\n    registry,\n    registryDefinitionKey(name, variant ?? void 0, ns),\n    // We use a lazy promise here because we only want prompt loaded when it's first used.\n    // This is important because otherwise the loading may happen before the user has configured\n    // all the schemas, etc., which will result in dotprompt.renderMetadata errors.\n    (0, import_async.lazy)(async () => {\n      const promptMetadata2 = await registry.dotprompt.renderMetadata(parsedPrompt);\n      if (variant) {\n        promptMetadata2.variant = variant;\n      }\n      if (promptMetadata2.output?.schema?.description === null) {\n        delete promptMetadata2.output.schema.description;\n      }\n      if (promptMetadata2.input?.schema?.description === null) {\n        delete promptMetadata2.input.schema.description;\n      }\n      const metadata = {\n        ...promptMetadata2.metadata,\n        type: \"prompt\",\n        prompt: {\n          ...promptMetadata2,\n          template: parsedPrompt.template\n        }\n      };\n      if (promptMetadata2.raw?.[\"metadata\"]) {\n        metadata[\"metadata\"] = { ...promptMetadata2.raw?.[\"metadata\"] };\n      }\n      return {\n        name: registryDefinitionKey(name, variant ?? void 0, ns),\n        model: promptMetadata2.model,\n        config: promptMetadata2.config,\n        tools: promptMetadata2.tools,\n        description: promptMetadata2.description,\n        output: {\n          jsonSchema: promptMetadata2.output?.schema,\n          format: promptMetadata2.output?.format\n        },\n        input: {\n          jsonSchema: promptMetadata2.input?.schema\n        },\n        metadata,\n        maxTurns: promptMetadata2.raw?.[\"maxTurns\"],\n        toolChoice: promptMetadata2.raw?.[\"toolChoice\"],\n        returnToolRequests: promptMetadata2.raw?.[\"returnToolRequests\"],\n        messages: parsedPrompt.template\n      };\n    })\n  );\n}\nasync function prompt(registry, name, options) {\n  return await lookupPrompt(\n    registry,\n    name,\n    options?.variant\n  );\n}\nfunction registryLookupKey(name, variant, ns) {\n  return `/prompt/${registryDefinitionKey(name, variant, ns)}`;\n}\nasync function lookupPrompt(registry, name, variant) {\n  const registryPrompt = await registry.lookupAction(\n    registryLookupKey(name, variant)\n  );\n  if (registryPrompt) {\n    return registryPrompt.__executablePrompt;\n  }\n  throw new import_core.GenkitError({\n    status: \"NOT_FOUND\",\n    message: `Prompt ${name + (variant ? ` (variant ${variant})` : \"\")} not found`\n  });\n}\nfunction registryDefinitionKey(name, variant, ns) {\n  return `${ns ? `${ns}/` : \"\"}${name}${variant ? `.${variant}` : \"\"}`;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=prompt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/reranker.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/reranker.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar reranker_exports = {};\n__export(reranker_exports, {\n  CommonRerankerOptionsSchema: () => CommonRerankerOptionsSchema,\n  RankedDocument: () => RankedDocument,\n  RankedDocumentDataSchema: () => RankedDocumentDataSchema,\n  RankedDocumentMetadataSchema: () => RankedDocumentMetadataSchema,\n  RerankerInfoSchema: () => RerankerInfoSchema,\n  defineReranker: () => defineReranker,\n  rerank: () => rerank,\n  reranker: () => reranker,\n  rerankerRef: () => rerankerRef\n});\nmodule.exports = __toCommonJS(reranker_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_retriever = __webpack_require__(/*! ./retriever.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/retriever.js\");\nconst RankedDocumentMetadataSchema = import_core.z.object({\n  score: import_core.z.number()\n  // Enforces that 'score' must be a number\n}).passthrough();\nconst RankedDocumentDataSchema = import_core.z.object({\n  content: import_core.z.array(import_document.PartSchema),\n  metadata: RankedDocumentMetadataSchema\n});\nclass RankedDocument extends import_retriever.Document {\n  content;\n  metadata;\n  constructor(data) {\n    super(data);\n    this.content = data.content;\n    this.metadata = data.metadata;\n  }\n  /**\n   * Returns the score of the document.\n   * @returns The score of the document.\n   */\n  score() {\n    return this.metadata.score;\n  }\n}\nconst RerankerRequestSchema = import_core.z.object({\n  query: import_retriever.DocumentDataSchema,\n  documents: import_core.z.array(import_retriever.DocumentDataSchema),\n  options: import_core.z.any().optional()\n});\nconst RerankerResponseSchema = import_core.z.object({\n  documents: import_core.z.array(RankedDocumentDataSchema)\n});\nconst RerankerInfoSchema = import_core.z.object({\n  label: import_core.z.string().optional(),\n  /** Supported model capabilities. */\n  supports: import_core.z.object({\n    /** Model can process media as part of the prompt (multimodal input). */\n    media: import_core.z.boolean().optional()\n  }).optional()\n});\nfunction rerankerWithMetadata(reranker2, configSchema) {\n  const withMeta = reranker2;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction defineReranker(registry, options, runner) {\n  const act = reranker(options, runner);\n  registry.registerAction(\"reranker\", act);\n  return act;\n}\nfunction reranker(options, runner) {\n  const reranker2 = (0, import_core.action)(\n    {\n      actionType: \"reranker\",\n      name: options.name,\n      inputSchema: options.configSchema ? RerankerRequestSchema.extend({\n        options: options.configSchema.optional()\n      }) : RerankerRequestSchema,\n      outputSchema: RerankerResponseSchema,\n      metadata: {\n        type: \"reranker\",\n        info: options.info,\n        reranker: {\n          customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0\n        }\n      }\n    },\n    (i) => runner(\n      new import_retriever.Document(i.query),\n      i.documents.map((d) => new import_retriever.Document(d)),\n      i.options\n    )\n  );\n  const rwm = rerankerWithMetadata(\n    reranker2,\n    options.configSchema\n  );\n  return rwm;\n}\nasync function rerank(registry, params) {\n  let reranker2;\n  if (typeof params.reranker === \"string\") {\n    reranker2 = await registry.lookupAction(`/reranker/${params.reranker}`);\n  } else if (Object.hasOwnProperty.call(params.reranker, \"info\")) {\n    reranker2 = await registry.lookupAction(`/reranker/${params.reranker.name}`);\n  } else {\n    reranker2 = params.reranker;\n  }\n  if (!reranker2) {\n    throw new Error(\"Unable to resolve the reranker\");\n  }\n  const response = await reranker2({\n    query: typeof params.query === \"string\" ? import_retriever.Document.fromText(params.query) : params.query,\n    documents: params.documents,\n    options: params.options\n  });\n  return response.documents.map((d) => new RankedDocument(d));\n}\nconst CommonRerankerOptionsSchema = import_core.z.object({\n  k: import_core.z.number().describe(\"Number of documents to rerank\").optional()\n});\nfunction rerankerRef(options) {\n  return { ...options };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=reranker.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/reranker.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/resource.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/resource.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar resource_exports = {};\n__export(resource_exports, {\n  ResourceInputSchema: () => ResourceInputSchema,\n  ResourceOutputSchema: () => ResourceOutputSchema,\n  defineResource: () => defineResource,\n  dynamicResource: () => dynamicResource,\n  findMatchingResource: () => findMatchingResource,\n  isDynamicResourceAction: () => isDynamicResourceAction,\n  resource: () => resource\n});\nmodule.exports = __toCommonJS(resource_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_uri_templates = __toESM(__webpack_require__(/*! uri-templates */ \"(action-browser)/./node_modules/uri-templates/uri-templates.js\"));\nvar import_model_types = __webpack_require__(/*! ./model-types.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model-types.js\");\nconst ResourceInputSchema = import_core.z.object({\n  uri: import_core.z.string()\n});\nconst ResourceOutputSchema = import_core.z.object({\n  content: import_core.z.array(import_model_types.PartSchema)\n});\nfunction defineResource(registry, opts, fn) {\n  const action2 = dynamicResource(opts, fn);\n  action2.matches = createMatcher(opts.uri, opts.template);\n  registry.registerAction(\"resource\", action2);\n  return action2;\n}\nasync function findMatchingResource(registry, input) {\n  for (const actKeys of Object.keys(await registry.listResolvableActions())) {\n    if (actKeys.startsWith(\"/resource/\")) {\n      const resource2 = await registry.lookupAction(actKeys);\n      if (resource2.matches(input)) {\n        return resource2;\n      }\n    }\n  }\n  return void 0;\n}\nfunction isDynamicResourceAction(t) {\n  return (0, import_core.isAction)(t) && !t.__registry;\n}\nfunction resource(opts, fn) {\n  return dynamicResource(opts, fn);\n}\nfunction dynamicResource(opts, fn) {\n  const uri = opts.uri ?? opts.template;\n  if (!uri) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: `must specify either url or template options`\n    });\n  }\n  const matcher = createMatcher(opts.uri, opts.template);\n  const act = (0, import_core.action)(\n    {\n      actionType: \"resource\",\n      name: opts.name ?? uri,\n      description: opts.description,\n      inputSchema: ResourceInputSchema,\n      outputSchema: ResourceOutputSchema,\n      metadata: {\n        resource: {\n          uri: opts.uri,\n          template: opts.template\n        },\n        ...opts.metadata,\n        type: \"resource\",\n        dynamic: true\n      }\n    },\n    async (input, ctx) => {\n      const templateMatch = matcher(input);\n      if (!templateMatch) {\n        throw new import_core.GenkitError({\n          status: \"INVALID_ARGUMENT\",\n          message: `input ${input} did not match template ${uri}`\n        });\n      }\n      const parts = await fn(input, ctx);\n      parts.content.map((p) => {\n        if (!p.metadata) {\n          p.metadata = {};\n        }\n        if (p.metadata?.resource) {\n          if (!p.metadata.resource.parent) {\n            p.metadata.resource.parent = {\n              uri: input.uri\n            };\n            if (opts.template) {\n              p.metadata.resource.parent.template = opts.template;\n            }\n          }\n        } else {\n          p.metadata.resource = {\n            uri: input.uri\n          };\n          if (opts.template) {\n            p.metadata.resource.template = opts.template;\n          }\n        }\n        return p;\n      });\n      return parts;\n    }\n  );\n  act.matches = matcher;\n  act.attach = (_) => act;\n  return act;\n}\nfunction createMatcher(uriOpt, templateOpt) {\n  if (uriOpt) {\n    return (input) => input.uri === uriOpt;\n  }\n  if (templateOpt) {\n    const template = (0, import_uri_templates.default)(templateOpt);\n    return (input) => template.fromUri(input.uri) !== void 0;\n  }\n  throw new import_core.GenkitError({\n    status: \"INVALID_ARGUMENT\",\n    message: \"must specify either url or template options\"\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=resource.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/resource.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/retriever.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/retriever.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar retriever_exports = {};\n__export(retriever_exports, {\n  CommonRetrieverOptionsSchema: () => CommonRetrieverOptionsSchema,\n  Document: () => import_document2.Document,\n  DocumentDataSchema: () => import_document2.DocumentDataSchema,\n  IndexerInfoSchema: () => IndexerInfoSchema,\n  RetrieverInfoSchema: () => RetrieverInfoSchema,\n  defineIndexer: () => defineIndexer,\n  defineRetriever: () => defineRetriever,\n  defineSimpleRetriever: () => defineSimpleRetriever,\n  index: () => index,\n  indexer: () => indexer,\n  indexerRef: () => indexerRef,\n  retrieve: () => retrieve,\n  retriever: () => retriever,\n  retrieverRef: () => retrieverRef\n});\nmodule.exports = __toCommonJS(retriever_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_document2 = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nconst RetrieverRequestSchema = import_core.z.object({\n  query: import_document.DocumentDataSchema,\n  options: import_core.z.any().optional()\n});\nconst RetrieverResponseSchema = import_core.z.object({\n  documents: import_core.z.array(import_document.DocumentDataSchema)\n  // TODO: stats, etc.\n});\nconst IndexerRequestSchema = import_core.z.object({\n  documents: import_core.z.array(import_document.DocumentDataSchema),\n  options: import_core.z.any().optional()\n});\nconst RetrieverInfoSchema = import_core.z.object({\n  label: import_core.z.string().optional(),\n  /** Supported model capabilities. */\n  supports: import_core.z.object({\n    /** Model can process media as part of the prompt (multimodal input). */\n    media: import_core.z.boolean().optional()\n  }).optional()\n});\nfunction retrieverWithMetadata(retriever2, configSchema) {\n  const withMeta = retriever2;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction indexerWithMetadata(indexer2, configSchema) {\n  const withMeta = indexer2;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction defineRetriever(registry, options, runner) {\n  const r = retriever(options, runner);\n  registry.registerAction(\"retriever\", r);\n  return r;\n}\nfunction retriever(options, runner) {\n  const retriever2 = (0, import_core.action)(\n    {\n      actionType: \"retriever\",\n      name: options.name,\n      inputSchema: options.configSchema ? RetrieverRequestSchema.extend({\n        options: options.configSchema.optional()\n      }) : RetrieverRequestSchema,\n      outputSchema: RetrieverResponseSchema,\n      metadata: {\n        type: \"retriever\",\n        info: options.info,\n        retriever: {\n          customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0\n        }\n      }\n    },\n    (i) => runner(new import_document.Document(i.query), i.options)\n  );\n  const rwm = retrieverWithMetadata(\n    retriever2,\n    options.configSchema\n  );\n  return rwm;\n}\nfunction defineIndexer(registry, options, runner) {\n  const r = indexer(options, runner);\n  registry.registerAction(\"indexer\", r);\n  return r;\n}\nfunction indexer(options, runner) {\n  const indexer2 = (0, import_core.action)(\n    {\n      actionType: \"indexer\",\n      name: options.name,\n      inputSchema: options.configSchema ? IndexerRequestSchema.extend({\n        options: options.configSchema.optional()\n      }) : IndexerRequestSchema,\n      outputSchema: import_core.z.void(),\n      metadata: {\n        type: \"indexer\",\n        embedderInfo: options.embedderInfo,\n        indexer: {\n          customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0\n        }\n      }\n    },\n    (i) => runner(\n      i.documents.map((dd) => new import_document.Document(dd)),\n      i.options\n    )\n  );\n  const iwm = indexerWithMetadata(\n    indexer2,\n    options.configSchema\n  );\n  return iwm;\n}\nasync function retrieve(registry, params) {\n  let retriever2;\n  if (typeof params.retriever === \"string\") {\n    retriever2 = await registry.lookupAction(`/retriever/${params.retriever}`);\n  } else if (Object.hasOwnProperty.call(params.retriever, \"info\")) {\n    retriever2 = await registry.lookupAction(\n      `/retriever/${params.retriever.name}`\n    );\n  } else {\n    retriever2 = params.retriever;\n  }\n  if (!retriever2) {\n    throw new Error(\"Unable to resolve the retriever\");\n  }\n  const response = await retriever2({\n    query: typeof params.query === \"string\" ? import_document.Document.fromText(params.query) : params.query,\n    options: params.options\n  });\n  return response.documents.map((d) => new import_document.Document(d));\n}\nasync function index(registry, params) {\n  let indexer2;\n  if (typeof params.indexer === \"string\") {\n    indexer2 = await registry.lookupAction(`/indexer/${params.indexer}`);\n  } else if (Object.hasOwnProperty.call(params.indexer, \"info\")) {\n    indexer2 = await registry.lookupAction(`/indexer/${params.indexer.name}`);\n  } else {\n    indexer2 = params.indexer;\n  }\n  if (!indexer2) {\n    throw new Error(\"Unable to utilize the provided indexer\");\n  }\n  return await indexer2({\n    documents: params.documents,\n    options: params.options\n  });\n}\nconst CommonRetrieverOptionsSchema = import_core.z.object({\n  k: import_core.z.number().describe(\"Number of documents to retrieve\").optional()\n});\nfunction retrieverRef(options) {\n  return { ...options };\n}\nconst IndexerInfoSchema = RetrieverInfoSchema;\nfunction indexerRef(options) {\n  return { ...options };\n}\nfunction itemToDocument(item, options) {\n  if (!item)\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: `Items returned from simple retriever must be non-null.`\n    });\n  if (typeof item === \"string\") return import_document.Document.fromText(item);\n  if (typeof options.content === \"function\") {\n    const transformed = options.content(item);\n    return typeof transformed === \"string\" ? import_document.Document.fromText(transformed) : new import_document.Document({ content: transformed });\n  }\n  if (typeof options.content === \"string\" && typeof item === \"object\")\n    return import_document.Document.fromText(item[options.content]);\n  throw new import_core.GenkitError({\n    status: \"INVALID_ARGUMENT\",\n    message: `Cannot convert item to document without content option. Item: ${JSON.stringify(item)}`\n  });\n}\nfunction itemToMetadata(item, options) {\n  if (typeof item === \"string\") return void 0;\n  if (Array.isArray(options.metadata) && typeof item === \"object\") {\n    const out = {};\n    options.metadata.forEach((key) => out[key] = item[key]);\n    return out;\n  }\n  if (typeof options.metadata === \"function\") return options.metadata(item);\n  if (!options.metadata && typeof item === \"object\") {\n    const out = { ...item };\n    if (typeof options.content === \"string\") delete out[options.content];\n    return out;\n  }\n  throw new import_core.GenkitError({\n    status: \"INVALID_ARGUMENT\",\n    message: `Unable to extract metadata from item with supplied options. Item: ${JSON.stringify(item)}`\n  });\n}\nfunction defineSimpleRetriever(registry, options, handler) {\n  return defineRetriever(\n    registry,\n    {\n      name: options.name,\n      configSchema: options.configSchema\n    },\n    async (query, config) => {\n      const result = await handler(query, config);\n      return {\n        documents: result.map((item) => {\n          const doc = itemToDocument(item, options);\n          if (typeof item !== \"string\")\n            doc.metadata = itemToMetadata(item, options);\n          return doc;\n        })\n      };\n    }\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=retriever.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/retriever.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/session.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/session.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar session_exports = {};\n__export(session_exports, {\n  Session: () => Session,\n  SessionError: () => SessionError,\n  getCurrentSession: () => getCurrentSession,\n  inMemorySessionStore: () => inMemorySessionStore,\n  runWithSession: () => runWithSession\n});\nmodule.exports = __toCommonJS(session_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_uuid = __webpack_require__(/*! uuid */ \"(action-browser)/./node_modules/uuid/dist/esm-node/index.js\");\nvar import_chat = __webpack_require__(/*! ./chat.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/chat.js\");\nvar import_index = __webpack_require__(/*! ./index.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/index.js\");\nclass Session {\n  constructor(registry, options) {\n    this.registry = registry;\n    this.id = options?.id ?? (0, import_uuid.v4)();\n    this.sessionData = options?.sessionData ?? {\n      id: this.id\n    };\n    if (!this.sessionData) {\n      this.sessionData = { id: this.id };\n    }\n    if (!this.sessionData.threads) {\n      this.sessionData.threads = {};\n    }\n    this.store = options?.store ?? new InMemorySessionStore();\n  }\n  id;\n  sessionData;\n  store;\n  get state() {\n    return this.sessionData.state;\n  }\n  /**\n   * Update session state data.\n   */\n  async updateState(data) {\n    let sessionData = this.sessionData;\n    if (!sessionData) {\n      sessionData = {};\n    }\n    sessionData.state = data;\n    this.sessionData = sessionData;\n    await this.store.save(this.id, sessionData);\n  }\n  /**\n   * Update messages for a given thread.\n   */\n  async updateMessages(thread, messages) {\n    let sessionData = this.sessionData;\n    if (!sessionData) {\n      sessionData = {};\n    }\n    if (!sessionData.threads) {\n      sessionData.threads = {};\n    }\n    sessionData.threads[thread] = messages.map(\n      (m) => m.toJSON ? m.toJSON() : m\n    );\n    this.sessionData = sessionData;\n    await this.store.save(this.id, sessionData);\n  }\n  chat(optionsOrPreambleOrThreadName, maybeOptionsOrPreamble, maybeOptions) {\n    return runWithSession(this.registry, this, () => {\n      let options;\n      let threadName = import_chat.MAIN_THREAD;\n      let preamble;\n      if (optionsOrPreambleOrThreadName) {\n        if (typeof optionsOrPreambleOrThreadName === \"string\") {\n          threadName = optionsOrPreambleOrThreadName;\n        } else if ((0, import_index.isExecutablePrompt)(optionsOrPreambleOrThreadName)) {\n          preamble = optionsOrPreambleOrThreadName;\n        } else {\n          options = optionsOrPreambleOrThreadName;\n        }\n      }\n      if (maybeOptionsOrPreamble) {\n        if ((0, import_index.isExecutablePrompt)(maybeOptionsOrPreamble)) {\n          preamble = maybeOptionsOrPreamble;\n        } else {\n          options = maybeOptionsOrPreamble;\n        }\n      }\n      if (maybeOptions) {\n        options = maybeOptions;\n      }\n      let requestBase;\n      if (preamble) {\n        const renderOptions = options;\n        requestBase = preamble.render(renderOptions?.input, renderOptions).then((rb) => {\n          return {\n            ...rb,\n            messages: (0, import_index.tagAsPreamble)(rb?.messages)\n          };\n        });\n      } else {\n        const baseOptions = { ...options };\n        const messages = [];\n        if (baseOptions.system) {\n          messages.push({\n            role: \"system\",\n            content: import_index.Message.parseContent(baseOptions.system)\n          });\n        }\n        delete baseOptions.system;\n        if (baseOptions.messages) {\n          messages.push(...baseOptions.messages);\n        }\n        baseOptions.messages = (0, import_index.tagAsPreamble)(messages);\n        requestBase = Promise.resolve(baseOptions);\n      }\n      return new import_chat.Chat(this, requestBase, {\n        thread: threadName,\n        id: this.id,\n        messages: (this.sessionData?.threads && this.sessionData?.threads[threadName]) ?? []\n      });\n    });\n  }\n  /**\n   * Executes provided function within this session context allowing calling\n   * `ai.currentSession().state`\n   */\n  run(fn) {\n    return runWithSession(this.registry, this, fn);\n  }\n  toJSON() {\n    return this.sessionData;\n  }\n}\nconst sessionAlsKey = \"ai.session\";\nfunction runWithSession(registry, session, fn) {\n  return (0, import_core.getAsyncContext)().run(sessionAlsKey, session, fn);\n}\nfunction getCurrentSession(registry) {\n  return (0, import_core.getAsyncContext)().getStore(sessionAlsKey);\n}\nclass SessionError extends Error {\n  constructor(msg) {\n    super(msg);\n  }\n}\nfunction inMemorySessionStore() {\n  return new InMemorySessionStore();\n}\nclass InMemorySessionStore {\n  data = {};\n  async get(sessionId) {\n    return this.data[sessionId];\n  }\n  async save(sessionId, sessionData) {\n    this.data[sessionId] = sessionData;\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=session.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/session.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js":
/*!************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/tool.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar tool_exports = {};\n__export(tool_exports, {\n  ToolInterruptError: () => ToolInterruptError,\n  asTool: () => asTool,\n  defineInterrupt: () => defineInterrupt,\n  defineTool: () => defineTool,\n  dynamicTool: () => dynamicTool,\n  interrupt: () => interrupt,\n  isDynamicTool: () => isDynamicTool,\n  isToolRequest: () => isToolRequest,\n  isToolResponse: () => isToolResponse,\n  lookupToolByName: () => lookupToolByName,\n  resolveTools: () => resolveTools,\n  toToolDefinition: () => toToolDefinition,\n  tool: () => tool\n});\nmodule.exports = __toCommonJS(tool_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_prompt = __webpack_require__(/*! ./prompt.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js\");\nfunction asTool(registry, action2) {\n  if (action2.__action?.metadata?.type === \"tool\") {\n    return action2;\n  }\n  const fn = (input) => {\n    (0, import_tracing.setCustomMetadataAttributes)({ subtype: \"tool\" });\n    return action2(input);\n  };\n  fn.__action = {\n    ...action2.__action,\n    metadata: { ...action2.__action.metadata, type: \"tool\" }\n  };\n  return fn;\n}\nasync function resolveTools(registry, tools) {\n  if (!tools || tools.length === 0) {\n    return [];\n  }\n  return await Promise.all(\n    tools.map(async (ref) => {\n      if (typeof ref === \"string\") {\n        return await lookupToolByName(registry, ref);\n      } else if ((0, import_core.isAction)(ref)) {\n        return asTool(registry, ref);\n      } else if ((0, import_prompt.isExecutablePrompt)(ref)) {\n        return await ref.asTool();\n      } else if (ref.name) {\n        return await lookupToolByName(\n          registry,\n          ref.metadata?.originalName || ref.name\n        );\n      }\n      throw new Error(\"Tools must be strings, tool definitions, or actions.\");\n    })\n  );\n}\nasync function lookupToolByName(registry, name) {\n  const tool2 = await registry.lookupAction(name) || await registry.lookupAction(`/tool/${name}`) || await registry.lookupAction(`/prompt/${name}`);\n  if (!tool2) {\n    throw new Error(`Tool ${name} not found`);\n  }\n  return tool2;\n}\nfunction toToolDefinition(tool2) {\n  const originalName = tool2.__action.name;\n  let name = originalName;\n  if (originalName.includes(\"/\")) {\n    name = originalName.substring(originalName.lastIndexOf(\"/\") + 1);\n  }\n  const out = {\n    name,\n    description: tool2.__action.description || \"\",\n    outputSchema: (0, import_schema.toJsonSchema)({\n      schema: tool2.__action.outputSchema ?? import_core.z.void(),\n      jsonSchema: tool2.__action.outputJsonSchema\n    }),\n    inputSchema: (0, import_schema.toJsonSchema)({\n      schema: tool2.__action.inputSchema ?? import_core.z.void(),\n      jsonSchema: tool2.__action.inputJsonSchema\n    })\n  };\n  if (originalName !== name) {\n    out.metadata = { originalName };\n  }\n  return out;\n}\nfunction defineTool(registry, config, fn) {\n  const a = (0, import_core.defineAction)(\n    registry,\n    {\n      ...config,\n      actionType: \"tool\",\n      metadata: { ...config.metadata || {}, type: \"tool\" }\n    },\n    (i, runOptions) => {\n      return fn(i, {\n        ...runOptions,\n        context: { ...runOptions.context },\n        interrupt: interruptTool(registry)\n      });\n    }\n  );\n  implementTool(a, config, registry);\n  return a;\n}\nfunction implementTool(a, config, registry) {\n  a.respond = (interrupt2, responseData, options) => {\n    if (registry) {\n      (0, import_core.assertUnstable)(\n        registry,\n        \"beta\",\n        \"The 'tool.reply' method is part of the 'interrupts' beta feature.\"\n      );\n    }\n    (0, import_schema.parseSchema)(responseData, {\n      jsonSchema: config.outputJsonSchema,\n      schema: config.outputSchema\n    });\n    return {\n      toolResponse: (0, import_core.stripUndefinedProps)({\n        name: interrupt2.toolRequest.name,\n        ref: interrupt2.toolRequest.ref,\n        output: responseData\n      }),\n      metadata: {\n        interruptResponse: options?.metadata || true\n      }\n    };\n  };\n  a.restart = (interrupt2, resumedMetadata, options) => {\n    if (registry) {\n      (0, import_core.assertUnstable)(\n        registry,\n        \"beta\",\n        \"The 'tool.restart' method is part of the 'interrupts' beta feature.\"\n      );\n    }\n    let replaceInput = options?.replaceInput;\n    if (replaceInput) {\n      replaceInput = (0, import_schema.parseSchema)(replaceInput, {\n        schema: config.inputSchema,\n        jsonSchema: config.inputJsonSchema\n      });\n    }\n    return {\n      toolRequest: (0, import_core.stripUndefinedProps)({\n        name: interrupt2.toolRequest.name,\n        ref: interrupt2.toolRequest.ref,\n        input: replaceInput || interrupt2.toolRequest.input\n      }),\n      metadata: (0, import_core.stripUndefinedProps)({\n        ...interrupt2.metadata,\n        resumed: resumedMetadata || true,\n        // annotate the original input if replacing it\n        replacedInput: replaceInput ? interrupt2.toolRequest.input : void 0\n      })\n    };\n  };\n}\nfunction isToolRequest(part) {\n  return !!part.toolRequest;\n}\nfunction isToolResponse(part) {\n  return !!part.toolResponse;\n}\nfunction isDynamicTool(t) {\n  return (0, import_core.isAction)(t) && !t.__registry;\n}\nfunction interrupt(config) {\n  const { requestMetadata, ...toolConfig } = config;\n  return tool(toolConfig, async (input, { interrupt: interrupt2 }) => {\n    if (!config.requestMetadata) interrupt2();\n    else if (typeof config.requestMetadata === \"object\")\n      interrupt2(config.requestMetadata);\n    else interrupt2(await Promise.resolve(config.requestMetadata(input)));\n  });\n}\nfunction defineInterrupt(registry, config) {\n  const i = interrupt(config);\n  registry.registerAction(\"tool\", i);\n  return i;\n}\nclass ToolInterruptError extends Error {\n  constructor(metadata) {\n    super();\n    this.metadata = metadata;\n    this.name = \"ToolInterruptError\";\n  }\n}\nfunction interruptTool(registry) {\n  return (metadata) => {\n    if (registry) {\n      (0, import_core.assertUnstable)(registry, \"beta\", \"Tool interrupts are a beta feature.\");\n    }\n    throw new ToolInterruptError(metadata);\n  };\n}\nfunction tool(config, fn) {\n  return dynamicTool(config, fn);\n}\nfunction dynamicTool(config, fn) {\n  const a = (0, import_core.action)(\n    {\n      ...config,\n      actionType: \"tool\",\n      metadata: { ...config.metadata || {}, type: \"tool\", dynamic: true }\n    },\n    (i, runOptions) => {\n      const interrupt2 = interruptTool(runOptions.registry);\n      if (fn) {\n        return fn(i, {\n          ...runOptions,\n          context: { ...runOptions.context },\n          interrupt: interrupt2\n        });\n      }\n      return interrupt2();\n    }\n  );\n  implementTool(a, config);\n  a.attach = (_) => a;\n  return a;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=tool.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/types.js":
/*!*************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/types.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar types_exports = {};\n__export(types_exports, {\n  LlmResponseSchema: () => LlmResponseSchema,\n  LlmStatsSchema: () => LlmStatsSchema,\n  ToolCallSchema: () => ToolCallSchema,\n  ToolSchema: () => ToolSchema,\n  toToolWireFormat: () => toToolWireFormat\n});\nmodule.exports = __toCommonJS(types_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nconst LlmStatsSchema = import_core.z.object({\n  latencyMs: import_core.z.number().optional(),\n  inputTokenCount: import_core.z.number().optional(),\n  outputTokenCount: import_core.z.number().optional()\n});\nconst ToolSchema = import_core.z.object({\n  name: import_core.z.string(),\n  description: import_core.z.string().optional(),\n  schema: import_core.z.any()\n});\nconst ToolCallSchema = import_core.z.object({\n  toolName: import_core.z.string(),\n  arguments: import_core.z.any()\n});\nconst LlmResponseSchema = import_core.z.object({\n  completion: import_core.z.string(),\n  toolCalls: import_core.z.array(ToolCallSchema).optional(),\n  stats: LlmStatsSchema\n});\nfunction toToolWireFormat(actions) {\n  if (!actions) return void 0;\n  return actions.map((a) => {\n    return {\n      name: a.__action.name,\n      description: a.__action.description,\n      schema: {\n        input: (0, import_schema.toJsonSchema)({\n          schema: a.__action.inputSchema,\n          jsonSchema: a.__action.inputJsonSchema\n        }),\n        output: (0, import_schema.toJsonSchema)({\n          schema: a.__action.outputSchema,\n          jsonSchema: a.__action.outputJsonSchema\n        })\n      }\n    };\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMscUZBQWlCO0FBQzNDLG9CQUFvQixtQkFBTyxDQUFDLDZGQUF3QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLE1BQU0sQ0FNTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1qcy1hcHAvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9saWIvdHlwZXMuanM/OTM0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgdHlwZXNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQodHlwZXNfZXhwb3J0cywge1xuICBMbG1SZXNwb25zZVNjaGVtYTogKCkgPT4gTGxtUmVzcG9uc2VTY2hlbWEsXG4gIExsbVN0YXRzU2NoZW1hOiAoKSA9PiBMbG1TdGF0c1NjaGVtYSxcbiAgVG9vbENhbGxTY2hlbWE6ICgpID0+IFRvb2xDYWxsU2NoZW1hLFxuICBUb29sU2NoZW1hOiAoKSA9PiBUb29sU2NoZW1hLFxuICB0b1Rvb2xXaXJlRm9ybWF0OiAoKSA9PiB0b1Rvb2xXaXJlRm9ybWF0XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHR5cGVzX2V4cG9ydHMpO1xudmFyIGltcG9ydF9jb3JlID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZVwiKTtcbnZhciBpbXBvcnRfc2NoZW1hID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZS9zY2hlbWFcIik7XG5jb25zdCBMbG1TdGF0c1NjaGVtYSA9IGltcG9ydF9jb3JlLnoub2JqZWN0KHtcbiAgbGF0ZW5jeU1zOiBpbXBvcnRfY29yZS56Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gIGlucHV0VG9rZW5Db3VudDogaW1wb3J0X2NvcmUuei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICBvdXRwdXRUb2tlbkNvdW50OiBpbXBvcnRfY29yZS56Lm51bWJlcigpLm9wdGlvbmFsKClcbn0pO1xuY29uc3QgVG9vbFNjaGVtYSA9IGltcG9ydF9jb3JlLnoub2JqZWN0KHtcbiAgbmFtZTogaW1wb3J0X2NvcmUuei5zdHJpbmcoKSxcbiAgZGVzY3JpcHRpb246IGltcG9ydF9jb3JlLnouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgc2NoZW1hOiBpbXBvcnRfY29yZS56LmFueSgpXG59KTtcbmNvbnN0IFRvb2xDYWxsU2NoZW1hID0gaW1wb3J0X2NvcmUuei5vYmplY3Qoe1xuICB0b29sTmFtZTogaW1wb3J0X2NvcmUuei5zdHJpbmcoKSxcbiAgYXJndW1lbnRzOiBpbXBvcnRfY29yZS56LmFueSgpXG59KTtcbmNvbnN0IExsbVJlc3BvbnNlU2NoZW1hID0gaW1wb3J0X2NvcmUuei5vYmplY3Qoe1xuICBjb21wbGV0aW9uOiBpbXBvcnRfY29yZS56LnN0cmluZygpLFxuICB0b29sQ2FsbHM6IGltcG9ydF9jb3JlLnouYXJyYXkoVG9vbENhbGxTY2hlbWEpLm9wdGlvbmFsKCksXG4gIHN0YXRzOiBMbG1TdGF0c1NjaGVtYVxufSk7XG5mdW5jdGlvbiB0b1Rvb2xXaXJlRm9ybWF0KGFjdGlvbnMpIHtcbiAgaWYgKCFhY3Rpb25zKSByZXR1cm4gdm9pZCAwO1xuICByZXR1cm4gYWN0aW9ucy5tYXAoKGEpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogYS5fX2FjdGlvbi5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IGEuX19hY3Rpb24uZGVzY3JpcHRpb24sXG4gICAgICBzY2hlbWE6IHtcbiAgICAgICAgaW5wdXQ6ICgwLCBpbXBvcnRfc2NoZW1hLnRvSnNvblNjaGVtYSkoe1xuICAgICAgICAgIHNjaGVtYTogYS5fX2FjdGlvbi5pbnB1dFNjaGVtYSxcbiAgICAgICAgICBqc29uU2NoZW1hOiBhLl9fYWN0aW9uLmlucHV0SnNvblNjaGVtYVxuICAgICAgICB9KSxcbiAgICAgICAgb3V0cHV0OiAoMCwgaW1wb3J0X3NjaGVtYS50b0pzb25TY2hlbWEpKHtcbiAgICAgICAgICBzY2hlbWE6IGEuX19hY3Rpb24ub3V0cHV0U2NoZW1hLFxuICAgICAgICAgIGpzb25TY2hlbWE6IGEuX19hY3Rpb24ub3V0cHV0SnNvblNjaGVtYVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH07XG4gIH0pO1xufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIExsbVJlc3BvbnNlU2NoZW1hLFxuICBMbG1TdGF0c1NjaGVtYSxcbiAgVG9vbENhbGxTY2hlbWEsXG4gIFRvb2xTY2hlbWEsXG4gIHRvVG9vbFdpcmVGb3JtYXRcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/types.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/__codegen/version.js":
/*!***************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/__codegen/version.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar version_exports = {};\n__export(version_exports, {\n  version: () => version\n});\nmodule.exports = __toCommonJS(version_exports);\nconst version = \"1.20.0\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL19fY29kZWdlbi92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FFTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1qcy1hcHAvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9fX2NvZGVnZW4vdmVyc2lvbi5qcz8yZTJiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciB2ZXJzaW9uX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHZlcnNpb25fZXhwb3J0cywge1xuICB2ZXJzaW9uOiAoKSA9PiB2ZXJzaW9uXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHZlcnNpb25fZXhwb3J0cyk7XG5jb25zdCB2ZXJzaW9uID0gXCIxLjIwLjBcIjtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICB2ZXJzaW9uXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/__codegen/version.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/action.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/action.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar action_exports = {};\n__export(action_exports, {\n  StatusCodes: () => import_statusTypes.StatusCodes,\n  StatusSchema: () => import_statusTypes.StatusSchema,\n  action: () => action,\n  actionWithMiddleware: () => actionWithMiddleware,\n  defineAction: () => defineAction,\n  defineActionAsync: () => defineActionAsync,\n  getStreamingCallback: () => getStreamingCallback,\n  isAction: () => isAction,\n  isInRuntimeContext: () => isInRuntimeContext,\n  runInActionRuntimeContext: () => runInActionRuntimeContext,\n  runOutsideActionRuntimeContext: () => runOutsideActionRuntimeContext,\n  runWithStreamingCallback: () => runWithStreamingCallback,\n  sentinelNoopStreamingCallback: () => sentinelNoopStreamingCallback\n});\nmodule.exports = __toCommonJS(action_exports);\nvar import_async_context = __webpack_require__(/*! ./async-context.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async-context.js\");\nvar import_async = __webpack_require__(/*! ./async.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async.js\");\nvar import_context = __webpack_require__(/*! ./context.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/context.js\");\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! ./tracing.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_statusTypes = __webpack_require__(/*! ./statusTypes.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/statusTypes.js\");\nconst makeNoopAbortSignal = () => new AbortController().signal;\nfunction actionWithMiddleware(action2, middleware) {\n  const wrapped = async (req, options) => {\n    return (await wrapped.run(req, options)).result;\n  };\n  wrapped.__action = action2.__action;\n  wrapped.run = async (req, options) => {\n    let telemetry;\n    const dispatch = async (index, req2, opts) => {\n      if (index === middleware.length) {\n        const result = await action2.run(req2, opts);\n        telemetry = result.telemetry;\n        return result.result;\n      }\n      const currentMiddleware = middleware[index];\n      if (currentMiddleware.length === 3) {\n        return currentMiddleware(\n          req2,\n          opts,\n          async (modifiedReq, modifiedOptions) => dispatch(index + 1, modifiedReq || req2, modifiedOptions || opts)\n        );\n      } else if (currentMiddleware.length === 2) {\n        return currentMiddleware(\n          req2,\n          async (modifiedReq) => dispatch(index + 1, modifiedReq || req2, opts)\n        );\n      } else {\n        throw new Error(\"unspported middleware function shape\");\n      }\n    };\n    wrapped.stream = action2.stream;\n    return { result: await dispatch(0, req, options), telemetry };\n  };\n  return wrapped;\n}\nfunction action(config, fn) {\n  const actionName = typeof config.name === \"string\" ? config.name : `${config.name.pluginId}/${config.name.actionId}`;\n  const actionMetadata = {\n    name: actionName,\n    description: config.description,\n    inputSchema: config.inputSchema,\n    inputJsonSchema: config.inputJsonSchema,\n    outputSchema: config.outputSchema,\n    outputJsonSchema: config.outputJsonSchema,\n    streamSchema: config.streamSchema,\n    metadata: config.metadata,\n    actionType: config.actionType\n  };\n  const actionFn = async (input, options) => {\n    return (await actionFn.run(input, options)).result;\n  };\n  actionFn.__action = { ...actionMetadata };\n  actionFn.run = async (input, options) => {\n    input = (0, import_schema.parseSchema)(input, {\n      schema: config.inputSchema,\n      jsonSchema: config.inputJsonSchema\n    });\n    let traceId;\n    let spanId;\n    let output = await (0, import_tracing.runInNewSpan)(\n      {\n        metadata: {\n          name: actionName\n        },\n        labels: {\n          [import_tracing.SPAN_TYPE_ATTR]: \"action\",\n          \"genkit:metadata:subtype\": config.actionType,\n          ...options?.telemetryLabels\n        }\n      },\n      async (metadata, span) => {\n        (0, import_tracing.setCustomMetadataAttributes)({\n          subtype: config.actionType\n        });\n        if (options?.context) {\n          (0, import_tracing.setCustomMetadataAttributes)({\n            context: JSON.stringify(options.context)\n          });\n        }\n        traceId = span.spanContext().traceId;\n        spanId = span.spanContext().spanId;\n        metadata.name = actionName;\n        metadata.input = input;\n        try {\n          const actFn = () => fn(input, {\n            ...options,\n            // Context can either be explicitly set, or inherited from the parent action.\n            context: {\n              ...actionFn.__registry?.context,\n              ...options?.context ?? (0, import_context.getContext)()\n            },\n            streamingRequested: !!options?.onChunk && options.onChunk !== sentinelNoopStreamingCallback,\n            sendChunk: options?.onChunk ?? sentinelNoopStreamingCallback,\n            trace: {\n              traceId,\n              spanId\n            },\n            registry: actionFn.__registry,\n            abortSignal: options?.abortSignal ?? makeNoopAbortSignal()\n          });\n          const output2 = await (0, import_context.runWithContext)(options?.context, actFn);\n          metadata.output = JSON.stringify(output2);\n          return output2;\n        } catch (err) {\n          if (typeof err === \"object\") {\n            err.traceId = traceId;\n          }\n          throw err;\n        }\n      }\n    );\n    output = (0, import_schema.parseSchema)(output, {\n      schema: config.outputSchema,\n      jsonSchema: config.outputJsonSchema\n    });\n    return {\n      result: output,\n      telemetry: {\n        traceId,\n        spanId\n      }\n    };\n  };\n  actionFn.stream = (input, opts) => {\n    let chunkStreamController;\n    const chunkStream = new ReadableStream({\n      start(controller) {\n        chunkStreamController = controller;\n      },\n      pull() {\n      },\n      cancel() {\n      }\n    });\n    const invocationPromise = actionFn.run(config.inputSchema ? config.inputSchema.parse(input) : input, {\n      onChunk: (chunk) => {\n        chunkStreamController.enqueue(chunk);\n      },\n      context: {\n        ...actionFn.__registry?.context,\n        ...opts?.context ?? (0, import_context.getContext)()\n      },\n      abortSignal: opts?.abortSignal,\n      telemetryLabels: opts?.telemetryLabels\n    }).then((s) => s.result).finally(() => {\n      chunkStreamController.close();\n    });\n    return {\n      output: invocationPromise,\n      stream: async function* () {\n        const reader = chunkStream.getReader();\n        while (true) {\n          const chunk = await reader.read();\n          if (chunk.value) {\n            yield chunk.value;\n          }\n          if (chunk.done) {\n            break;\n          }\n        }\n        return await invocationPromise;\n      }()\n    };\n  };\n  if (config.use) {\n    return actionWithMiddleware(actionFn, config.use);\n  }\n  return actionFn;\n}\nfunction isAction(a) {\n  return typeof a === \"function\" && \"__action\" in a;\n}\nfunction defineAction(registry, config, fn) {\n  if (isInRuntimeContext()) {\n    throw new Error(\n      \"Cannot define new actions at runtime.\\nSee: https://github.com/firebase/genkit/blob/main/docs/errors/no_new_actions_at_runtime.md\"\n    );\n  }\n  const act = action(config, async (i, options) => {\n    await registry.initializeAllPlugins();\n    return await runInActionRuntimeContext(() => fn(i, options));\n  });\n  act.__action.actionType = config.actionType;\n  registry.registerAction(config.actionType, act);\n  return act;\n}\nfunction defineActionAsync(registry, actionType, name, config, onInit) {\n  const actionName = typeof name === \"string\" ? name : `${name.pluginId}/${name.actionId}`;\n  const actionPromise = (0, import_async.lazy)(\n    () => config.then((resolvedConfig) => {\n      const act = action(\n        resolvedConfig,\n        async (i, options) => {\n          await registry.initializeAllPlugins();\n          return await runInActionRuntimeContext(\n            () => resolvedConfig.fn(i, options)\n          );\n        }\n      );\n      act.__action.actionType = actionType;\n      onInit?.(act);\n      return act;\n    })\n  );\n  registry.registerActionAsync(actionType, actionName, actionPromise);\n  return actionPromise;\n}\nconst streamingAlsKey = \"core.action.streamingCallback\";\nconst sentinelNoopStreamingCallback = () => null;\nfunction runWithStreamingCallback(streamingCallback, fn) {\n  return (0, import_async_context.getAsyncContext)().run(\n    streamingAlsKey,\n    streamingCallback || sentinelNoopStreamingCallback,\n    fn\n  );\n}\nfunction getStreamingCallback() {\n  const cb = (0, import_async_context.getAsyncContext)().getStore(streamingAlsKey);\n  if (cb === sentinelNoopStreamingCallback) {\n    return void 0;\n  }\n  return cb;\n}\nconst runtimeContextAslKey = \"core.action.runtimeContext\";\nfunction isInRuntimeContext() {\n  return (0, import_async_context.getAsyncContext)().getStore(runtimeContextAslKey) === \"runtime\";\n}\nfunction runInActionRuntimeContext(fn) {\n  return (0, import_async_context.getAsyncContext)().run(runtimeContextAslKey, \"runtime\", fn);\n}\nfunction runOutsideActionRuntimeContext(fn) {\n  return (0, import_async_context.getAsyncContext)().run(runtimeContextAslKey, \"outside\", fn);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=action.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/async-context.js":
/*!***********************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/async-context.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar async_context_exports = {};\n__export(async_context_exports, {\n  getAsyncContext: () => getAsyncContext,\n  setAsyncContext: () => setAsyncContext\n});\nmodule.exports = __toCommonJS(async_context_exports);\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nconst asyncContextKey = \"__genkit_AsyncContext\";\nfunction getAsyncContext() {\n  if (!global[asyncContextKey]) {\n    throw new import_error.GenkitError({\n      status: \"FAILED_PRECONDITION\",\n      message: \"Async context is not initialized.\"\n    });\n  }\n  return global[asyncContextKey];\n}\nfunction setAsyncContext(context) {\n  if (global[asyncContextKey]) return;\n  global[asyncContextKey] = context;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=async-context.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2FzeW5jLWNvbnRleHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG1CQUFtQixtQkFBTyxDQUFDLGdGQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUdMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWpzLWFwcC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2FzeW5jLWNvbnRleHQuanM/ZTgxMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgYXN5bmNfY29udGV4dF9leHBvcnRzID0ge307XG5fX2V4cG9ydChhc3luY19jb250ZXh0X2V4cG9ydHMsIHtcbiAgZ2V0QXN5bmNDb250ZXh0OiAoKSA9PiBnZXRBc3luY0NvbnRleHQsXG4gIHNldEFzeW5jQ29udGV4dDogKCkgPT4gc2V0QXN5bmNDb250ZXh0XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGFzeW5jX2NvbnRleHRfZXhwb3J0cyk7XG52YXIgaW1wb3J0X2Vycm9yID0gcmVxdWlyZShcIi4vZXJyb3IuanNcIik7XG5jb25zdCBhc3luY0NvbnRleHRLZXkgPSBcIl9fZ2Vua2l0X0FzeW5jQ29udGV4dFwiO1xuZnVuY3Rpb24gZ2V0QXN5bmNDb250ZXh0KCkge1xuICBpZiAoIWdsb2JhbFthc3luY0NvbnRleHRLZXldKSB7XG4gICAgdGhyb3cgbmV3IGltcG9ydF9lcnJvci5HZW5raXRFcnJvcih7XG4gICAgICBzdGF0dXM6IFwiRkFJTEVEX1BSRUNPTkRJVElPTlwiLFxuICAgICAgbWVzc2FnZTogXCJBc3luYyBjb250ZXh0IGlzIG5vdCBpbml0aWFsaXplZC5cIlxuICAgIH0pO1xuICB9XG4gIHJldHVybiBnbG9iYWxbYXN5bmNDb250ZXh0S2V5XTtcbn1cbmZ1bmN0aW9uIHNldEFzeW5jQ29udGV4dChjb250ZXh0KSB7XG4gIGlmIChnbG9iYWxbYXN5bmNDb250ZXh0S2V5XSkgcmV0dXJuO1xuICBnbG9iYWxbYXN5bmNDb250ZXh0S2V5XSA9IGNvbnRleHQ7XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0QXN5bmNDb250ZXh0LFxuICBzZXRBc3luY0NvbnRleHRcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmMtY29udGV4dC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/async-context.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/async.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/async.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar async_exports = {};\n__export(async_exports, {\n  Channel: () => Channel,\n  LazyPromise: () => LazyPromise,\n  lazy: () => lazy\n});\nmodule.exports = __toCommonJS(async_exports);\nfunction createTask() {\n  let resolve, reject;\n  const promise = new Promise(\n    (res, rej) => [resolve, reject] = [res, rej]\n  );\n  return {\n    resolve,\n    reject,\n    promise\n  };\n}\nclass Channel {\n  ready = createTask();\n  buffer = [];\n  err = null;\n  send(value) {\n    this.buffer.push(value);\n    this.ready.resolve();\n  }\n  close() {\n    this.buffer.push(null);\n    this.ready.resolve();\n  }\n  error(err) {\n    this.err = err;\n    this.ready.reject(err);\n  }\n  [Symbol.asyncIterator]() {\n    return {\n      next: async () => {\n        if (this.err) {\n          throw this.err;\n        }\n        if (!this.buffer.length) {\n          await this.ready.promise;\n        }\n        const value = this.buffer.shift();\n        if (!this.buffer.length) {\n          this.ready = createTask();\n        }\n        return {\n          value,\n          done: !value\n        };\n      }\n    };\n  }\n}\nclass LazyPromise {\n  executor;\n  promise;\n  constructor(executor) {\n    this.executor = executor;\n  }\n  then(onfulfilled, onrejected) {\n    this.promise ??= new Promise(this.executor);\n    return this.promise.then(onfulfilled, onrejected);\n  }\n}\nfunction lazy(fn) {\n  return new LazyPromise((resolve, reject) => {\n    try {\n      resolve(fn());\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=async.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2FzeW5jLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxNQUFNLENBSUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtanMtYXBwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvYXN5bmMuanM/MjYzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgYXN5bmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoYXN5bmNfZXhwb3J0cywge1xuICBDaGFubmVsOiAoKSA9PiBDaGFubmVsLFxuICBMYXp5UHJvbWlzZTogKCkgPT4gTGF6eVByb21pc2UsXG4gIGxhenk6ICgpID0+IGxhenlcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoYXN5bmNfZXhwb3J0cyk7XG5mdW5jdGlvbiBjcmVhdGVUYXNrKCkge1xuICBsZXQgcmVzb2x2ZSwgcmVqZWN0O1xuICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoXG4gICAgKHJlcywgcmVqKSA9PiBbcmVzb2x2ZSwgcmVqZWN0XSA9IFtyZXMsIHJlal1cbiAgKTtcbiAgcmV0dXJuIHtcbiAgICByZXNvbHZlLFxuICAgIHJlamVjdCxcbiAgICBwcm9taXNlXG4gIH07XG59XG5jbGFzcyBDaGFubmVsIHtcbiAgcmVhZHkgPSBjcmVhdGVUYXNrKCk7XG4gIGJ1ZmZlciA9IFtdO1xuICBlcnIgPSBudWxsO1xuICBzZW5kKHZhbHVlKSB7XG4gICAgdGhpcy5idWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgdGhpcy5yZWFkeS5yZXNvbHZlKCk7XG4gIH1cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5idWZmZXIucHVzaChudWxsKTtcbiAgICB0aGlzLnJlYWR5LnJlc29sdmUoKTtcbiAgfVxuICBlcnJvcihlcnIpIHtcbiAgICB0aGlzLmVyciA9IGVycjtcbiAgICB0aGlzLnJlYWR5LnJlamVjdChlcnIpO1xuICB9XG4gIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHQ6IGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuZXJyKSB7XG4gICAgICAgICAgdGhyb3cgdGhpcy5lcnI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICBhd2FpdCB0aGlzLnJlYWR5LnByb21pc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmJ1ZmZlci5zaGlmdCgpO1xuICAgICAgICBpZiAoIXRoaXMuYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMucmVhZHkgPSBjcmVhdGVUYXNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBkb25lOiAhdmFsdWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5jbGFzcyBMYXp5UHJvbWlzZSB7XG4gIGV4ZWN1dG9yO1xuICBwcm9taXNlO1xuICBjb25zdHJ1Y3RvcihleGVjdXRvcikge1xuICAgIHRoaXMuZXhlY3V0b3IgPSBleGVjdXRvcjtcbiAgfVxuICB0aGVuKG9uZnVsZmlsbGVkLCBvbnJlamVjdGVkKSB7XG4gICAgdGhpcy5wcm9taXNlID8/PSBuZXcgUHJvbWlzZSh0aGlzLmV4ZWN1dG9yKTtcbiAgICByZXR1cm4gdGhpcy5wcm9taXNlLnRoZW4ob25mdWxmaWxsZWQsIG9ucmVqZWN0ZWQpO1xuICB9XG59XG5mdW5jdGlvbiBsYXp5KGZuKSB7XG4gIHJldHVybiBuZXcgTGF6eVByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXNvbHZlKGZuKCkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJlamVjdChlKTtcbiAgICB9XG4gIH0pO1xufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIENoYW5uZWwsXG4gIExhenlQcm9taXNlLFxuICBsYXp5XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzeW5jLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/async.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/background-action.js":
/*!***************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/background-action.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar background_action_exports = {};\n__export(background_action_exports, {\n  OperationSchema: () => OperationSchema,\n  backgroundAction: () => backgroundAction,\n  defineBackgroundAction: () => defineBackgroundAction,\n  isBackgroundAction: () => isBackgroundAction,\n  lookupBackgroundAction: () => lookupBackgroundAction,\n  registerBackgroundAction: () => registerBackgroundAction\n});\nmodule.exports = __toCommonJS(background_action_exports);\nvar z = __toESM(__webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/lib/index.js\"));\nvar import_action = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nconst OperationSchema = z.object({\n  action: z.string().optional(),\n  id: z.string(),\n  done: z.boolean().optional(),\n  output: z.any().optional(),\n  error: z.object({ message: z.string() }).passthrough().optional(),\n  metadata: z.record(z.string(), z.any()).optional()\n});\nasync function lookupBackgroundAction(registry, key) {\n  const root = await registry.lookupAction(key);\n  if (!root) return void 0;\n  const actionName = key.substring(key.indexOf(\"/\", 1) + 1);\n  return new BackgroundActionImpl(\n    root,\n    await registry.lookupAction(`/check-operation/${actionName}/check`),\n    await registry.lookupAction(`/cancel-operation/${actionName}/cancel`)\n  );\n}\nclass BackgroundActionImpl {\n  __action;\n  startAction;\n  checkAction;\n  cancelAction;\n  constructor(startAction, checkAction, cancelAction) {\n    this.__action = {\n      name: startAction.__action.name,\n      description: startAction.__action.description,\n      inputSchema: startAction.__action.inputSchema,\n      inputJsonSchema: startAction.__action.inputJsonSchema,\n      metadata: startAction.__action.metadata,\n      actionType: startAction.__action.actionType\n    };\n    this.startAction = startAction;\n    this.checkAction = checkAction;\n    this.cancelAction = cancelAction;\n  }\n  async start(input, options) {\n    return await this.startAction(input, options);\n  }\n  async check(operation) {\n    return await this.checkAction(operation);\n  }\n  get supportsCancel() {\n    return !!this.cancelAction;\n  }\n  async cancel(operation) {\n    if (!this.cancelAction) {\n      return operation;\n    }\n    return await this.cancelAction(operation);\n  }\n}\nfunction defineBackgroundAction(registry, config) {\n  const act = backgroundAction(config);\n  registerBackgroundAction(registry, act);\n  return act;\n}\nfunction registerBackgroundAction(registry, act, opts) {\n  registry.registerAction(\n    act.startAction.__action.actionType,\n    act.startAction,\n    opts\n  );\n  registry.registerAction(\n    act.checkAction.__action.actionType,\n    act.checkAction,\n    opts\n  );\n  if (act.cancelAction) {\n    registry.registerAction(\n      act.cancelAction.__action.actionType,\n      act.cancelAction,\n      opts\n    );\n  }\n}\nfunction backgroundAction(config) {\n  const startAction = (0, import_action.action)(\n    {\n      actionType: config.actionType,\n      name: config.name,\n      description: config.description,\n      inputSchema: config.inputSchema,\n      inputJsonSchema: config.inputJsonSchema,\n      outputSchema: OperationSchema,\n      metadata: {\n        ...config.metadata,\n        outputSchema: (0, import_schema.toJsonSchema)({\n          schema: config.outputSchema,\n          jsonSchema: config.outputJsonSchema\n        })\n      },\n      use: config.use\n    },\n    async (input, options) => {\n      const operation = await config.start(input, options);\n      operation.action = `/${config.actionType}/${config.name}`;\n      return operation;\n    }\n  );\n  const checkAction = (0, import_action.action)(\n    {\n      actionType: \"check-operation\",\n      name: `${config.name}/check`,\n      description: config.description,\n      inputSchema: OperationSchema,\n      inputJsonSchema: config.inputJsonSchema,\n      outputSchema: OperationSchema,\n      metadata: {\n        ...config.metadata,\n        outputSchema: (0, import_schema.toJsonSchema)({\n          schema: config.outputSchema,\n          jsonSchema: config.outputJsonSchema\n        })\n      }\n    },\n    async (input) => {\n      const operation = await config.check(input);\n      operation.action = `/${config.actionType}/${config.name}`;\n      return operation;\n    }\n  );\n  let cancelAction = void 0;\n  if (config.cancel) {\n    cancelAction = (0, import_action.action)(\n      {\n        actionType: \"cancel-operation\",\n        name: `${config.name}/cancel`,\n        description: config.description,\n        inputSchema: OperationSchema,\n        inputJsonSchema: config.inputJsonSchema,\n        outputSchema: OperationSchema,\n        metadata: {\n          ...config.metadata,\n          outputSchema: (0, import_schema.toJsonSchema)({\n            schema: config.outputSchema,\n            jsonSchema: config.outputJsonSchema\n          })\n        }\n      },\n      async (input) => {\n        if (!config.cancel) {\n          throw new import_error.GenkitError({\n            status: \"UNAVAILABLE\",\n            message: `${config.name} does not support cancellation.`\n          });\n        }\n        const operation = await config.cancel(input);\n        operation.action = `/${config.actionType}/${config.name}`;\n        return operation;\n      }\n    );\n  }\n  return new BackgroundActionImpl(startAction, checkAction, cancelAction);\n}\nfunction isBackgroundAction(a) {\n  return a instanceof BackgroundActionImpl;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=background-action.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/background-action.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/context.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/context.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar context_exports = {};\n__export(context_exports, {\n  apiKey: () => apiKey,\n  getContext: () => getContext,\n  runWithContext: () => runWithContext\n});\nmodule.exports = __toCommonJS(context_exports);\nvar import_action = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\nvar import_async_context = __webpack_require__(/*! ./async-context.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async-context.js\");\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nconst contextAlsKey = \"core.auth.context\";\nfunction runWithContext(context, fn) {\n  if (context === void 0) {\n    return fn();\n  }\n  return (0, import_async_context.getAsyncContext)().run(\n    contextAlsKey,\n    context,\n    () => (0, import_action.runInActionRuntimeContext)(fn)\n  );\n}\nfunction getContext() {\n  return (0, import_async_context.getAsyncContext)().getStore(contextAlsKey);\n}\nfunction apiKey(valueOrPolicy) {\n  return async (request) => {\n    const context = {\n      auth: { apiKey: request.headers[\"authorization\"] }\n    };\n    if (typeof valueOrPolicy === \"string\") {\n      if (!context.auth?.apiKey) {\n        console.error(\"THROWING UNAUTHENTICATED\");\n        throw new import_error.UserFacingError(\"UNAUTHENTICATED\", \"Unauthenticated\");\n      }\n      if (context.auth?.apiKey != valueOrPolicy) {\n        console.error(\"Throwing PERMISSION_DENIED\");\n        throw new import_error.UserFacingError(\"PERMISSION_DENIED\", \"Permission Denied\");\n      }\n    } else if (typeof valueOrPolicy === \"function\") {\n      await valueOrPolicy(context);\n    } else if (typeof valueOrPolicy !== \"undefined\") {\n      throw new Error(\n        `Invalid type ${typeof valueOrPolicy} passed to apiKey()`\n      );\n    }\n    return context;\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=context.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2NvbnRleHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esb0JBQW9CLG1CQUFPLENBQUMsa0ZBQWE7QUFDekMsMkJBQTJCLG1CQUFPLENBQUMsZ0dBQW9CO0FBQ3ZELG1CQUFtQixtQkFBTyxDQUFDLGdGQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQSx3QkFBd0Isc0JBQXNCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FJTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1qcy1hcHAvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9jb250ZXh0LmpzPzM4ZTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGNvbnRleHRfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoY29udGV4dF9leHBvcnRzLCB7XG4gIGFwaUtleTogKCkgPT4gYXBpS2V5LFxuICBnZXRDb250ZXh0OiAoKSA9PiBnZXRDb250ZXh0LFxuICBydW5XaXRoQ29udGV4dDogKCkgPT4gcnVuV2l0aENvbnRleHRcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoY29udGV4dF9leHBvcnRzKTtcbnZhciBpbXBvcnRfYWN0aW9uID0gcmVxdWlyZShcIi4vYWN0aW9uLmpzXCIpO1xudmFyIGltcG9ydF9hc3luY19jb250ZXh0ID0gcmVxdWlyZShcIi4vYXN5bmMtY29udGV4dC5qc1wiKTtcbnZhciBpbXBvcnRfZXJyb3IgPSByZXF1aXJlKFwiLi9lcnJvci5qc1wiKTtcbmNvbnN0IGNvbnRleHRBbHNLZXkgPSBcImNvcmUuYXV0aC5jb250ZXh0XCI7XG5mdW5jdGlvbiBydW5XaXRoQ29udGV4dChjb250ZXh0LCBmbikge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuIGZuKCk7XG4gIH1cbiAgcmV0dXJuICgwLCBpbXBvcnRfYXN5bmNfY29udGV4dC5nZXRBc3luY0NvbnRleHQpKCkucnVuKFxuICAgIGNvbnRleHRBbHNLZXksXG4gICAgY29udGV4dCxcbiAgICAoKSA9PiAoMCwgaW1wb3J0X2FjdGlvbi5ydW5JbkFjdGlvblJ1bnRpbWVDb250ZXh0KShmbilcbiAgKTtcbn1cbmZ1bmN0aW9uIGdldENvbnRleHQoKSB7XG4gIHJldHVybiAoMCwgaW1wb3J0X2FzeW5jX2NvbnRleHQuZ2V0QXN5bmNDb250ZXh0KSgpLmdldFN0b3JlKGNvbnRleHRBbHNLZXkpO1xufVxuZnVuY3Rpb24gYXBpS2V5KHZhbHVlT3JQb2xpY3kpIHtcbiAgcmV0dXJuIGFzeW5jIChyZXF1ZXN0KSA9PiB7XG4gICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgIGF1dGg6IHsgYXBpS2V5OiByZXF1ZXN0LmhlYWRlcnNbXCJhdXRob3JpemF0aW9uXCJdIH1cbiAgICB9O1xuICAgIGlmICh0eXBlb2YgdmFsdWVPclBvbGljeSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgaWYgKCFjb250ZXh0LmF1dGg/LmFwaUtleSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVEhST1dJTkcgVU5BVVRIRU5USUNBVEVEXCIpO1xuICAgICAgICB0aHJvdyBuZXcgaW1wb3J0X2Vycm9yLlVzZXJGYWNpbmdFcnJvcihcIlVOQVVUSEVOVElDQVRFRFwiLCBcIlVuYXV0aGVudGljYXRlZFwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb250ZXh0LmF1dGg/LmFwaUtleSAhPSB2YWx1ZU9yUG9saWN5KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaHJvd2luZyBQRVJNSVNTSU9OX0RFTklFRFwiKTtcbiAgICAgICAgdGhyb3cgbmV3IGltcG9ydF9lcnJvci5Vc2VyRmFjaW5nRXJyb3IoXCJQRVJNSVNTSU9OX0RFTklFRFwiLCBcIlBlcm1pc3Npb24gRGVuaWVkXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlT3JQb2xpY3kgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgYXdhaXQgdmFsdWVPclBvbGljeShjb250ZXh0KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZU9yUG9saWN5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBJbnZhbGlkIHR5cGUgJHt0eXBlb2YgdmFsdWVPclBvbGljeX0gcGFzc2VkIHRvIGFwaUtleSgpYFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRleHQ7XG4gIH07XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXBpS2V5LFxuICBnZXRDb250ZXh0LFxuICBydW5XaXRoQ29udGV4dFxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZXh0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/context.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/error.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/error.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar error_exports = {};\n__export(error_exports, {\n  GenkitError: () => GenkitError,\n  UnstableApiError: () => UnstableApiError,\n  UserFacingError: () => UserFacingError,\n  assertUnstable: () => assertUnstable,\n  getCallableJSON: () => getCallableJSON,\n  getErrorMessage: () => getErrorMessage,\n  getErrorStack: () => getErrorStack,\n  getHttpStatus: () => getHttpStatus\n});\nmodule.exports = __toCommonJS(error_exports);\nvar import_statusTypes = __webpack_require__(/*! ./statusTypes.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/statusTypes.js\");\nclass GenkitError extends Error {\n  source;\n  status;\n  detail;\n  code;\n  // For easy printing, we wrap the error with information like the source\n  // and status, but that's redundant with JSON.\n  originalMessage;\n  constructor({\n    status,\n    message,\n    detail,\n    source\n  }) {\n    super(`${source ? `${source}: ` : \"\"}${status}: ${message}`);\n    this.originalMessage = message;\n    this.code = (0, import_statusTypes.httpStatusCode)(status);\n    this.status = status;\n    this.detail = detail;\n    this.name = \"GenkitError\";\n  }\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON() {\n    return {\n      // This error type is used by 3P authors with the field \"detail\",\n      // but the actual Callable protocol value is \"details\"\n      ...this.detail === void 0 ? {} : { details: this.detail },\n      status: this.status,\n      message: this.originalMessage\n    };\n  }\n}\nclass UnstableApiError extends GenkitError {\n  constructor(level, message) {\n    super({\n      status: \"FAILED_PRECONDITION\",\n      message: `${message ? message + \" \" : \"\"}This API requires '${level}' stability level.\n\nTo use this feature, initialize Genkit using \\`import {genkit} from \"genkit/${level}\"\\`.`\n    });\n    this.name = \"UnstableApiError\";\n  }\n}\nfunction assertUnstable(registry, level, message) {\n  if (level === \"beta\" && registry.apiStability === \"stable\") {\n    throw new UnstableApiError(level, message);\n  }\n}\nclass UserFacingError extends GenkitError {\n  constructor(status, message, details) {\n    super({ status, detail: details, message });\n    super.name = \"UserFacingError\";\n  }\n}\nfunction getHttpStatus(e) {\n  if (e instanceof GenkitError) {\n    return e.code;\n  }\n  return 500;\n}\nfunction getCallableJSON(e) {\n  if (e instanceof GenkitError) {\n    return e.toJSON();\n  }\n  return {\n    message: \"Internal Error\",\n    status: \"INTERNAL\"\n  };\n}\nfunction getErrorMessage(e) {\n  if (e instanceof Error) {\n    return e.message;\n  }\n  return `${e}`;\n}\nfunction getErrorStack(e) {\n  if (e instanceof Error) {\n    return e.stack;\n  }\n  return void 0;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2Vycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSx5QkFBeUIsbUJBQU8sQ0FBQyw0RkFBa0I7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsYUFBYSxZQUFZLE9BQU8sU0FBUyxFQUFFLE9BQU8sSUFBSSxRQUFRO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLElBQUksc0JBQXNCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiw2QkFBNkIscUJBQXFCLE1BQU07O0FBRTFFLHVEQUF1RCxRQUFRLGVBQWUsTUFBTTtBQUNwRixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGtDQUFrQztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksRUFBRTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBU0w7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtanMtYXBwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvZXJyb3IuanM/YjI1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgZXJyb3JfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoZXJyb3JfZXhwb3J0cywge1xuICBHZW5raXRFcnJvcjogKCkgPT4gR2Vua2l0RXJyb3IsXG4gIFVuc3RhYmxlQXBpRXJyb3I6ICgpID0+IFVuc3RhYmxlQXBpRXJyb3IsXG4gIFVzZXJGYWNpbmdFcnJvcjogKCkgPT4gVXNlckZhY2luZ0Vycm9yLFxuICBhc3NlcnRVbnN0YWJsZTogKCkgPT4gYXNzZXJ0VW5zdGFibGUsXG4gIGdldENhbGxhYmxlSlNPTjogKCkgPT4gZ2V0Q2FsbGFibGVKU09OLFxuICBnZXRFcnJvck1lc3NhZ2U6ICgpID0+IGdldEVycm9yTWVzc2FnZSxcbiAgZ2V0RXJyb3JTdGFjazogKCkgPT4gZ2V0RXJyb3JTdGFjayxcbiAgZ2V0SHR0cFN0YXR1czogKCkgPT4gZ2V0SHR0cFN0YXR1c1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhlcnJvcl9leHBvcnRzKTtcbnZhciBpbXBvcnRfc3RhdHVzVHlwZXMgPSByZXF1aXJlKFwiLi9zdGF0dXNUeXBlcy5qc1wiKTtcbmNsYXNzIEdlbmtpdEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBzb3VyY2U7XG4gIHN0YXR1cztcbiAgZGV0YWlsO1xuICBjb2RlO1xuICAvLyBGb3IgZWFzeSBwcmludGluZywgd2Ugd3JhcCB0aGUgZXJyb3Igd2l0aCBpbmZvcm1hdGlvbiBsaWtlIHRoZSBzb3VyY2VcbiAgLy8gYW5kIHN0YXR1cywgYnV0IHRoYXQncyByZWR1bmRhbnQgd2l0aCBKU09OLlxuICBvcmlnaW5hbE1lc3NhZ2U7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICBzdGF0dXMsXG4gICAgbWVzc2FnZSxcbiAgICBkZXRhaWwsXG4gICAgc291cmNlXG4gIH0pIHtcbiAgICBzdXBlcihgJHtzb3VyY2UgPyBgJHtzb3VyY2V9OiBgIDogXCJcIn0ke3N0YXR1c306ICR7bWVzc2FnZX1gKTtcbiAgICB0aGlzLm9yaWdpbmFsTWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5jb2RlID0gKDAsIGltcG9ydF9zdGF0dXNUeXBlcy5odHRwU3RhdHVzQ29kZSkoc3RhdHVzKTtcbiAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICB0aGlzLmRldGFpbCA9IGRldGFpbDtcbiAgICB0aGlzLm5hbWUgPSBcIkdlbmtpdEVycm9yXCI7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBKU09OLXNlcmlhbGl6YWJsZSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIG9iamVjdC5cbiAgICovXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gVGhpcyBlcnJvciB0eXBlIGlzIHVzZWQgYnkgM1AgYXV0aG9ycyB3aXRoIHRoZSBmaWVsZCBcImRldGFpbFwiLFxuICAgICAgLy8gYnV0IHRoZSBhY3R1YWwgQ2FsbGFibGUgcHJvdG9jb2wgdmFsdWUgaXMgXCJkZXRhaWxzXCJcbiAgICAgIC4uLnRoaXMuZGV0YWlsID09PSB2b2lkIDAgPyB7fSA6IHsgZGV0YWlsczogdGhpcy5kZXRhaWwgfSxcbiAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgICBtZXNzYWdlOiB0aGlzLm9yaWdpbmFsTWVzc2FnZVxuICAgIH07XG4gIH1cbn1cbmNsYXNzIFVuc3RhYmxlQXBpRXJyb3IgZXh0ZW5kcyBHZW5raXRFcnJvciB7XG4gIGNvbnN0cnVjdG9yKGxldmVsLCBtZXNzYWdlKSB7XG4gICAgc3VwZXIoe1xuICAgICAgc3RhdHVzOiBcIkZBSUxFRF9QUkVDT05ESVRJT05cIixcbiAgICAgIG1lc3NhZ2U6IGAke21lc3NhZ2UgPyBtZXNzYWdlICsgXCIgXCIgOiBcIlwifVRoaXMgQVBJIHJlcXVpcmVzICcke2xldmVsfScgc3RhYmlsaXR5IGxldmVsLlxuXG5UbyB1c2UgdGhpcyBmZWF0dXJlLCBpbml0aWFsaXplIEdlbmtpdCB1c2luZyBcXGBpbXBvcnQge2dlbmtpdH0gZnJvbSBcImdlbmtpdC8ke2xldmVsfVwiXFxgLmBcbiAgICB9KTtcbiAgICB0aGlzLm5hbWUgPSBcIlVuc3RhYmxlQXBpRXJyb3JcIjtcbiAgfVxufVxuZnVuY3Rpb24gYXNzZXJ0VW5zdGFibGUocmVnaXN0cnksIGxldmVsLCBtZXNzYWdlKSB7XG4gIGlmIChsZXZlbCA9PT0gXCJiZXRhXCIgJiYgcmVnaXN0cnkuYXBpU3RhYmlsaXR5ID09PSBcInN0YWJsZVwiKSB7XG4gICAgdGhyb3cgbmV3IFVuc3RhYmxlQXBpRXJyb3IobGV2ZWwsIG1lc3NhZ2UpO1xuICB9XG59XG5jbGFzcyBVc2VyRmFjaW5nRXJyb3IgZXh0ZW5kcyBHZW5raXRFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHN0YXR1cywgbWVzc2FnZSwgZGV0YWlscykge1xuICAgIHN1cGVyKHsgc3RhdHVzLCBkZXRhaWw6IGRldGFpbHMsIG1lc3NhZ2UgfSk7XG4gICAgc3VwZXIubmFtZSA9IFwiVXNlckZhY2luZ0Vycm9yXCI7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEh0dHBTdGF0dXMoZSkge1xuICBpZiAoZSBpbnN0YW5jZW9mIEdlbmtpdEVycm9yKSB7XG4gICAgcmV0dXJuIGUuY29kZTtcbiAgfVxuICByZXR1cm4gNTAwO1xufVxuZnVuY3Rpb24gZ2V0Q2FsbGFibGVKU09OKGUpIHtcbiAgaWYgKGUgaW5zdGFuY2VvZiBHZW5raXRFcnJvcikge1xuICAgIHJldHVybiBlLnRvSlNPTigpO1xuICB9XG4gIHJldHVybiB7XG4gICAgbWVzc2FnZTogXCJJbnRlcm5hbCBFcnJvclwiLFxuICAgIHN0YXR1czogXCJJTlRFUk5BTFwiXG4gIH07XG59XG5mdW5jdGlvbiBnZXRFcnJvck1lc3NhZ2UoZSkge1xuICBpZiAoZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIGUubWVzc2FnZTtcbiAgfVxuICByZXR1cm4gYCR7ZX1gO1xufVxuZnVuY3Rpb24gZ2V0RXJyb3JTdGFjayhlKSB7XG4gIGlmIChlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gZS5zdGFjaztcbiAgfVxuICByZXR1cm4gdm9pZCAwO1xufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIEdlbmtpdEVycm9yLFxuICBVbnN0YWJsZUFwaUVycm9yLFxuICBVc2VyRmFjaW5nRXJyb3IsXG4gIGFzc2VydFVuc3RhYmxlLFxuICBnZXRDYWxsYWJsZUpTT04sXG4gIGdldEVycm9yTWVzc2FnZSxcbiAgZ2V0RXJyb3JTdGFjayxcbiAgZ2V0SHR0cFN0YXR1c1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/flow.js":
/*!**************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/flow.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar flow_exports = {};\n__export(flow_exports, {\n  defineFlow: () => defineFlow,\n  flow: () => flow,\n  run: () => run\n});\nmodule.exports = __toCommonJS(flow_exports);\nvar import_action = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\nvar import_tracing = __webpack_require__(/*! ./tracing.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nfunction flow(config, fn) {\n  const resolvedConfig = typeof config === \"string\" ? { name: config } : config;\n  return flowAction(resolvedConfig, fn);\n}\nfunction defineFlow(registry, config, fn) {\n  const f = flow(config, fn);\n  registry.registerAction(\"flow\", f);\n  return f;\n}\nfunction flowAction(config, fn) {\n  return (0, import_action.action)(\n    {\n      actionType: \"flow\",\n      name: config.name,\n      inputSchema: config.inputSchema,\n      outputSchema: config.outputSchema,\n      streamSchema: config.streamSchema,\n      metadata: config.metadata\n    },\n    async (input, { sendChunk, context, trace, abortSignal, streamingRequested }) => {\n      const ctx = sendChunk;\n      ctx.sendChunk = sendChunk;\n      ctx.context = context;\n      ctx.trace = trace;\n      ctx.abortSignal = abortSignal;\n      ctx.streamingRequested = streamingRequested;\n      return fn(input, ctx);\n    }\n  );\n}\nfunction run(name, funcOrInput, fnOrRegistry, _) {\n  let func;\n  let input;\n  let hasInput = false;\n  if (typeof funcOrInput === \"function\") {\n    func = funcOrInput;\n  } else {\n    input = funcOrInput;\n    hasInput = true;\n  }\n  if (typeof fnOrRegistry === \"function\") {\n    func = fnOrRegistry;\n  }\n  if (!func) {\n    throw new Error(\"unable to resolve run function\");\n  }\n  return (0, import_tracing.runInNewSpan)(\n    {\n      metadata: { name },\n      labels: {\n        [import_tracing.SPAN_TYPE_ATTR]: \"flowStep\"\n      }\n    },\n    async (meta) => {\n      meta.input = input;\n      const output = hasInput ? await func(input) : await func();\n      meta.output = JSON.stringify(output);\n      return output;\n    }\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=flow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2Zsb3cuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esb0JBQW9CLG1CQUFPLENBQUMsa0ZBQWE7QUFDekMscUJBQXFCLG1CQUFPLENBQUMsb0ZBQWM7QUFDM0M7QUFDQSx3REFBd0QsZUFBZTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxvQkFBb0IsNERBQTREO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsTUFBTTtBQUN4QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUlMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWpzLWFwcC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2Zsb3cuanM/YTllYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgZmxvd19leHBvcnRzID0ge307XG5fX2V4cG9ydChmbG93X2V4cG9ydHMsIHtcbiAgZGVmaW5lRmxvdzogKCkgPT4gZGVmaW5lRmxvdyxcbiAgZmxvdzogKCkgPT4gZmxvdyxcbiAgcnVuOiAoKSA9PiBydW5cbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoZmxvd19leHBvcnRzKTtcbnZhciBpbXBvcnRfYWN0aW9uID0gcmVxdWlyZShcIi4vYWN0aW9uLmpzXCIpO1xudmFyIGltcG9ydF90cmFjaW5nID0gcmVxdWlyZShcIi4vdHJhY2luZy5qc1wiKTtcbmZ1bmN0aW9uIGZsb3coY29uZmlnLCBmbikge1xuICBjb25zdCByZXNvbHZlZENvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09IFwic3RyaW5nXCIgPyB7IG5hbWU6IGNvbmZpZyB9IDogY29uZmlnO1xuICByZXR1cm4gZmxvd0FjdGlvbihyZXNvbHZlZENvbmZpZywgZm4pO1xufVxuZnVuY3Rpb24gZGVmaW5lRmxvdyhyZWdpc3RyeSwgY29uZmlnLCBmbikge1xuICBjb25zdCBmID0gZmxvdyhjb25maWcsIGZuKTtcbiAgcmVnaXN0cnkucmVnaXN0ZXJBY3Rpb24oXCJmbG93XCIsIGYpO1xuICByZXR1cm4gZjtcbn1cbmZ1bmN0aW9uIGZsb3dBY3Rpb24oY29uZmlnLCBmbikge1xuICByZXR1cm4gKDAsIGltcG9ydF9hY3Rpb24uYWN0aW9uKShcbiAgICB7XG4gICAgICBhY3Rpb25UeXBlOiBcImZsb3dcIixcbiAgICAgIG5hbWU6IGNvbmZpZy5uYW1lLFxuICAgICAgaW5wdXRTY2hlbWE6IGNvbmZpZy5pbnB1dFNjaGVtYSxcbiAgICAgIG91dHB1dFNjaGVtYTogY29uZmlnLm91dHB1dFNjaGVtYSxcbiAgICAgIHN0cmVhbVNjaGVtYTogY29uZmlnLnN0cmVhbVNjaGVtYSxcbiAgICAgIG1ldGFkYXRhOiBjb25maWcubWV0YWRhdGFcbiAgICB9LFxuICAgIGFzeW5jIChpbnB1dCwgeyBzZW5kQ2h1bmssIGNvbnRleHQsIHRyYWNlLCBhYm9ydFNpZ25hbCwgc3RyZWFtaW5nUmVxdWVzdGVkIH0pID0+IHtcbiAgICAgIGNvbnN0IGN0eCA9IHNlbmRDaHVuaztcbiAgICAgIGN0eC5zZW5kQ2h1bmsgPSBzZW5kQ2h1bms7XG4gICAgICBjdHguY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICBjdHgudHJhY2UgPSB0cmFjZTtcbiAgICAgIGN0eC5hYm9ydFNpZ25hbCA9IGFib3J0U2lnbmFsO1xuICAgICAgY3R4LnN0cmVhbWluZ1JlcXVlc3RlZCA9IHN0cmVhbWluZ1JlcXVlc3RlZDtcbiAgICAgIHJldHVybiBmbihpbnB1dCwgY3R4KTtcbiAgICB9XG4gICk7XG59XG5mdW5jdGlvbiBydW4obmFtZSwgZnVuY09ySW5wdXQsIGZuT3JSZWdpc3RyeSwgXykge1xuICBsZXQgZnVuYztcbiAgbGV0IGlucHV0O1xuICBsZXQgaGFzSW5wdXQgPSBmYWxzZTtcbiAgaWYgKHR5cGVvZiBmdW5jT3JJbnB1dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZnVuYyA9IGZ1bmNPcklucHV0O1xuICB9IGVsc2Uge1xuICAgIGlucHV0ID0gZnVuY09ySW5wdXQ7XG4gICAgaGFzSW5wdXQgPSB0cnVlO1xuICB9XG4gIGlmICh0eXBlb2YgZm5PclJlZ2lzdHJ5ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmdW5jID0gZm5PclJlZ2lzdHJ5O1xuICB9XG4gIGlmICghZnVuYykge1xuICAgIHRocm93IG5ldyBFcnJvcihcInVuYWJsZSB0byByZXNvbHZlIHJ1biBmdW5jdGlvblwiKTtcbiAgfVxuICByZXR1cm4gKDAsIGltcG9ydF90cmFjaW5nLnJ1bkluTmV3U3BhbikoXG4gICAge1xuICAgICAgbWV0YWRhdGE6IHsgbmFtZSB9LFxuICAgICAgbGFiZWxzOiB7XG4gICAgICAgIFtpbXBvcnRfdHJhY2luZy5TUEFOX1RZUEVfQVRUUl06IFwiZmxvd1N0ZXBcIlxuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgKG1ldGEpID0+IHtcbiAgICAgIG1ldGEuaW5wdXQgPSBpbnB1dDtcbiAgICAgIGNvbnN0IG91dHB1dCA9IGhhc0lucHV0ID8gYXdhaXQgZnVuYyhpbnB1dCkgOiBhd2FpdCBmdW5jKCk7XG4gICAgICBtZXRhLm91dHB1dCA9IEpTT04uc3RyaW5naWZ5KG91dHB1dCk7XG4gICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbiAgKTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBkZWZpbmVGbG93LFxuICBmbG93LFxuICBydW5cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zmxvdy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/flow.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar index_exports = {};\n__export(index_exports, {\n  GENKIT_CLIENT_HEADER: () => GENKIT_CLIENT_HEADER,\n  GENKIT_REFLECTION_API_SPEC_VERSION: () => GENKIT_REFLECTION_API_SPEC_VERSION,\n  GENKIT_VERSION: () => GENKIT_VERSION,\n  GenkitError: () => import_error.GenkitError,\n  OperationSchema: () => import_background_action.OperationSchema,\n  UnstableApiError: () => import_error.UnstableApiError,\n  UserFacingError: () => import_error.UserFacingError,\n  apiKey: () => import_context.apiKey,\n  assertUnstable: () => import_error.assertUnstable,\n  backgroundAction: () => import_background_action.backgroundAction,\n  defineBackgroundAction: () => import_background_action.defineBackgroundAction,\n  defineFlow: () => import_flow.defineFlow,\n  defineJsonSchema: () => import_schema.defineJsonSchema,\n  defineSchema: () => import_schema.defineSchema,\n  flow: () => import_flow.flow,\n  getAsyncContext: () => import_async_context.getAsyncContext,\n  getCallableJSON: () => import_error.getCallableJSON,\n  getClientHeader: () => getClientHeader,\n  getContext: () => import_context.getContext,\n  getHttpStatus: () => import_error.getHttpStatus,\n  isBackgroundAction: () => import_background_action.isBackgroundAction,\n  registerBackgroundAction: () => import_background_action.registerBackgroundAction,\n  run: () => import_flow.run,\n  runWithContext: () => import_context.runWithContext,\n  setClientHeader: () => setClientHeader,\n  z: () => import_zod.z\n});\nmodule.exports = __toCommonJS(index_exports);\nvar import_version = __webpack_require__(/*! ./__codegen/version.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/__codegen/version.js\");\nvar import_zod = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/lib/index.js\");\n__reExport(index_exports, __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\"), module.exports);\nvar import_async_context = __webpack_require__(/*! ./async-context.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async-context.js\");\nvar import_background_action = __webpack_require__(/*! ./background-action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/background-action.js\");\nvar import_context = __webpack_require__(/*! ./context.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/context.js\");\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nvar import_flow = __webpack_require__(/*! ./flow.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/flow.js\");\n__reExport(index_exports, __webpack_require__(/*! ./plugin.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/plugin.js\"), module.exports);\n__reExport(index_exports, __webpack_require__(/*! ./reflection.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/reflection.js\"), module.exports);\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\n__reExport(index_exports, __webpack_require__(/*! ./telemetryTypes.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/telemetryTypes.js\"), module.exports);\n__reExport(index_exports, __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js\"), module.exports);\nconst GENKIT_VERSION = import_version.version;\nconst GENKIT_CLIENT_HEADER = `genkit-node/${GENKIT_VERSION} gl-node/${process.versions.node}`;\nconst GENKIT_REFLECTION_API_SPEC_VERSION = 1;\nconst clientHeaderGlobalKey = \"__genkit_ClientHeader\";\nfunction getClientHeader() {\n  if (global[clientHeaderGlobalKey]) {\n    return GENKIT_CLIENT_HEADER + \" \" + global[clientHeaderGlobalKey];\n  }\n  return GENKIT_CLIENT_HEADER;\n}\nfunction setClientHeader(header) {\n  global[clientHeaderGlobalKey] = header;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLHFCQUFxQixtQkFBTyxDQUFDLHdHQUF3QjtBQUNyRCxpQkFBaUIsbUJBQU8sQ0FBQyw2REFBSztBQUM5QiwwQkFBMEIsbUJBQU8sQ0FBQyxrRkFBYTtBQUMvQywyQkFBMkIsbUJBQU8sQ0FBQyxnR0FBb0I7QUFDdkQsK0JBQStCLG1CQUFPLENBQUMsd0dBQXdCO0FBQy9ELHFCQUFxQixtQkFBTyxDQUFDLG9GQUFjO0FBQzNDLG1CQUFtQixtQkFBTyxDQUFDLGdGQUFZO0FBQ3ZDLGtCQUFrQixtQkFBTyxDQUFDLDhFQUFXO0FBQ3JDLDBCQUEwQixtQkFBTyxDQUFDLGtGQUFhO0FBQy9DLDBCQUEwQixtQkFBTyxDQUFDLDBGQUFpQjtBQUNuRCxvQkFBb0IsbUJBQU8sQ0FBQyxrRkFBYTtBQUN6QywwQkFBMEIsbUJBQU8sQ0FBQyxrR0FBcUI7QUFDdkQsMEJBQTBCLG1CQUFPLENBQUMsZ0ZBQVk7QUFDOUM7QUFDQSw0Q0FBNEMsZ0JBQWdCLFVBQVUsc0JBQXNCO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FnQ0w7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtanMtYXBwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvaW5kZXguanM/NGVhYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fcmVFeHBvcnQgPSAodGFyZ2V0LCBtb2QsIHNlY29uZFRhcmdldCkgPT4gKF9fY29weVByb3BzKHRhcmdldCwgbW9kLCBcImRlZmF1bHRcIiksIHNlY29uZFRhcmdldCAmJiBfX2NvcHlQcm9wcyhzZWNvbmRUYXJnZXQsIG1vZCwgXCJkZWZhdWx0XCIpKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGluZGV4X2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGluZGV4X2V4cG9ydHMsIHtcbiAgR0VOS0lUX0NMSUVOVF9IRUFERVI6ICgpID0+IEdFTktJVF9DTElFTlRfSEVBREVSLFxuICBHRU5LSVRfUkVGTEVDVElPTl9BUElfU1BFQ19WRVJTSU9OOiAoKSA9PiBHRU5LSVRfUkVGTEVDVElPTl9BUElfU1BFQ19WRVJTSU9OLFxuICBHRU5LSVRfVkVSU0lPTjogKCkgPT4gR0VOS0lUX1ZFUlNJT04sXG4gIEdlbmtpdEVycm9yOiAoKSA9PiBpbXBvcnRfZXJyb3IuR2Vua2l0RXJyb3IsXG4gIE9wZXJhdGlvblNjaGVtYTogKCkgPT4gaW1wb3J0X2JhY2tncm91bmRfYWN0aW9uLk9wZXJhdGlvblNjaGVtYSxcbiAgVW5zdGFibGVBcGlFcnJvcjogKCkgPT4gaW1wb3J0X2Vycm9yLlVuc3RhYmxlQXBpRXJyb3IsXG4gIFVzZXJGYWNpbmdFcnJvcjogKCkgPT4gaW1wb3J0X2Vycm9yLlVzZXJGYWNpbmdFcnJvcixcbiAgYXBpS2V5OiAoKSA9PiBpbXBvcnRfY29udGV4dC5hcGlLZXksXG4gIGFzc2VydFVuc3RhYmxlOiAoKSA9PiBpbXBvcnRfZXJyb3IuYXNzZXJ0VW5zdGFibGUsXG4gIGJhY2tncm91bmRBY3Rpb246ICgpID0+IGltcG9ydF9iYWNrZ3JvdW5kX2FjdGlvbi5iYWNrZ3JvdW5kQWN0aW9uLFxuICBkZWZpbmVCYWNrZ3JvdW5kQWN0aW9uOiAoKSA9PiBpbXBvcnRfYmFja2dyb3VuZF9hY3Rpb24uZGVmaW5lQmFja2dyb3VuZEFjdGlvbixcbiAgZGVmaW5lRmxvdzogKCkgPT4gaW1wb3J0X2Zsb3cuZGVmaW5lRmxvdyxcbiAgZGVmaW5lSnNvblNjaGVtYTogKCkgPT4gaW1wb3J0X3NjaGVtYS5kZWZpbmVKc29uU2NoZW1hLFxuICBkZWZpbmVTY2hlbWE6ICgpID0+IGltcG9ydF9zY2hlbWEuZGVmaW5lU2NoZW1hLFxuICBmbG93OiAoKSA9PiBpbXBvcnRfZmxvdy5mbG93LFxuICBnZXRBc3luY0NvbnRleHQ6ICgpID0+IGltcG9ydF9hc3luY19jb250ZXh0LmdldEFzeW5jQ29udGV4dCxcbiAgZ2V0Q2FsbGFibGVKU09OOiAoKSA9PiBpbXBvcnRfZXJyb3IuZ2V0Q2FsbGFibGVKU09OLFxuICBnZXRDbGllbnRIZWFkZXI6ICgpID0+IGdldENsaWVudEhlYWRlcixcbiAgZ2V0Q29udGV4dDogKCkgPT4gaW1wb3J0X2NvbnRleHQuZ2V0Q29udGV4dCxcbiAgZ2V0SHR0cFN0YXR1czogKCkgPT4gaW1wb3J0X2Vycm9yLmdldEh0dHBTdGF0dXMsXG4gIGlzQmFja2dyb3VuZEFjdGlvbjogKCkgPT4gaW1wb3J0X2JhY2tncm91bmRfYWN0aW9uLmlzQmFja2dyb3VuZEFjdGlvbixcbiAgcmVnaXN0ZXJCYWNrZ3JvdW5kQWN0aW9uOiAoKSA9PiBpbXBvcnRfYmFja2dyb3VuZF9hY3Rpb24ucmVnaXN0ZXJCYWNrZ3JvdW5kQWN0aW9uLFxuICBydW46ICgpID0+IGltcG9ydF9mbG93LnJ1bixcbiAgcnVuV2l0aENvbnRleHQ6ICgpID0+IGltcG9ydF9jb250ZXh0LnJ1bldpdGhDb250ZXh0LFxuICBzZXRDbGllbnRIZWFkZXI6ICgpID0+IHNldENsaWVudEhlYWRlcixcbiAgejogKCkgPT4gaW1wb3J0X3pvZC56XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGluZGV4X2V4cG9ydHMpO1xudmFyIGltcG9ydF92ZXJzaW9uID0gcmVxdWlyZShcIi4vX19jb2RlZ2VuL3ZlcnNpb24uanNcIik7XG52YXIgaW1wb3J0X3pvZCA9IHJlcXVpcmUoXCJ6b2RcIik7XG5fX3JlRXhwb3J0KGluZGV4X2V4cG9ydHMsIHJlcXVpcmUoXCIuL2FjdGlvbi5qc1wiKSwgbW9kdWxlLmV4cG9ydHMpO1xudmFyIGltcG9ydF9hc3luY19jb250ZXh0ID0gcmVxdWlyZShcIi4vYXN5bmMtY29udGV4dC5qc1wiKTtcbnZhciBpbXBvcnRfYmFja2dyb3VuZF9hY3Rpb24gPSByZXF1aXJlKFwiLi9iYWNrZ3JvdW5kLWFjdGlvbi5qc1wiKTtcbnZhciBpbXBvcnRfY29udGV4dCA9IHJlcXVpcmUoXCIuL2NvbnRleHQuanNcIik7XG52YXIgaW1wb3J0X2Vycm9yID0gcmVxdWlyZShcIi4vZXJyb3IuanNcIik7XG52YXIgaW1wb3J0X2Zsb3cgPSByZXF1aXJlKFwiLi9mbG93LmpzXCIpO1xuX19yZUV4cG9ydChpbmRleF9leHBvcnRzLCByZXF1aXJlKFwiLi9wbHVnaW4uanNcIiksIG1vZHVsZS5leHBvcnRzKTtcbl9fcmVFeHBvcnQoaW5kZXhfZXhwb3J0cywgcmVxdWlyZShcIi4vcmVmbGVjdGlvbi5qc1wiKSwgbW9kdWxlLmV4cG9ydHMpO1xudmFyIGltcG9ydF9zY2hlbWEgPSByZXF1aXJlKFwiLi9zY2hlbWEuanNcIik7XG5fX3JlRXhwb3J0KGluZGV4X2V4cG9ydHMsIHJlcXVpcmUoXCIuL3RlbGVtZXRyeVR5cGVzLmpzXCIpLCBtb2R1bGUuZXhwb3J0cyk7XG5fX3JlRXhwb3J0KGluZGV4X2V4cG9ydHMsIHJlcXVpcmUoXCIuL3V0aWxzLmpzXCIpLCBtb2R1bGUuZXhwb3J0cyk7XG5jb25zdCBHRU5LSVRfVkVSU0lPTiA9IGltcG9ydF92ZXJzaW9uLnZlcnNpb247XG5jb25zdCBHRU5LSVRfQ0xJRU5UX0hFQURFUiA9IGBnZW5raXQtbm9kZS8ke0dFTktJVF9WRVJTSU9OfSBnbC1ub2RlLyR7cHJvY2Vzcy52ZXJzaW9ucy5ub2RlfWA7XG5jb25zdCBHRU5LSVRfUkVGTEVDVElPTl9BUElfU1BFQ19WRVJTSU9OID0gMTtcbmNvbnN0IGNsaWVudEhlYWRlckdsb2JhbEtleSA9IFwiX19nZW5raXRfQ2xpZW50SGVhZGVyXCI7XG5mdW5jdGlvbiBnZXRDbGllbnRIZWFkZXIoKSB7XG4gIGlmIChnbG9iYWxbY2xpZW50SGVhZGVyR2xvYmFsS2V5XSkge1xuICAgIHJldHVybiBHRU5LSVRfQ0xJRU5UX0hFQURFUiArIFwiIFwiICsgZ2xvYmFsW2NsaWVudEhlYWRlckdsb2JhbEtleV07XG4gIH1cbiAgcmV0dXJuIEdFTktJVF9DTElFTlRfSEVBREVSO1xufVxuZnVuY3Rpb24gc2V0Q2xpZW50SGVhZGVyKGhlYWRlcikge1xuICBnbG9iYWxbY2xpZW50SGVhZGVyR2xvYmFsS2V5XSA9IGhlYWRlcjtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBHRU5LSVRfQ0xJRU5UX0hFQURFUixcbiAgR0VOS0lUX1JFRkxFQ1RJT05fQVBJX1NQRUNfVkVSU0lPTixcbiAgR0VOS0lUX1ZFUlNJT04sXG4gIEdlbmtpdEVycm9yLFxuICBPcGVyYXRpb25TY2hlbWEsXG4gIFVuc3RhYmxlQXBpRXJyb3IsXG4gIFVzZXJGYWNpbmdFcnJvcixcbiAgYXBpS2V5LFxuICBhc3NlcnRVbnN0YWJsZSxcbiAgYmFja2dyb3VuZEFjdGlvbixcbiAgZGVmaW5lQmFja2dyb3VuZEFjdGlvbixcbiAgZGVmaW5lRmxvdyxcbiAgZGVmaW5lSnNvblNjaGVtYSxcbiAgZGVmaW5lU2NoZW1hLFxuICBmbG93LFxuICBnZXRBc3luY0NvbnRleHQsXG4gIGdldENhbGxhYmxlSlNPTixcbiAgZ2V0Q2xpZW50SGVhZGVyLFxuICBnZXRDb250ZXh0LFxuICBnZXRIdHRwU3RhdHVzLFxuICBpc0JhY2tncm91bmRBY3Rpb24sXG4gIHJlZ2lzdGVyQmFja2dyb3VuZEFjdGlvbixcbiAgcnVuLFxuICBydW5XaXRoQ29udGV4dCxcbiAgc2V0Q2xpZW50SGVhZGVyLFxuICB6LFxuICAuLi5yZXF1aXJlKFwiLi9hY3Rpb24uanNcIiksXG4gIC4uLnJlcXVpcmUoXCIuL3BsdWdpbi5qc1wiKSxcbiAgLi4ucmVxdWlyZShcIi4vcmVmbGVjdGlvbi5qc1wiKSxcbiAgLi4ucmVxdWlyZShcIi4vdGVsZW1ldHJ5VHlwZXMuanNcIiksXG4gIC4uLnJlcXVpcmUoXCIuL3V0aWxzLmpzXCIpXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/logging.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar logging_exports = {};\n__export(logging_exports, {\n  logger: () => logger\n});\nmodule.exports = __toCommonJS(logging_exports);\nconst LOG_LEVELS = [\"debug\", \"info\", \"warn\", \"error\"];\nconst loggerKey = \"__genkit_logger\";\nconst _defaultLogger = {\n  shouldLog(targetLevel) {\n    return LOG_LEVELS.indexOf(this.level) <= LOG_LEVELS.indexOf(targetLevel);\n  },\n  debug(...args) {\n    this.shouldLog(\"debug\") && console.debug(...args);\n  },\n  info(...args) {\n    this.shouldLog(\"info\") && console.info(...args);\n  },\n  warn(...args) {\n    this.shouldLog(\"warn\") && console.warn(...args);\n  },\n  error(...args) {\n    this.shouldLog(\"error\") && console.error(...args);\n  },\n  level: \"info\"\n};\nfunction getLogger() {\n  if (!global[loggerKey]) {\n    global[loggerKey] = _defaultLogger;\n  }\n  return global[loggerKey];\n}\nclass Logger {\n  defaultLogger = _defaultLogger;\n  init(fn) {\n    global[loggerKey] = fn;\n  }\n  info(...args) {\n    getLogger().info.apply(getLogger(), args);\n  }\n  debug(...args) {\n    getLogger().debug.apply(getLogger(), args);\n  }\n  error(...args) {\n    getLogger().error.apply(getLogger(), args);\n  }\n  warn(...args) {\n    getLogger().warn.apply(getLogger(), args);\n  }\n  setLogLevel(level) {\n    getLogger().level = level;\n  }\n  logStructured(msg, metadata) {\n    getLogger().info(msg, metadata);\n  }\n  logStructuredError(msg, metadata) {\n    getLogger().error(msg, metadata);\n  }\n}\nconst logger = new Logger();\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=logging.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2xvZ2dpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtanMtYXBwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvbG9nZ2luZy5qcz8yZjU4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBsb2dnaW5nX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGxvZ2dpbmdfZXhwb3J0cywge1xuICBsb2dnZXI6ICgpID0+IGxvZ2dlclxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhsb2dnaW5nX2V4cG9ydHMpO1xuY29uc3QgTE9HX0xFVkVMUyA9IFtcImRlYnVnXCIsIFwiaW5mb1wiLCBcIndhcm5cIiwgXCJlcnJvclwiXTtcbmNvbnN0IGxvZ2dlcktleSA9IFwiX19nZW5raXRfbG9nZ2VyXCI7XG5jb25zdCBfZGVmYXVsdExvZ2dlciA9IHtcbiAgc2hvdWxkTG9nKHRhcmdldExldmVsKSB7XG4gICAgcmV0dXJuIExPR19MRVZFTFMuaW5kZXhPZih0aGlzLmxldmVsKSA8PSBMT0dfTEVWRUxTLmluZGV4T2YodGFyZ2V0TGV2ZWwpO1xuICB9LFxuICBkZWJ1ZyguLi5hcmdzKSB7XG4gICAgdGhpcy5zaG91bGRMb2coXCJkZWJ1Z1wiKSAmJiBjb25zb2xlLmRlYnVnKC4uLmFyZ3MpO1xuICB9LFxuICBpbmZvKC4uLmFyZ3MpIHtcbiAgICB0aGlzLnNob3VsZExvZyhcImluZm9cIikgJiYgY29uc29sZS5pbmZvKC4uLmFyZ3MpO1xuICB9LFxuICB3YXJuKC4uLmFyZ3MpIHtcbiAgICB0aGlzLnNob3VsZExvZyhcIndhcm5cIikgJiYgY29uc29sZS53YXJuKC4uLmFyZ3MpO1xuICB9LFxuICBlcnJvciguLi5hcmdzKSB7XG4gICAgdGhpcy5zaG91bGRMb2coXCJlcnJvclwiKSAmJiBjb25zb2xlLmVycm9yKC4uLmFyZ3MpO1xuICB9LFxuICBsZXZlbDogXCJpbmZvXCJcbn07XG5mdW5jdGlvbiBnZXRMb2dnZXIoKSB7XG4gIGlmICghZ2xvYmFsW2xvZ2dlcktleV0pIHtcbiAgICBnbG9iYWxbbG9nZ2VyS2V5XSA9IF9kZWZhdWx0TG9nZ2VyO1xuICB9XG4gIHJldHVybiBnbG9iYWxbbG9nZ2VyS2V5XTtcbn1cbmNsYXNzIExvZ2dlciB7XG4gIGRlZmF1bHRMb2dnZXIgPSBfZGVmYXVsdExvZ2dlcjtcbiAgaW5pdChmbikge1xuICAgIGdsb2JhbFtsb2dnZXJLZXldID0gZm47XG4gIH1cbiAgaW5mbyguLi5hcmdzKSB7XG4gICAgZ2V0TG9nZ2VyKCkuaW5mby5hcHBseShnZXRMb2dnZXIoKSwgYXJncyk7XG4gIH1cbiAgZGVidWcoLi4uYXJncykge1xuICAgIGdldExvZ2dlcigpLmRlYnVnLmFwcGx5KGdldExvZ2dlcigpLCBhcmdzKTtcbiAgfVxuICBlcnJvciguLi5hcmdzKSB7XG4gICAgZ2V0TG9nZ2VyKCkuZXJyb3IuYXBwbHkoZ2V0TG9nZ2VyKCksIGFyZ3MpO1xuICB9XG4gIHdhcm4oLi4uYXJncykge1xuICAgIGdldExvZ2dlcigpLndhcm4uYXBwbHkoZ2V0TG9nZ2VyKCksIGFyZ3MpO1xuICB9XG4gIHNldExvZ0xldmVsKGxldmVsKSB7XG4gICAgZ2V0TG9nZ2VyKCkubGV2ZWwgPSBsZXZlbDtcbiAgfVxuICBsb2dTdHJ1Y3R1cmVkKG1zZywgbWV0YWRhdGEpIHtcbiAgICBnZXRMb2dnZXIoKS5pbmZvKG1zZywgbWV0YWRhdGEpO1xuICB9XG4gIGxvZ1N0cnVjdHVyZWRFcnJvcihtc2csIG1ldGFkYXRhKSB7XG4gICAgZ2V0TG9nZ2VyKCkuZXJyb3IobXNnLCBtZXRhZGF0YSk7XG4gIH1cbn1cbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBsb2dnZXJcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2luZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/node-async-context.js":
/*!****************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/node-async-context.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar node_async_context_exports = {};\n__export(node_async_context_exports, {\n  NodeAsyncContext: () => NodeAsyncContext,\n  initNodeAsyncContext: () => initNodeAsyncContext\n});\nmodule.exports = __toCommonJS(node_async_context_exports);\nvar import_node_async_hooks = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\nvar import_async_context = __webpack_require__(/*! ./async-context.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async-context.js\");\nclass NodeAsyncContext {\n  asls = {};\n  getStore(key) {\n    return this.asls[key]?.getStore();\n  }\n  run(key, store, callback) {\n    if (!this.asls[key]) {\n      this.asls[key] = new import_node_async_hooks.AsyncLocalStorage();\n    }\n    return this.asls[key].run(store, callback);\n  }\n}\nfunction initNodeAsyncContext() {\n  (0, import_async_context.setAsyncContext)(new NodeAsyncContext());\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=node-async-context.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL25vZGUtYXN5bmMtY29udGV4dC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsOEJBQThCLG1CQUFPLENBQUMsMENBQWtCO0FBQ3hELDJCQUEyQixtQkFBTyxDQUFDLGdHQUFvQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FHTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1qcy1hcHAvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9ub2RlLWFzeW5jLWNvbnRleHQuanM/ZGVkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgbm9kZV9hc3luY19jb250ZXh0X2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KG5vZGVfYXN5bmNfY29udGV4dF9leHBvcnRzLCB7XG4gIE5vZGVBc3luY0NvbnRleHQ6ICgpID0+IE5vZGVBc3luY0NvbnRleHQsXG4gIGluaXROb2RlQXN5bmNDb250ZXh0OiAoKSA9PiBpbml0Tm9kZUFzeW5jQ29udGV4dFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhub2RlX2FzeW5jX2NvbnRleHRfZXhwb3J0cyk7XG52YXIgaW1wb3J0X25vZGVfYXN5bmNfaG9va3MgPSByZXF1aXJlKFwibm9kZTphc3luY19ob29rc1wiKTtcbnZhciBpbXBvcnRfYXN5bmNfY29udGV4dCA9IHJlcXVpcmUoXCIuL2FzeW5jLWNvbnRleHQuanNcIik7XG5jbGFzcyBOb2RlQXN5bmNDb250ZXh0IHtcbiAgYXNscyA9IHt9O1xuICBnZXRTdG9yZShrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5hc2xzW2tleV0/LmdldFN0b3JlKCk7XG4gIH1cbiAgcnVuKGtleSwgc3RvcmUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCF0aGlzLmFzbHNba2V5XSkge1xuICAgICAgdGhpcy5hc2xzW2tleV0gPSBuZXcgaW1wb3J0X25vZGVfYXN5bmNfaG9va3MuQXN5bmNMb2NhbFN0b3JhZ2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuYXNsc1trZXldLnJ1bihzdG9yZSwgY2FsbGJhY2spO1xuICB9XG59XG5mdW5jdGlvbiBpbml0Tm9kZUFzeW5jQ29udGV4dCgpIHtcbiAgKDAsIGltcG9ydF9hc3luY19jb250ZXh0LnNldEFzeW5jQ29udGV4dCkobmV3IE5vZGVBc3luY0NvbnRleHQoKSk7XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgTm9kZUFzeW5jQ29udGV4dCxcbiAgaW5pdE5vZGVBc3luY0NvbnRleHRcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9kZS1hc3luYy1jb250ZXh0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/node-async-context.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/node.js":
/*!**************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/node.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar node_exports = {};\n__export(node_exports, {\n  initNodeFeatures: () => initNodeFeatures\n});\nmodule.exports = __toCommonJS(node_exports);\nvar import_node_async_context = __webpack_require__(/*! ./node-async-context.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/node-async-context.js\");\nvar import_node_telemetry_provider = __webpack_require__(/*! ./tracing/node-telemetry-provider.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/node-telemetry-provider.js\");\nfunction initNodeFeatures() {\n  (0, import_node_async_context.initNodeAsyncContext)();\n  (0, import_node_telemetry_provider.initNodeTelemetryProvider)();\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL25vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxnQ0FBZ0MsbUJBQU8sQ0FBQywwR0FBeUI7QUFDakUscUNBQXFDLG1CQUFPLENBQUMsb0lBQXNDO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtanMtYXBwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvbm9kZS5qcz9lY2I1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBub2RlX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KG5vZGVfZXhwb3J0cywge1xuICBpbml0Tm9kZUZlYXR1cmVzOiAoKSA9PiBpbml0Tm9kZUZlYXR1cmVzXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKG5vZGVfZXhwb3J0cyk7XG52YXIgaW1wb3J0X25vZGVfYXN5bmNfY29udGV4dCA9IHJlcXVpcmUoXCIuL25vZGUtYXN5bmMtY29udGV4dC5qc1wiKTtcbnZhciBpbXBvcnRfbm9kZV90ZWxlbWV0cnlfcHJvdmlkZXIgPSByZXF1aXJlKFwiLi90cmFjaW5nL25vZGUtdGVsZW1ldHJ5LXByb3ZpZGVyLmpzXCIpO1xuZnVuY3Rpb24gaW5pdE5vZGVGZWF0dXJlcygpIHtcbiAgKDAsIGltcG9ydF9ub2RlX2FzeW5jX2NvbnRleHQuaW5pdE5vZGVBc3luY0NvbnRleHQpKCk7XG4gICgwLCBpbXBvcnRfbm9kZV90ZWxlbWV0cnlfcHJvdmlkZXIuaW5pdE5vZGVUZWxlbWV0cnlQcm92aWRlcikoKTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBpbml0Tm9kZUZlYXR1cmVzXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/node.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/plugin.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/plugin.js ***!
  \****************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar plugin_exports = {};\nmodule.exports = __toCommonJS(plugin_exports);\n//# sourceMappingURL=plugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3BsdWdpbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWpzLWFwcC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3BsdWdpbi5qcz8zZDY5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBwbHVnaW5fZXhwb3J0cyA9IHt9O1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMocGx1Z2luX2V4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGx1Z2luLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/plugin.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/reflection.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/reflection.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar reflection_exports = {};\n__export(reflection_exports, {\n  ReflectionServer: () => ReflectionServer,\n  RunActionResponseSchema: () => RunActionResponseSchema\n});\nmodule.exports = __toCommonJS(reflection_exports);\nvar import_express = __toESM(__webpack_require__(/*! express */ \"express\"));\nvar import_promises = __toESM(__webpack_require__(/*! fs/promises */ \"fs/promises\"));\nvar import_get_port = __toESM(__webpack_require__(/*! get-port */ \"(action-browser)/./node_modules/get-port/index.js\"));\nvar import_path = __toESM(__webpack_require__(/*! path */ \"path\"));\nvar z = __toESM(__webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/lib/index.js\"));\nvar import_action = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\nvar import_index = __webpack_require__(/*! ./index.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! ./logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! ./tracing.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nconst RunActionResponseSchema = z.object({\n  result: z.unknown().optional(),\n  error: z.unknown().optional(),\n  telemetry: z.object({\n    traceId: z.string().optional()\n  }).optional()\n});\nclass ReflectionServer {\n  /** List of all running servers needed to be cleaned up on process exit. */\n  static RUNNING_SERVERS = [];\n  /** Registry instance to be used for API calls. */\n  registry;\n  /** Options for the reflection server. */\n  options;\n  /** Port the server is actually running on. This may differ from `options.port` if the original was occupied. Null if server is not running. */\n  port = null;\n  /** Express server instance. Null if server is not running. */\n  server = null;\n  /** Path to the runtime file. Null if server is not running. */\n  runtimeFilePath = null;\n  constructor(registry, options) {\n    this.registry = registry;\n    this.options = {\n      port: 3100,\n      bodyLimit: \"30mb\",\n      configuredEnvs: [\"dev\"],\n      ...options\n    };\n  }\n  /**\n   * Finds a free port to run the server on based on the original chosen port and environment.\n   */\n  async findPort() {\n    const chosenPort = this.options.port;\n    const freePort = await (0, import_get_port.default)({\n      port: (0, import_get_port.makeRange)(chosenPort, chosenPort + 100)\n    });\n    if (freePort !== chosenPort) {\n      import_logging.logger.warn(\n        `Port ${chosenPort} is already in use, using next available port ${freePort} instead.`\n      );\n    }\n    return freePort;\n  }\n  /**\n   * Starts the server.\n   *\n   * The server will be registered to be shut down on process exit.\n   */\n  async start() {\n    const server = (0, import_express.default)();\n    server.use(import_express.default.json({ limit: this.options.bodyLimit }));\n    server.use((req, res, next) => {\n      res.header(\"x-genkit-version\", import_index.GENKIT_VERSION);\n      next();\n    });\n    server.get(\"/api/__health\", async (_, response) => {\n      await this.registry.listActions();\n      response.status(200).send(\"OK\");\n    });\n    server.get(\"/api/__quitquitquit\", async (_, response) => {\n      import_logging.logger.debug(\"Received quitquitquit\");\n      response.status(200).send(\"OK\");\n      await this.stop();\n    });\n    server.get(\"/api/actions\", async (_, response, next) => {\n      import_logging.logger.debug(\"Fetching actions.\");\n      try {\n        const actions = await this.registry.listResolvableActions();\n        const convertedActions = {};\n        Object.keys(actions).forEach((key) => {\n          const action = actions[key];\n          convertedActions[key] = {\n            key,\n            name: action.name,\n            description: action.description,\n            metadata: action.metadata\n          };\n          if (action.inputSchema || action.inputJsonSchema) {\n            convertedActions[key].inputSchema = (0, import_schema.toJsonSchema)({\n              schema: action.inputSchema,\n              jsonSchema: action.inputJsonSchema\n            });\n          }\n          if (action.outputSchema || action.outputJsonSchema) {\n            convertedActions[key].outputSchema = (0, import_schema.toJsonSchema)({\n              schema: action.outputSchema,\n              jsonSchema: action.outputJsonSchema\n            });\n          }\n        });\n        response.send(convertedActions);\n      } catch (err) {\n        const { message, stack } = err;\n        next({ message, stack });\n      }\n    });\n    server.post(\"/api/runAction\", async (request, response, next) => {\n      const { key, input, context, telemetryLabels } = request.body;\n      const { stream } = request.query;\n      import_logging.logger.debug(`Running action \\`${key}\\` with stream=${stream}...`);\n      try {\n        const action = await this.registry.lookupAction(key);\n        if (!action) {\n          response.status(404).send(`action ${key} not found`);\n          return;\n        }\n        if (stream === \"true\") {\n          try {\n            const callback = (chunk) => {\n              response.write(JSON.stringify(chunk) + \"\\n\");\n            };\n            const result = await action.run(input, {\n              context,\n              onChunk: callback,\n              telemetryLabels\n            });\n            await (0, import_tracing.flushTracing)();\n            response.write(\n              JSON.stringify({\n                result: result.result,\n                telemetry: {\n                  traceId: result.telemetry.traceId\n                }\n              })\n            );\n            response.end();\n          } catch (err) {\n            const { message, stack } = err;\n            const errorResponse = {\n              code: import_action.StatusCodes.INTERNAL,\n              message,\n              details: {\n                stack\n              }\n            };\n            if (err.traceId) {\n              errorResponse.details.traceId = err.traceId;\n            }\n            response.write(\n              JSON.stringify({\n                error: errorResponse\n              })\n            );\n            response.end();\n          }\n        } else {\n          const result = await action.run(input, { context, telemetryLabels });\n          await (0, import_tracing.flushTracing)();\n          response.send({\n            result: result.result,\n            telemetry: {\n              traceId: result.telemetry.traceId\n            }\n          });\n        }\n      } catch (err) {\n        const { message, stack, traceId } = err;\n        next({ message, stack, traceId });\n      }\n    });\n    server.get(\"/api/envs\", async (_, response) => {\n      response.json(this.options.configuredEnvs);\n    });\n    server.post(\"/api/notify\", async (request, response) => {\n      const { telemetryServerUrl, reflectionApiSpecVersion } = request.body;\n      if (!process.env.GENKIT_TELEMETRY_SERVER) {\n        if (typeof telemetryServerUrl === \"string\") {\n          (0, import_tracing.setTelemetryServerUrl)(telemetryServerUrl);\n          import_logging.logger.debug(\n            `Connected to telemetry server on ${telemetryServerUrl}`\n          );\n        }\n      }\n      if (reflectionApiSpecVersion !== import_index.GENKIT_REFLECTION_API_SPEC_VERSION) {\n        if (!reflectionApiSpecVersion || reflectionApiSpecVersion < import_index.GENKIT_REFLECTION_API_SPEC_VERSION) {\n          import_logging.logger.warn(\n            \"WARNING: Genkit CLI version may be outdated. Please update `genkit-cli` to the latest version.\"\n          );\n        } else {\n          import_logging.logger.warn(\n            `Genkit CLI is newer than runtime library. Some feature may not be supported. Consider upgrading your runtime library version (debug info: expected ${import_index.GENKIT_REFLECTION_API_SPEC_VERSION}, got ${reflectionApiSpecVersion}).`\n          );\n        }\n      }\n      response.status(200).send(\"OK\");\n    });\n    server.use((err, req, res, next) => {\n      import_logging.logger.error(err.stack);\n      const error = err;\n      const { message, stack } = error;\n      const errorResponse = {\n        code: import_action.StatusCodes.INTERNAL,\n        message,\n        details: {\n          stack\n        }\n      };\n      if (err.traceId) {\n        errorResponse.details.traceId = err.traceId;\n      }\n      res.status(500).json(errorResponse);\n    });\n    this.port = await this.findPort();\n    this.server = server.listen(this.port, async () => {\n      import_logging.logger.debug(\n        `Reflection server (${process.pid}) running on http://localhost:${this.port}`\n      );\n      ReflectionServer.RUNNING_SERVERS.push(this);\n      await this.writeRuntimeFile();\n    });\n  }\n  /**\n   * Stops the server and removes it from the list of running servers to clean up on exit.\n   */\n  async stop() {\n    if (!this.server) {\n      return;\n    }\n    return new Promise(async (resolve, reject) => {\n      await this.cleanupRuntimeFile();\n      this.server.close(async (err) => {\n        if (err) {\n          import_logging.logger.error(\n            `Error shutting down reflection server on port ${this.port}: ${err}`\n          );\n          reject(err);\n        }\n        const index = ReflectionServer.RUNNING_SERVERS.indexOf(this);\n        if (index > -1) {\n          ReflectionServer.RUNNING_SERVERS.splice(index, 1);\n        }\n        import_logging.logger.debug(\n          `Reflection server on port ${this.port} has successfully shut down.`\n        );\n        this.port = null;\n        this.server = null;\n        resolve();\n      });\n    });\n  }\n  /**\n   * Writes the runtime file to the project root.\n   */\n  async writeRuntimeFile() {\n    try {\n      const rootDir = await findProjectRoot();\n      const runtimesDir = import_path.default.join(rootDir, \".genkit\", \"runtimes\");\n      const date = /* @__PURE__ */ new Date();\n      const time = date.getTime();\n      const timestamp = date.toISOString();\n      const runtimeId = `${process.pid}${this.port !== null ? `-${this.port}` : \"\"}`;\n      this.runtimeFilePath = import_path.default.join(\n        runtimesDir,\n        `${runtimeId}-${time}.json`\n      );\n      const fileContent = JSON.stringify(\n        {\n          id: process.env.GENKIT_RUNTIME_ID || runtimeId,\n          pid: process.pid,\n          name: this.options.name,\n          reflectionServerUrl: `http://localhost:${this.port}`,\n          timestamp,\n          genkitVersion: `nodejs/${import_index.GENKIT_VERSION}`,\n          reflectionApiSpecVersion: import_index.GENKIT_REFLECTION_API_SPEC_VERSION\n        },\n        null,\n        2\n      );\n      await import_promises.default.mkdir(runtimesDir, { recursive: true });\n      await import_promises.default.writeFile(this.runtimeFilePath, fileContent, \"utf8\");\n      import_logging.logger.debug(`Runtime file written: ${this.runtimeFilePath}`);\n    } catch (error) {\n      import_logging.logger.error(`Error writing runtime file: ${error}`);\n    }\n  }\n  /**\n   * Cleans up the port file.\n   */\n  async cleanupRuntimeFile() {\n    if (!this.runtimeFilePath) {\n      return;\n    }\n    try {\n      const fileContent = await import_promises.default.readFile(this.runtimeFilePath, \"utf8\");\n      const data = JSON.parse(fileContent);\n      if (data.pid === process.pid) {\n        await import_promises.default.unlink(this.runtimeFilePath);\n        import_logging.logger.debug(`Runtime file cleaned up: ${this.runtimeFilePath}`);\n      }\n    } catch (error) {\n      import_logging.logger.error(`Error cleaning up runtime file: ${error}`);\n    }\n  }\n  /**\n   * Stops all running reflection servers.\n   */\n  static async stopAll() {\n    return Promise.all(\n      ReflectionServer.RUNNING_SERVERS.map((server) => server.stop())\n    );\n  }\n}\nasync function findProjectRoot() {\n  let currentDir = process.cwd();\n  while (currentDir !== import_path.default.parse(currentDir).root) {\n    const packageJsonPath = import_path.default.join(currentDir, \"package.json\");\n    try {\n      await import_promises.default.access(packageJsonPath);\n      return currentDir;\n    } catch {\n      currentDir = import_path.default.dirname(currentDir);\n    }\n  }\n  throw new Error(\"Could not find project root (package.json not found)\");\n}\nif ( true && \"hot\" in module) {\n  module.hot.accept();\n  module.hot.dispose(async () => {\n    import_logging.logger.debug(\"Cleaning up reflection server(s) before module reload...\");\n    await ReflectionServer.stopAll();\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=reflection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/reflection.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js":
/*!******************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/registry.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar registry_exports = {};\n__export(registry_exports, {\n  Registry: () => Registry,\n  parseRegistryKey: () => parseRegistryKey\n});\nmodule.exports = __toCommonJS(registry_exports);\nvar import_dotprompt = __webpack_require__(/*! dotprompt */ \"(action-browser)/./node_modules/dotprompt/dist/index.js\");\nvar import_action = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\nvar import_background_action = __webpack_require__(/*! ./background-action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/background-action.js\");\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nvar import_logging = __webpack_require__(/*! ./logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nfunction parsePluginName(registryKey) {\n  const tokens = registryKey.split(\"/\");\n  if (tokens.length >= 4) {\n    return tokens[2];\n  }\n  return void 0;\n}\nfunction parseRegistryKey(registryKey) {\n  const tokens = registryKey.split(\"/\");\n  if (tokens.length < 3) {\n    return void 0;\n  }\n  if (tokens.length >= 4) {\n    return {\n      actionType: tokens[1],\n      pluginName: tokens[2],\n      actionName: tokens.slice(3).join(\"/\")\n    };\n  }\n  return {\n    actionType: tokens[1],\n    actionName: tokens[2]\n  };\n}\nclass Registry {\n  actionsById = {};\n  pluginsByName = {};\n  schemasByName = {};\n  valueByTypeAndName = {};\n  allPluginsInitialized = false;\n  apiStability = \"stable\";\n  dotprompt;\n  parent;\n  /** Additional runtime context data for flows and tools. */\n  context;\n  constructor(parent) {\n    if (parent) {\n      this.parent = parent;\n      this.apiStability = parent?.apiStability;\n      this.dotprompt = parent.dotprompt;\n    } else {\n      this.dotprompt = new import_dotprompt.Dotprompt({\n        schemaResolver: async (name) => {\n          const resolvedSchema = await this.lookupSchema(name);\n          if (!resolvedSchema) {\n            throw new import_error.GenkitError({\n              message: `Schema '${name}' not found`,\n              status: \"NOT_FOUND\"\n            });\n          }\n          return (0, import_schema.toJsonSchema)(resolvedSchema);\n        }\n      });\n    }\n  }\n  /**\n   * Creates a new registry overlaid onto the provided registry.\n   * @param parent The parent registry.\n   * @returns The new overlaid registry.\n   */\n  static withParent(parent) {\n    return new Registry(parent);\n  }\n  /**\n   * Looks up an action in the registry.\n   * @param key The key of the action to lookup.\n   * @returns The action.\n   */\n  async lookupAction(key) {\n    const parsedKey = parseRegistryKey(key);\n    if (parsedKey?.pluginName && this.pluginsByName[parsedKey.pluginName]) {\n      await this.initializePlugin(parsedKey.pluginName);\n      if (!this.actionsById[key]) {\n        await this.resolvePluginAction(\n          parsedKey.pluginName,\n          parsedKey.actionType,\n          parsedKey.actionName\n        );\n      }\n    }\n    return await this.actionsById[key] || this.parent?.lookupAction(key);\n  }\n  /**\n   * Looks up a background action from the registry.\n   * @param key The key of the action to lookup.\n   * @returns The action.\n   */\n  async lookupBackgroundAction(key) {\n    return (0, import_background_action.lookupBackgroundAction)(this, key);\n  }\n  /**\n   * Registers an action in the registry.\n   * @param type The type of the action to register.\n   * @param action The action to register.\n   */\n  registerAction(type, action, opts) {\n    if (type !== action.__action.actionType) {\n      throw new import_error.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `action type (${type}) does not match type on action (${action.__action.actionType})`\n      });\n    }\n    if (opts?.namespace && !action.__action.name.startsWith(`${opts.namespace}/`)) {\n      action.__action.name = `${opts.namespace}/${action.__action.name}`;\n    }\n    const key = `/${type}/${action.__action.name}`;\n    import_logging.logger.debug(`registering ${key}`);\n    if (this.actionsById.hasOwnProperty(key)) {\n      import_logging.logger.warn(\n        `WARNING: ${key} already has an entry in the registry. Overwriting.`\n      );\n    }\n    this.actionsById[key] = action;\n    if (action.__registry) {\n      import_logging.logger.error(`ERROR: ${key} already registered.`);\n    }\n    action.__registry = this;\n  }\n  /**\n   * Registers an action promise in the registry.\n   */\n  registerActionAsync(type, name, action, opts) {\n    if (opts?.namespace && !name.startsWith(`${opts.namespace}/`)) {\n      name = `${opts.namespace}/${name}`;\n    }\n    const key = `/${type}/${name}`;\n    import_logging.logger.debug(`registering ${key} (async)`);\n    if (this.actionsById.hasOwnProperty(key)) {\n      import_logging.logger.warn(\n        `WARNING: ${key} already has an entry in the registry. Overwriting.`\n      );\n    }\n    this.actionsById[key] = action;\n  }\n  /**\n   * Returns all actions that have been registered in the registry.\n   * @returns All actions in the registry as a map of <key, action>.\n   */\n  async listActions() {\n    await this.initializeAllPlugins();\n    const actions = {};\n    await Promise.all(\n      Object.entries(this.actionsById).map(async ([key, action]) => {\n        actions[key] = await action;\n      })\n    );\n    return {\n      ...await this.parent?.listActions(),\n      ...actions\n    };\n  }\n  /**\n   * Returns all actions that are resolvable by plugins as well as those that are already\n   * in the registry.\n   *\n   * NOTE: this method should not be used in latency sensitive code paths.\n   * It may rely on \"admin\" API calls such as \"list models\", which may cause increased cold start latency.\n   *\n   * @returns All resolvable action metadata as a map of <key, action metadata>.\n   */\n  async listResolvableActions() {\n    const resolvableActions = {};\n    await Promise.all(\n      Object.entries(this.pluginsByName).map(async ([pluginName, plugin]) => {\n        if (plugin.listActions) {\n          try {\n            (await plugin.listActions()).forEach((meta) => {\n              if (!meta.name) {\n                throw new import_error.GenkitError({\n                  status: \"INVALID_ARGUMENT\",\n                  message: `Invalid metadata when listing actions from ${pluginName} - name required`\n                });\n              }\n              if (!meta.actionType) {\n                throw new import_error.GenkitError({\n                  status: \"INVALID_ARGUMENT\",\n                  message: `Invalid metadata when listing actions from ${pluginName} - actionType required`\n                });\n              }\n              resolvableActions[`/${meta.actionType}/${meta.name}`] = meta;\n            });\n          } catch (e) {\n            import_logging.logger.error(`Error listing actions for ${pluginName}\n`, e);\n          }\n        }\n      })\n    );\n    for (const [key, action] of Object.entries(await this.listActions())) {\n      resolvableActions[key] = action.__action;\n    }\n    return {\n      ...await this.parent?.listResolvableActions(),\n      ...resolvableActions\n    };\n  }\n  /**\n   * Initializes all plugins in the registry.\n   */\n  async initializeAllPlugins() {\n    if (this.allPluginsInitialized) {\n      return;\n    }\n    for (const pluginName of Object.keys(this.pluginsByName)) {\n      await this.initializePlugin(pluginName);\n    }\n    this.allPluginsInitialized = true;\n  }\n  /**\n   * Registers a plugin provider. This plugin must be initialized before it can be used by calling {@link initializePlugin} or {@link initializeAllPlugins}.\n   * @param name The name of the plugin to register.\n   * @param provider The plugin provider.\n   */\n  registerPluginProvider(name, provider) {\n    if (this.pluginsByName[name]) {\n      throw new Error(`Plugin ${name} already registered`);\n    }\n    this.allPluginsInitialized = false;\n    let cached;\n    let isInitialized = false;\n    this.pluginsByName[name] = {\n      name: provider.name,\n      initializer: () => {\n        if (!isInitialized) {\n          cached = provider.initializer();\n          isInitialized = true;\n        }\n        return cached;\n      },\n      resolver: async (actionType, actionName) => {\n        if (provider.resolver) {\n          await provider.resolver(actionType, actionName);\n        }\n      },\n      listActions: async () => {\n        if (provider.listActions) {\n          return await provider.listActions();\n        }\n        return [];\n      }\n    };\n  }\n  /**\n   * Looks up a plugin.\n   * @param name The name of the plugin to lookup.\n   * @returns The plugin provider.\n   */\n  lookupPlugin(name) {\n    return this.pluginsByName[name] || this.parent?.lookupPlugin(name);\n  }\n  /**\n   * Resolves a new Action dynamically by registering it.\n   * @param pluginName The name of the plugin\n   * @param actionType The type of the action\n   * @param actionName The name of the action\n   * @returns\n   */\n  async resolvePluginAction(pluginName, actionType, actionName) {\n    const plugin = this.pluginsByName[pluginName];\n    if (plugin) {\n      return await (0, import_action.runOutsideActionRuntimeContext)(async () => {\n        if (plugin.resolver) {\n          await plugin.resolver(actionType, actionName);\n        }\n      });\n    }\n  }\n  /**\n   * Initializes a plugin already registered with {@link registerPluginProvider}.\n   * @param name The name of the plugin to initialize.\n   * @returns The plugin.\n   */\n  async initializePlugin(name) {\n    if (this.pluginsByName[name]) {\n      return await (0, import_action.runOutsideActionRuntimeContext)(\n        () => this.pluginsByName[name].initializer()\n      );\n    }\n  }\n  /**\n   * Registers a schema.\n   * @param name The name of the schema to register.\n   * @param data The schema to register (either a Zod schema or a JSON schema).\n   */\n  registerSchema(name, data) {\n    if (this.schemasByName[name]) {\n      throw new Error(`Schema ${name} already registered`);\n    }\n    this.schemasByName[name] = data;\n  }\n  registerValue(type, name, value) {\n    if (!this.valueByTypeAndName[type]) {\n      this.valueByTypeAndName[type] = {};\n    }\n    this.valueByTypeAndName[type][name] = value;\n  }\n  async lookupValue(type, key) {\n    const pluginName = parsePluginName(key);\n    if (!this.valueByTypeAndName[type]?.[key] && pluginName) {\n      await this.initializePlugin(pluginName);\n    }\n    return this.valueByTypeAndName[type]?.[key] || this.parent?.lookupValue(type, key);\n  }\n  async listValues(type) {\n    await this.initializeAllPlugins();\n    return {\n      ...await this.parent?.listValues(type) || {},\n      ...this.valueByTypeAndName[type] || {}\n    };\n  }\n  /**\n   * Looks up a schema.\n   * @param name The name of the schema to lookup.\n   * @returns The schema.\n   */\n  lookupSchema(name) {\n    return this.schemasByName[name] || this.parent?.lookupSchema(name);\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=registry.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/schema.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar schema_exports = {};\n__export(schema_exports, {\n  ValidationError: () => ValidationError,\n  defineJsonSchema: () => defineJsonSchema,\n  defineSchema: () => defineSchema,\n  parseSchema: () => parseSchema,\n  toJsonSchema: () => toJsonSchema,\n  validateSchema: () => validateSchema,\n  z: () => import_zod.z\n});\nmodule.exports = __toCommonJS(schema_exports);\nvar import_ajv = __toESM(__webpack_require__(/*! ajv */ \"(action-browser)/./node_modules/ajv/dist/ajv.js\"));\nvar import_ajv_formats = __toESM(__webpack_require__(/*! ajv-formats */ \"(action-browser)/./node_modules/ajv-formats/dist/index.js\"));\nvar import_zod = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/lib/index.js\");\nvar import_zod_to_json_schema = __toESM(__webpack_require__(/*! zod-to-json-schema */ \"(action-browser)/./node_modules/zod-to-json-schema/dist/cjs/index.js\"));\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nconst ajv = new import_ajv.default();\n(0, import_ajv_formats.default)(ajv);\nconst jsonSchemas = /* @__PURE__ */ new WeakMap();\nconst validators = /* @__PURE__ */ new WeakMap();\nclass ValidationError extends import_error.GenkitError {\n  constructor({\n    data,\n    errors,\n    schema\n  }) {\n    super({\n      status: \"INVALID_ARGUMENT\",\n      message: `Schema validation failed. Parse Errors:\n\n${errors.map((e) => `- ${e.path}: ${e.message}`).join(\"\\n\")}\n\nProvided data:\n\n${JSON.stringify(data, null, 2)}\n\nRequired JSON schema:\n\n${JSON.stringify(schema, null, 2)}`,\n      detail: { errors, schema }\n    });\n  }\n}\nfunction toJsonSchema({\n  jsonSchema,\n  schema\n}) {\n  if (!jsonSchema && !schema) return null;\n  if (jsonSchema) return jsonSchema;\n  if (jsonSchemas.has(schema)) return jsonSchemas.get(schema);\n  const outSchema = (0, import_zod_to_json_schema.default)(schema, {\n    $refStrategy: \"none\",\n    removeAdditionalStrategy: \"strict\"\n  });\n  jsonSchemas.set(schema, outSchema);\n  return outSchema;\n}\nfunction toErrorDetail(error) {\n  return {\n    path: error.instancePath.substring(1).replace(/\\//g, \".\") || \"(root)\",\n    message: error.message\n  };\n}\nfunction validateSchema(data, options) {\n  const toValidate = toJsonSchema(options);\n  if (!toValidate) {\n    return { valid: true, schema: toValidate };\n  }\n  const validator = validators.get(toValidate) || ajv.compile(toValidate);\n  const valid = validator(data);\n  const errors = validator.errors?.map((e) => e);\n  return { valid, errors: errors?.map(toErrorDetail), schema: toValidate };\n}\nfunction parseSchema(data, options) {\n  const { valid, errors, schema } = validateSchema(data, options);\n  if (!valid) throw new ValidationError({ data, errors, schema });\n  return data;\n}\nfunction defineSchema(registry, name, schema) {\n  registry.registerSchema(name, { schema });\n  return schema;\n}\nfunction defineJsonSchema(registry, name, jsonSchema) {\n  registry.registerSchema(name, { jsonSchema });\n  return jsonSchema;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=schema.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3NjaGVtYS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG1HQUFtRztBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSw4QkFBOEI7QUFDdkc7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSx5QkFBeUIsbUJBQU8sQ0FBQyw0REFBSztBQUN0QyxpQ0FBaUMsbUJBQU8sQ0FBQyw4RUFBYTtBQUN0RCxpQkFBaUIsbUJBQU8sQ0FBQyw2REFBSztBQUM5Qix3Q0FBd0MsbUJBQU8sQ0FBQyxnR0FBb0I7QUFDcEUsbUJBQW1CLG1CQUFPLENBQUMsZ0ZBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQSxFQUFFLHVCQUF1QixPQUFPLElBQUksVUFBVTs7QUFFOUM7O0FBRUEsRUFBRTs7QUFFRjs7QUFFQSxFQUFFLGdDQUFnQztBQUNsQyxnQkFBZ0I7QUFDaEIsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsVUFBVSx3QkFBd0I7QUFDbEMsMENBQTBDLHNCQUFzQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsUUFBUTtBQUMxQztBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsWUFBWTtBQUM5QztBQUNBO0FBQ0E7QUFDQSxNQUFNLENBUUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtanMtYXBwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvc2NoZW1hLmpzPzJjY2EiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHNjaGVtYV9leHBvcnRzID0ge307XG5fX2V4cG9ydChzY2hlbWFfZXhwb3J0cywge1xuICBWYWxpZGF0aW9uRXJyb3I6ICgpID0+IFZhbGlkYXRpb25FcnJvcixcbiAgZGVmaW5lSnNvblNjaGVtYTogKCkgPT4gZGVmaW5lSnNvblNjaGVtYSxcbiAgZGVmaW5lU2NoZW1hOiAoKSA9PiBkZWZpbmVTY2hlbWEsXG4gIHBhcnNlU2NoZW1hOiAoKSA9PiBwYXJzZVNjaGVtYSxcbiAgdG9Kc29uU2NoZW1hOiAoKSA9PiB0b0pzb25TY2hlbWEsXG4gIHZhbGlkYXRlU2NoZW1hOiAoKSA9PiB2YWxpZGF0ZVNjaGVtYSxcbiAgejogKCkgPT4gaW1wb3J0X3pvZC56XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNjaGVtYV9leHBvcnRzKTtcbnZhciBpbXBvcnRfYWp2ID0gX190b0VTTShyZXF1aXJlKFwiYWp2XCIpKTtcbnZhciBpbXBvcnRfYWp2X2Zvcm1hdHMgPSBfX3RvRVNNKHJlcXVpcmUoXCJhanYtZm9ybWF0c1wiKSk7XG52YXIgaW1wb3J0X3pvZCA9IHJlcXVpcmUoXCJ6b2RcIik7XG52YXIgaW1wb3J0X3pvZF90b19qc29uX3NjaGVtYSA9IF9fdG9FU00ocmVxdWlyZShcInpvZC10by1qc29uLXNjaGVtYVwiKSk7XG52YXIgaW1wb3J0X2Vycm9yID0gcmVxdWlyZShcIi4vZXJyb3IuanNcIik7XG5jb25zdCBhanYgPSBuZXcgaW1wb3J0X2Fqdi5kZWZhdWx0KCk7XG4oMCwgaW1wb3J0X2Fqdl9mb3JtYXRzLmRlZmF1bHQpKGFqdik7XG5jb25zdCBqc29uU2NoZW1hcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuY29uc3QgdmFsaWRhdG9ycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuY2xhc3MgVmFsaWRhdGlvbkVycm9yIGV4dGVuZHMgaW1wb3J0X2Vycm9yLkdlbmtpdEVycm9yIHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIGRhdGEsXG4gICAgZXJyb3JzLFxuICAgIHNjaGVtYVxuICB9KSB7XG4gICAgc3VwZXIoe1xuICAgICAgc3RhdHVzOiBcIklOVkFMSURfQVJHVU1FTlRcIixcbiAgICAgIG1lc3NhZ2U6IGBTY2hlbWEgdmFsaWRhdGlvbiBmYWlsZWQuIFBhcnNlIEVycm9yczpcblxuJHtlcnJvcnMubWFwKChlKSA9PiBgLSAke2UucGF0aH06ICR7ZS5tZXNzYWdlfWApLmpvaW4oXCJcXG5cIil9XG5cblByb3ZpZGVkIGRhdGE6XG5cbiR7SlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgMil9XG5cblJlcXVpcmVkIEpTT04gc2NoZW1hOlxuXG4ke0pTT04uc3RyaW5naWZ5KHNjaGVtYSwgbnVsbCwgMil9YCxcbiAgICAgIGRldGFpbDogeyBlcnJvcnMsIHNjaGVtYSB9XG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHRvSnNvblNjaGVtYSh7XG4gIGpzb25TY2hlbWEsXG4gIHNjaGVtYVxufSkge1xuICBpZiAoIWpzb25TY2hlbWEgJiYgIXNjaGVtYSkgcmV0dXJuIG51bGw7XG4gIGlmIChqc29uU2NoZW1hKSByZXR1cm4ganNvblNjaGVtYTtcbiAgaWYgKGpzb25TY2hlbWFzLmhhcyhzY2hlbWEpKSByZXR1cm4ganNvblNjaGVtYXMuZ2V0KHNjaGVtYSk7XG4gIGNvbnN0IG91dFNjaGVtYSA9ICgwLCBpbXBvcnRfem9kX3RvX2pzb25fc2NoZW1hLmRlZmF1bHQpKHNjaGVtYSwge1xuICAgICRyZWZTdHJhdGVneTogXCJub25lXCIsXG4gICAgcmVtb3ZlQWRkaXRpb25hbFN0cmF0ZWd5OiBcInN0cmljdFwiXG4gIH0pO1xuICBqc29uU2NoZW1hcy5zZXQoc2NoZW1hLCBvdXRTY2hlbWEpO1xuICByZXR1cm4gb3V0U2NoZW1hO1xufVxuZnVuY3Rpb24gdG9FcnJvckRldGFpbChlcnJvcikge1xuICByZXR1cm4ge1xuICAgIHBhdGg6IGVycm9yLmluc3RhbmNlUGF0aC5zdWJzdHJpbmcoMSkucmVwbGFjZSgvXFwvL2csIFwiLlwiKSB8fCBcIihyb290KVwiLFxuICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2VcbiAgfTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlU2NoZW1hKGRhdGEsIG9wdGlvbnMpIHtcbiAgY29uc3QgdG9WYWxpZGF0ZSA9IHRvSnNvblNjaGVtYShvcHRpb25zKTtcbiAgaWYgKCF0b1ZhbGlkYXRlKSB7XG4gICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIHNjaGVtYTogdG9WYWxpZGF0ZSB9O1xuICB9XG4gIGNvbnN0IHZhbGlkYXRvciA9IHZhbGlkYXRvcnMuZ2V0KHRvVmFsaWRhdGUpIHx8IGFqdi5jb21waWxlKHRvVmFsaWRhdGUpO1xuICBjb25zdCB2YWxpZCA9IHZhbGlkYXRvcihkYXRhKTtcbiAgY29uc3QgZXJyb3JzID0gdmFsaWRhdG9yLmVycm9ycz8ubWFwKChlKSA9PiBlKTtcbiAgcmV0dXJuIHsgdmFsaWQsIGVycm9yczogZXJyb3JzPy5tYXAodG9FcnJvckRldGFpbCksIHNjaGVtYTogdG9WYWxpZGF0ZSB9O1xufVxuZnVuY3Rpb24gcGFyc2VTY2hlbWEoZGF0YSwgb3B0aW9ucykge1xuICBjb25zdCB7IHZhbGlkLCBlcnJvcnMsIHNjaGVtYSB9ID0gdmFsaWRhdGVTY2hlbWEoZGF0YSwgb3B0aW9ucyk7XG4gIGlmICghdmFsaWQpIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoeyBkYXRhLCBlcnJvcnMsIHNjaGVtYSB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG5mdW5jdGlvbiBkZWZpbmVTY2hlbWEocmVnaXN0cnksIG5hbWUsIHNjaGVtYSkge1xuICByZWdpc3RyeS5yZWdpc3RlclNjaGVtYShuYW1lLCB7IHNjaGVtYSB9KTtcbiAgcmV0dXJuIHNjaGVtYTtcbn1cbmZ1bmN0aW9uIGRlZmluZUpzb25TY2hlbWEocmVnaXN0cnksIG5hbWUsIGpzb25TY2hlbWEpIHtcbiAgcmVnaXN0cnkucmVnaXN0ZXJTY2hlbWEobmFtZSwgeyBqc29uU2NoZW1hIH0pO1xuICByZXR1cm4ganNvblNjaGVtYTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBWYWxpZGF0aW9uRXJyb3IsXG4gIGRlZmluZUpzb25TY2hlbWEsXG4gIGRlZmluZVNjaGVtYSxcbiAgcGFyc2VTY2hlbWEsXG4gIHRvSnNvblNjaGVtYSxcbiAgdmFsaWRhdGVTY2hlbWEsXG4gIHpcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZW1hLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/statusTypes.js":
/*!*********************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/statusTypes.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar statusTypes_exports = {};\n__export(statusTypes_exports, {\n  StatusCodes: () => StatusCodes,\n  StatusNameSchema: () => StatusNameSchema,\n  StatusSchema: () => StatusSchema,\n  httpStatusCode: () => httpStatusCode\n});\nmodule.exports = __toCommonJS(statusTypes_exports);\nvar z = __toESM(__webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/lib/index.js\"));\nvar StatusCodes = /* @__PURE__ */ ((StatusCodes2) => {\n  StatusCodes2[StatusCodes2[\"OK\"] = 0] = \"OK\";\n  StatusCodes2[StatusCodes2[\"CANCELLED\"] = 1] = \"CANCELLED\";\n  StatusCodes2[StatusCodes2[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n  StatusCodes2[StatusCodes2[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n  StatusCodes2[StatusCodes2[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n  StatusCodes2[StatusCodes2[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n  StatusCodes2[StatusCodes2[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n  StatusCodes2[StatusCodes2[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n  StatusCodes2[StatusCodes2[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n  StatusCodes2[StatusCodes2[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n  StatusCodes2[StatusCodes2[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n  StatusCodes2[StatusCodes2[\"ABORTED\"] = 10] = \"ABORTED\";\n  StatusCodes2[StatusCodes2[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n  StatusCodes2[StatusCodes2[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n  StatusCodes2[StatusCodes2[\"INTERNAL\"] = 13] = \"INTERNAL\";\n  StatusCodes2[StatusCodes2[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n  StatusCodes2[StatusCodes2[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n  return StatusCodes2;\n})(StatusCodes || {});\nconst StatusNameSchema = z.enum([\n  \"OK\",\n  \"CANCELLED\",\n  \"UNKNOWN\",\n  \"INVALID_ARGUMENT\",\n  \"DEADLINE_EXCEEDED\",\n  \"NOT_FOUND\",\n  \"ALREADY_EXISTS\",\n  \"PERMISSION_DENIED\",\n  \"UNAUTHENTICATED\",\n  \"RESOURCE_EXHAUSTED\",\n  \"FAILED_PRECONDITION\",\n  \"ABORTED\",\n  \"OUT_OF_RANGE\",\n  \"UNIMPLEMENTED\",\n  \"INTERNAL\",\n  \"UNAVAILABLE\",\n  \"DATA_LOSS\"\n]);\nconst statusCodeMap = {\n  OK: 200,\n  CANCELLED: 499,\n  UNKNOWN: 500,\n  INVALID_ARGUMENT: 400,\n  DEADLINE_EXCEEDED: 504,\n  NOT_FOUND: 404,\n  ALREADY_EXISTS: 409,\n  PERMISSION_DENIED: 403,\n  UNAUTHENTICATED: 401,\n  RESOURCE_EXHAUSTED: 429,\n  FAILED_PRECONDITION: 400,\n  ABORTED: 409,\n  OUT_OF_RANGE: 400,\n  UNIMPLEMENTED: 501,\n  INTERNAL: 500,\n  UNAVAILABLE: 503,\n  DATA_LOSS: 500\n};\nfunction httpStatusCode(status) {\n  if (!(status in statusCodeMap)) {\n    throw new Error(`Invalid status code ${status}`);\n  }\n  return statusCodeMap[status];\n}\nconst StatusCodesSchema = z.nativeEnum(StatusCodes);\nconst StatusSchema = z.object({\n  code: StatusCodesSchema,\n  message: z.string(),\n  details: z.any().optional()\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=statusTypes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3N0YXR1c1R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLDhCQUE4QjtBQUN2RztBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLGdCQUFnQixtQkFBTyxDQUFDLDZEQUFLO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxtQkFBbUI7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsT0FBTztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsTUFBTSxDQUtMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWpzLWFwcC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3N0YXR1c1R5cGVzLmpzP2U1YzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHN0YXR1c1R5cGVzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHN0YXR1c1R5cGVzX2V4cG9ydHMsIHtcbiAgU3RhdHVzQ29kZXM6ICgpID0+IFN0YXR1c0NvZGVzLFxuICBTdGF0dXNOYW1lU2NoZW1hOiAoKSA9PiBTdGF0dXNOYW1lU2NoZW1hLFxuICBTdGF0dXNTY2hlbWE6ICgpID0+IFN0YXR1c1NjaGVtYSxcbiAgaHR0cFN0YXR1c0NvZGU6ICgpID0+IGh0dHBTdGF0dXNDb2RlXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHN0YXR1c1R5cGVzX2V4cG9ydHMpO1xudmFyIHogPSBfX3RvRVNNKHJlcXVpcmUoXCJ6b2RcIikpO1xudmFyIFN0YXR1c0NvZGVzID0gLyogQF9fUFVSRV9fICovICgoU3RhdHVzQ29kZXMyKSA9PiB7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJPS1wiXSA9IDBdID0gXCJPS1wiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiQ0FOQ0VMTEVEXCJdID0gMV0gPSBcIkNBTkNFTExFRFwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiVU5LTk9XTlwiXSA9IDJdID0gXCJVTktOT1dOXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJJTlZBTElEX0FSR1VNRU5UXCJdID0gM10gPSBcIklOVkFMSURfQVJHVU1FTlRcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIkRFQURMSU5FX0VYQ0VFREVEXCJdID0gNF0gPSBcIkRFQURMSU5FX0VYQ0VFREVEXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJOT1RfRk9VTkRcIl0gPSA1XSA9IFwiTk9UX0ZPVU5EXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJBTFJFQURZX0VYSVNUU1wiXSA9IDZdID0gXCJBTFJFQURZX0VYSVNUU1wiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiUEVSTUlTU0lPTl9ERU5JRURcIl0gPSA3XSA9IFwiUEVSTUlTU0lPTl9ERU5JRURcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIlVOQVVUSEVOVElDQVRFRFwiXSA9IDE2XSA9IFwiVU5BVVRIRU5USUNBVEVEXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJSRVNPVVJDRV9FWEhBVVNURURcIl0gPSA4XSA9IFwiUkVTT1VSQ0VfRVhIQVVTVEVEXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJGQUlMRURfUFJFQ09ORElUSU9OXCJdID0gOV0gPSBcIkZBSUxFRF9QUkVDT05ESVRJT05cIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIkFCT1JURURcIl0gPSAxMF0gPSBcIkFCT1JURURcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIk9VVF9PRl9SQU5HRVwiXSA9IDExXSA9IFwiT1VUX09GX1JBTkdFXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJVTklNUExFTUVOVEVEXCJdID0gMTJdID0gXCJVTklNUExFTUVOVEVEXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJJTlRFUk5BTFwiXSA9IDEzXSA9IFwiSU5URVJOQUxcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIlVOQVZBSUxBQkxFXCJdID0gMTRdID0gXCJVTkFWQUlMQUJMRVwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiREFUQV9MT1NTXCJdID0gMTVdID0gXCJEQVRBX0xPU1NcIjtcbiAgcmV0dXJuIFN0YXR1c0NvZGVzMjtcbn0pKFN0YXR1c0NvZGVzIHx8IHt9KTtcbmNvbnN0IFN0YXR1c05hbWVTY2hlbWEgPSB6LmVudW0oW1xuICBcIk9LXCIsXG4gIFwiQ0FOQ0VMTEVEXCIsXG4gIFwiVU5LTk9XTlwiLFxuICBcIklOVkFMSURfQVJHVU1FTlRcIixcbiAgXCJERUFETElORV9FWENFRURFRFwiLFxuICBcIk5PVF9GT1VORFwiLFxuICBcIkFMUkVBRFlfRVhJU1RTXCIsXG4gIFwiUEVSTUlTU0lPTl9ERU5JRURcIixcbiAgXCJVTkFVVEhFTlRJQ0FURURcIixcbiAgXCJSRVNPVVJDRV9FWEhBVVNURURcIixcbiAgXCJGQUlMRURfUFJFQ09ORElUSU9OXCIsXG4gIFwiQUJPUlRFRFwiLFxuICBcIk9VVF9PRl9SQU5HRVwiLFxuICBcIlVOSU1QTEVNRU5URURcIixcbiAgXCJJTlRFUk5BTFwiLFxuICBcIlVOQVZBSUxBQkxFXCIsXG4gIFwiREFUQV9MT1NTXCJcbl0pO1xuY29uc3Qgc3RhdHVzQ29kZU1hcCA9IHtcbiAgT0s6IDIwMCxcbiAgQ0FOQ0VMTEVEOiA0OTksXG4gIFVOS05PV046IDUwMCxcbiAgSU5WQUxJRF9BUkdVTUVOVDogNDAwLFxuICBERUFETElORV9FWENFRURFRDogNTA0LFxuICBOT1RfRk9VTkQ6IDQwNCxcbiAgQUxSRUFEWV9FWElTVFM6IDQwOSxcbiAgUEVSTUlTU0lPTl9ERU5JRUQ6IDQwMyxcbiAgVU5BVVRIRU5USUNBVEVEOiA0MDEsXG4gIFJFU09VUkNFX0VYSEFVU1RFRDogNDI5LFxuICBGQUlMRURfUFJFQ09ORElUSU9OOiA0MDAsXG4gIEFCT1JURUQ6IDQwOSxcbiAgT1VUX09GX1JBTkdFOiA0MDAsXG4gIFVOSU1QTEVNRU5URUQ6IDUwMSxcbiAgSU5URVJOQUw6IDUwMCxcbiAgVU5BVkFJTEFCTEU6IDUwMyxcbiAgREFUQV9MT1NTOiA1MDBcbn07XG5mdW5jdGlvbiBodHRwU3RhdHVzQ29kZShzdGF0dXMpIHtcbiAgaWYgKCEoc3RhdHVzIGluIHN0YXR1c0NvZGVNYXApKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHN0YXR1cyBjb2RlICR7c3RhdHVzfWApO1xuICB9XG4gIHJldHVybiBzdGF0dXNDb2RlTWFwW3N0YXR1c107XG59XG5jb25zdCBTdGF0dXNDb2Rlc1NjaGVtYSA9IHoubmF0aXZlRW51bShTdGF0dXNDb2Rlcyk7XG5jb25zdCBTdGF0dXNTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGNvZGU6IFN0YXR1c0NvZGVzU2NoZW1hLFxuICBtZXNzYWdlOiB6LnN0cmluZygpLFxuICBkZXRhaWxzOiB6LmFueSgpLm9wdGlvbmFsKClcbn0pO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIFN0YXR1c0NvZGVzLFxuICBTdGF0dXNOYW1lU2NoZW1hLFxuICBTdGF0dXNTY2hlbWEsXG4gIGh0dHBTdGF0dXNDb2RlXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXR1c1R5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/statusTypes.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/telemetryTypes.js":
/*!************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/telemetryTypes.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar telemetryTypes_exports = {};\nmodule.exports = __toCommonJS(telemetryTypes_exports);\n//# sourceMappingURL=telemetryTypes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RlbGVtZXRyeVR5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtanMtYXBwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvdGVsZW1ldHJ5VHlwZXMuanM/M2ViMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgdGVsZW1ldHJ5VHlwZXNfZXhwb3J0cyA9IHt9O1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlModGVsZW1ldHJ5VHlwZXNfZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZWxlbWV0cnlUeXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/telemetryTypes.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar tracing_exports = {};\n__export(tracing_exports, {\n  enableTelemetry: () => enableTelemetry,\n  ensureBasicTelemetryInstrumentation: () => ensureBasicTelemetryInstrumentation,\n  flushTracing: () => flushTracing,\n  setTelemetryProvider: () => setTelemetryProvider\n});\nmodule.exports = __toCommonJS(tracing_exports);\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nvar import_logging = __webpack_require__(/*! ./logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/exporter.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js\"), module.exports);\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/instrumentation.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js\"), module.exports);\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/types.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/types.js\"), module.exports);\nconst instrumentationKey = \"__GENKIT_TELEMETRY_INSTRUMENTED\";\nconst telemetryProviderKey = \"__GENKIT_TELEMETRY_PROVIDER\";\nasync function ensureBasicTelemetryInstrumentation() {\n  await checkFirebaseMonitoringAutoInit();\n  if (global[instrumentationKey]) {\n    return await global[instrumentationKey];\n  }\n  await enableTelemetry({});\n}\nasync function checkFirebaseMonitoringAutoInit() {\n  if (!global[instrumentationKey] && process.env.ENABLE_FIREBASE_MONITORING === \"true\") {\n    try {\n      const importModule = new Function(\n        \"moduleName\",\n        \"return import(moduleName)\"\n      );\n      const firebaseModule = await importModule(\"@genkit-ai/firebase\");\n      firebaseModule.enableFirebaseTelemetry();\n    } catch (e) {\n      import_logging.logger.warn(\n        \"It looks like you're trying to enable firebase monitoring, but haven't installed the firebase plugin. Please run `npm i --save @genkit-ai/firebase` and redeploy.\"\n      );\n    }\n  }\n}\nfunction getTelemetryProvider() {\n  if (global[telemetryProviderKey]) {\n    return global[telemetryProviderKey];\n  }\n  throw new import_error.GenkitError({\n    status: \"FAILED_PRECONDITION\",\n    message: \"TelemetryProvider is not initialized.\"\n  });\n}\nfunction setTelemetryProvider(provider) {\n  if (global[telemetryProviderKey]) return;\n  global[telemetryProviderKey] = provider;\n}\nasync function enableTelemetry(telemetryConfig) {\n  global[instrumentationKey] = telemetryConfig instanceof Promise ? telemetryConfig : Promise.resolve();\n  return getTelemetryProvider().enableTelemetry(telemetryConfig);\n}\nasync function flushTracing() {\n  return getTelemetryProvider().flushTracing();\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=tracing.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG1CQUFtQixtQkFBTyxDQUFDLGdGQUFZO0FBQ3ZDLHFCQUFxQixtQkFBTyxDQUFDLG9GQUFjO0FBQzNDLDRCQUE0QixtQkFBTyxDQUFDLHNHQUF1QjtBQUMzRCw0QkFBNEIsbUJBQU8sQ0FBQyxvSEFBOEI7QUFDbEUsNEJBQTRCLG1CQUFPLENBQUMsZ0dBQW9CO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQVFMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWpzLWFwcC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcuanM/NjU3MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fcmVFeHBvcnQgPSAodGFyZ2V0LCBtb2QsIHNlY29uZFRhcmdldCkgPT4gKF9fY29weVByb3BzKHRhcmdldCwgbW9kLCBcImRlZmF1bHRcIiksIHNlY29uZFRhcmdldCAmJiBfX2NvcHlQcm9wcyhzZWNvbmRUYXJnZXQsIG1vZCwgXCJkZWZhdWx0XCIpKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHRyYWNpbmdfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQodHJhY2luZ19leHBvcnRzLCB7XG4gIGVuYWJsZVRlbGVtZXRyeTogKCkgPT4gZW5hYmxlVGVsZW1ldHJ5LFxuICBlbnN1cmVCYXNpY1RlbGVtZXRyeUluc3RydW1lbnRhdGlvbjogKCkgPT4gZW5zdXJlQmFzaWNUZWxlbWV0cnlJbnN0cnVtZW50YXRpb24sXG4gIGZsdXNoVHJhY2luZzogKCkgPT4gZmx1c2hUcmFjaW5nLFxuICBzZXRUZWxlbWV0cnlQcm92aWRlcjogKCkgPT4gc2V0VGVsZW1ldHJ5UHJvdmlkZXJcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlModHJhY2luZ19leHBvcnRzKTtcbnZhciBpbXBvcnRfZXJyb3IgPSByZXF1aXJlKFwiLi9lcnJvci5qc1wiKTtcbnZhciBpbXBvcnRfbG9nZ2luZyA9IHJlcXVpcmUoXCIuL2xvZ2dpbmcuanNcIik7XG5fX3JlRXhwb3J0KHRyYWNpbmdfZXhwb3J0cywgcmVxdWlyZShcIi4vdHJhY2luZy9leHBvcnRlci5qc1wiKSwgbW9kdWxlLmV4cG9ydHMpO1xuX19yZUV4cG9ydCh0cmFjaW5nX2V4cG9ydHMsIHJlcXVpcmUoXCIuL3RyYWNpbmcvaW5zdHJ1bWVudGF0aW9uLmpzXCIpLCBtb2R1bGUuZXhwb3J0cyk7XG5fX3JlRXhwb3J0KHRyYWNpbmdfZXhwb3J0cywgcmVxdWlyZShcIi4vdHJhY2luZy90eXBlcy5qc1wiKSwgbW9kdWxlLmV4cG9ydHMpO1xuY29uc3QgaW5zdHJ1bWVudGF0aW9uS2V5ID0gXCJfX0dFTktJVF9URUxFTUVUUllfSU5TVFJVTUVOVEVEXCI7XG5jb25zdCB0ZWxlbWV0cnlQcm92aWRlcktleSA9IFwiX19HRU5LSVRfVEVMRU1FVFJZX1BST1ZJREVSXCI7XG5hc3luYyBmdW5jdGlvbiBlbnN1cmVCYXNpY1RlbGVtZXRyeUluc3RydW1lbnRhdGlvbigpIHtcbiAgYXdhaXQgY2hlY2tGaXJlYmFzZU1vbml0b3JpbmdBdXRvSW5pdCgpO1xuICBpZiAoZ2xvYmFsW2luc3RydW1lbnRhdGlvbktleV0pIHtcbiAgICByZXR1cm4gYXdhaXQgZ2xvYmFsW2luc3RydW1lbnRhdGlvbktleV07XG4gIH1cbiAgYXdhaXQgZW5hYmxlVGVsZW1ldHJ5KHt9KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGNoZWNrRmlyZWJhc2VNb25pdG9yaW5nQXV0b0luaXQoKSB7XG4gIGlmICghZ2xvYmFsW2luc3RydW1lbnRhdGlvbktleV0gJiYgcHJvY2Vzcy5lbnYuRU5BQkxFX0ZJUkVCQVNFX01PTklUT1JJTkcgPT09IFwidHJ1ZVwiKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGltcG9ydE1vZHVsZSA9IG5ldyBGdW5jdGlvbihcbiAgICAgICAgXCJtb2R1bGVOYW1lXCIsXG4gICAgICAgIFwicmV0dXJuIGltcG9ydChtb2R1bGVOYW1lKVwiXG4gICAgICApO1xuICAgICAgY29uc3QgZmlyZWJhc2VNb2R1bGUgPSBhd2FpdCBpbXBvcnRNb2R1bGUoXCJAZ2Vua2l0LWFpL2ZpcmViYXNlXCIpO1xuICAgICAgZmlyZWJhc2VNb2R1bGUuZW5hYmxlRmlyZWJhc2VUZWxlbWV0cnkoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpbXBvcnRfbG9nZ2luZy5sb2dnZXIud2FybihcbiAgICAgICAgXCJJdCBsb29rcyBsaWtlIHlvdSdyZSB0cnlpbmcgdG8gZW5hYmxlIGZpcmViYXNlIG1vbml0b3JpbmcsIGJ1dCBoYXZlbid0IGluc3RhbGxlZCB0aGUgZmlyZWJhc2UgcGx1Z2luLiBQbGVhc2UgcnVuIGBucG0gaSAtLXNhdmUgQGdlbmtpdC1haS9maXJlYmFzZWAgYW5kIHJlZGVwbG95LlwiXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2V0VGVsZW1ldHJ5UHJvdmlkZXIoKSB7XG4gIGlmIChnbG9iYWxbdGVsZW1ldHJ5UHJvdmlkZXJLZXldKSB7XG4gICAgcmV0dXJuIGdsb2JhbFt0ZWxlbWV0cnlQcm92aWRlcktleV07XG4gIH1cbiAgdGhyb3cgbmV3IGltcG9ydF9lcnJvci5HZW5raXRFcnJvcih7XG4gICAgc3RhdHVzOiBcIkZBSUxFRF9QUkVDT05ESVRJT05cIixcbiAgICBtZXNzYWdlOiBcIlRlbGVtZXRyeVByb3ZpZGVyIGlzIG5vdCBpbml0aWFsaXplZC5cIlxuICB9KTtcbn1cbmZ1bmN0aW9uIHNldFRlbGVtZXRyeVByb3ZpZGVyKHByb3ZpZGVyKSB7XG4gIGlmIChnbG9iYWxbdGVsZW1ldHJ5UHJvdmlkZXJLZXldKSByZXR1cm47XG4gIGdsb2JhbFt0ZWxlbWV0cnlQcm92aWRlcktleV0gPSBwcm92aWRlcjtcbn1cbmFzeW5jIGZ1bmN0aW9uIGVuYWJsZVRlbGVtZXRyeSh0ZWxlbWV0cnlDb25maWcpIHtcbiAgZ2xvYmFsW2luc3RydW1lbnRhdGlvbktleV0gPSB0ZWxlbWV0cnlDb25maWcgaW5zdGFuY2VvZiBQcm9taXNlID8gdGVsZW1ldHJ5Q29uZmlnIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gIHJldHVybiBnZXRUZWxlbWV0cnlQcm92aWRlcigpLmVuYWJsZVRlbGVtZXRyeSh0ZWxlbWV0cnlDb25maWcpO1xufVxuYXN5bmMgZnVuY3Rpb24gZmx1c2hUcmFjaW5nKCkge1xuICByZXR1cm4gZ2V0VGVsZW1ldHJ5UHJvdmlkZXIoKS5mbHVzaFRyYWNpbmcoKTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBlbmFibGVUZWxlbWV0cnksXG4gIGVuc3VyZUJhc2ljVGVsZW1ldHJ5SW5zdHJ1bWVudGF0aW9uLFxuICBmbHVzaFRyYWNpbmcsXG4gIHNldFRlbGVtZXRyeVByb3ZpZGVyLFxuICAuLi5yZXF1aXJlKFwiLi90cmFjaW5nL2V4cG9ydGVyLmpzXCIpLFxuICAuLi5yZXF1aXJlKFwiLi90cmFjaW5nL2luc3RydW1lbnRhdGlvbi5qc1wiKSxcbiAgLi4ucmVxdWlyZShcIi4vdHJhY2luZy90eXBlcy5qc1wiKVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFjaW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js":
/*!**************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/exporter.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar exporter_exports = {};\n__export(exporter_exports, {\n  TraceServerExporter: () => TraceServerExporter,\n  setTelemetryServerUrl: () => setTelemetryServerUrl,\n  telemetryServerUrl: () => telemetryServerUrl\n});\nmodule.exports = __toCommonJS(exporter_exports);\nvar import_api = __webpack_require__(/*! @opentelemetry/api */ \"(action-browser)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nvar import_core = __webpack_require__(/*! @opentelemetry/core */ \"(action-browser)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nvar import_logging = __webpack_require__(/*! ../logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_utils = __webpack_require__(/*! ../utils.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js\");\nlet telemetryServerUrl;\nfunction setTelemetryServerUrl(url) {\n  telemetryServerUrl = url;\n}\nclass TraceServerExporter {\n  /**\n   * Export spans.\n   * @param spans\n   * @param resultCallback\n   */\n  export(spans, resultCallback) {\n    this._sendSpans(spans, resultCallback);\n  }\n  /**\n   * Shutdown the exporter.\n   */\n  shutdown() {\n    this._sendSpans([]);\n    return this.forceFlush();\n  }\n  /**\n   * Converts span info into trace store format.\n   * @param span\n   */\n  _exportInfo(span) {\n    const spanData = {\n      spanId: span.spanContext().spanId,\n      traceId: span.spanContext().traceId,\n      startTime: transformTime(span.startTime),\n      endTime: transformTime(span.endTime),\n      attributes: { ...span.attributes },\n      displayName: span.name,\n      links: span.links,\n      spanKind: import_api.SpanKind[span.kind],\n      parentSpanId: span.parentSpanId,\n      sameProcessAsParentSpan: { value: !span.spanContext().isRemote },\n      status: span.status,\n      timeEvents: {\n        timeEvent: span.events.map((e) => ({\n          time: transformTime(e.time),\n          annotation: {\n            attributes: e.attributes ?? {},\n            description: e.name\n          }\n        }))\n      }\n    };\n    if (span.instrumentationLibrary !== void 0) {\n      spanData.instrumentationLibrary = {\n        name: span.instrumentationLibrary.name\n      };\n      if (span.instrumentationLibrary.schemaUrl !== void 0) {\n        spanData.instrumentationLibrary.schemaUrl = span.instrumentationLibrary.schemaUrl;\n      }\n      if (span.instrumentationLibrary.version !== void 0) {\n        spanData.instrumentationLibrary.version = span.instrumentationLibrary.version;\n      }\n    }\n    (0, import_utils.deleteUndefinedProps)(spanData);\n    return spanData;\n  }\n  /**\n   * Exports any pending spans in exporter\n   */\n  forceFlush() {\n    return Promise.resolve();\n  }\n  async _sendSpans(spans, done) {\n    const traces = {};\n    for (const span of spans) {\n      if (!traces[span.spanContext().traceId]) {\n        traces[span.spanContext().traceId] = [];\n      }\n      traces[span.spanContext().traceId].push(span);\n    }\n    let error = false;\n    for (const traceId of Object.keys(traces)) {\n      try {\n        await this.save(traceId, traces[traceId]);\n      } catch (e) {\n        error = true;\n        import_logging.logger.error(`Failed to save trace ${traceId}`, e);\n      }\n      if (done) {\n        return done({\n          code: error ? import_core.ExportResultCode.FAILED : import_core.ExportResultCode.SUCCESS\n        });\n      }\n    }\n  }\n  async save(traceId, spans) {\n    if (!telemetryServerUrl) {\n      import_logging.logger.debug(\n        `Telemetry server is not configured, trace ${traceId} not saved!`\n      );\n      return;\n    }\n    const data = {\n      traceId,\n      spans: {}\n    };\n    for (const span of spans) {\n      const convertedSpan = this._exportInfo(span);\n      data.spans[convertedSpan.spanId] = convertedSpan;\n      if (!convertedSpan.parentSpanId) {\n        data.displayName = convertedSpan.displayName;\n        data.startTime = convertedSpan.startTime;\n        data.endTime = convertedSpan.endTime;\n      }\n    }\n    await fetch(`${telemetryServerUrl}/api/traces`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n  }\n}\nfunction transformTime(time) {\n  return (0, import_core.hrTimeToMilliseconds)(time);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=exporter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar instrumentation_exports = {};\n__export(instrumentation_exports, {\n  ATTR_PREFIX: () => ATTR_PREFIX,\n  SPAN_TYPE_ATTR: () => SPAN_TYPE_ATTR,\n  appendSpan: () => appendSpan,\n  disableOTelRootSpanDetection: () => disableOTelRootSpanDetection,\n  runInNewSpan: () => runInNewSpan,\n  setCustomMetadataAttribute: () => setCustomMetadataAttribute,\n  setCustomMetadataAttributes: () => setCustomMetadataAttributes,\n  spanMetadataAlsKey: () => spanMetadataAlsKey,\n  toDisplayPath: () => toDisplayPath\n});\nmodule.exports = __toCommonJS(instrumentation_exports);\nvar import_api = __webpack_require__(/*! @opentelemetry/api */ \"(action-browser)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nvar import_node_perf_hooks = __webpack_require__(/*! node:perf_hooks */ \"node:perf_hooks\");\nvar import_async_context = __webpack_require__(/*! ../async-context.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async-context.js\");\nvar import_tracing = __webpack_require__(/*! ../tracing.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nconst spanMetadataAlsKey = \"core.tracing.instrumentation.span\";\nconst ATTR_PREFIX = \"genkit\";\nconst SPAN_TYPE_ATTR = ATTR_PREFIX + \":type\";\nconst TRACER_NAME = \"genkit-tracer\";\nconst TRACER_VERSION = \"v1\";\nasync function runInNewSpan(registryOrOprs, optsOrFn, fnMaybe) {\n  let opts;\n  let fn;\n  if (arguments.length === 3) {\n    opts = optsOrFn;\n    fn = fnMaybe;\n  } else {\n    opts = registryOrOprs;\n    fn = optsOrFn;\n  }\n  await (0, import_tracing.ensureBasicTelemetryInstrumentation)();\n  const tracer = import_api.trace.getTracer(TRACER_NAME, TRACER_VERSION);\n  const parentStep = (0, import_async_context.getAsyncContext)().getStore(spanMetadataAlsKey);\n  const isInRoot = parentStep?.metadata?.isRoot === true;\n  if (!parentStep) opts.metadata.isRoot ||= true;\n  const spanOptions = { links: opts.links };\n  if (!isDisableRootSpanDetection()) {\n    spanOptions.root = opts.metadata.isRoot;\n  }\n  return await tracer.startActiveSpan(\n    opts.metadata.name,\n    spanOptions,\n    async (otSpan) => {\n      if (opts.labels) otSpan.setAttributes(opts.labels);\n      const spanContext = {\n        ...parentStep,\n        metadata: opts.metadata\n      };\n      try {\n        opts.metadata.path = buildPath(\n          opts.metadata.name,\n          parentStep?.metadata?.path || \"\",\n          opts.labels\n        );\n        const output = await (0, import_async_context.getAsyncContext)().run(\n          spanMetadataAlsKey,\n          spanContext,\n          () => fn(opts.metadata, otSpan, isInRoot)\n        );\n        if (opts.metadata.state !== \"error\") {\n          opts.metadata.state = \"success\";\n        }\n        recordPath(opts.metadata, spanContext);\n        return output;\n      } catch (e) {\n        recordPath(opts.metadata, spanContext, e);\n        opts.metadata.state = \"error\";\n        otSpan.setStatus({\n          code: import_api.SpanStatusCode.ERROR,\n          message: getErrorMessage(e)\n        });\n        if (e instanceof Error) {\n          otSpan.recordException(e);\n        }\n        if (typeof e === \"object\") {\n          if (!e.ignoreFailedSpan) {\n            opts.metadata.isFailureSource = true;\n          }\n          e.ignoreFailedSpan = true;\n        }\n        throw e;\n      } finally {\n        otSpan.setAttributes(metadataToAttributes(opts.metadata));\n        otSpan.end();\n      }\n    }\n  );\n}\nasync function appendSpan(traceId, parentSpanId, metadata, labels) {\n  await (0, import_tracing.ensureBasicTelemetryInstrumentation)();\n  const tracer = import_api.trace.getTracer(TRACER_NAME, TRACER_VERSION);\n  const spanContext = import_api.trace.setSpanContext(import_api.ROOT_CONTEXT, {\n    traceId,\n    traceFlags: 1,\n    // sampled\n    spanId: parentSpanId\n  });\n  const span = tracer.startSpan(metadata.name, {}, spanContext);\n  span.setAttributes(metadataToAttributes(metadata));\n  if (labels) {\n    span.setAttributes(labels);\n  }\n  span.end();\n}\nfunction getErrorMessage(e) {\n  if (e instanceof Error) {\n    return e.message;\n  }\n  return `${e}`;\n}\nfunction metadataToAttributes(metadata) {\n  const out = {};\n  Object.keys(metadata).forEach((key) => {\n    if (key === \"metadata\" && typeof metadata[key] === \"object\" && metadata.metadata) {\n      Object.entries(metadata.metadata).forEach(([metaKey, value]) => {\n        out[ATTR_PREFIX + \":metadata:\" + metaKey] = value;\n      });\n    } else if (key === \"input\" || typeof metadata[key] === \"object\") {\n      out[ATTR_PREFIX + \":\" + key] = JSON.stringify(metadata[key]);\n    } else {\n      out[ATTR_PREFIX + \":\" + key] = metadata[key];\n    }\n  });\n  return out;\n}\nfunction setCustomMetadataAttribute(key, value) {\n  const currentStep = getCurrentSpan();\n  if (!currentStep) {\n    return;\n  }\n  if (!currentStep.metadata) {\n    currentStep.metadata = {};\n  }\n  currentStep.metadata[key] = value;\n}\nfunction setCustomMetadataAttributes(values) {\n  const currentStep = getCurrentSpan();\n  if (!currentStep) {\n    return;\n  }\n  if (!currentStep.metadata) {\n    currentStep.metadata = {};\n  }\n  for (const [key, value] of Object.entries(values)) {\n    currentStep.metadata[key] = value;\n  }\n}\nfunction toDisplayPath(path) {\n  const pathPartRegex = /\\{([^\\,}]+),[^\\}]+\\}/g;\n  return Array.from(path.matchAll(pathPartRegex), (m) => m[1]).join(\" > \");\n}\nfunction getCurrentSpan() {\n  const step = (0, import_async_context.getAsyncContext)().getStore(spanMetadataAlsKey);\n  if (!step) {\n    throw new Error(\"running outside step context\");\n  }\n  return step.metadata;\n}\nfunction buildPath(name, parentPath, labels) {\n  const stepType = labels && labels[\"genkit:type\"] ? `,t:${labels[\"genkit:metadata:subtype\"] === \"flow\" ? \"flow\" : labels[\"genkit:type\"]}` : \"\";\n  return parentPath + `/{${name}${stepType}}`;\n}\nfunction recordPath(spanMeta, spanContext, err) {\n  const path = spanMeta.path || \"\";\n  const decoratedPath = decoratePathWithSubtype(spanMeta);\n  const paths = Array.from(spanContext?.paths || /* @__PURE__ */ new Set());\n  const status = err ? \"failure\" : \"success\";\n  if (!paths.some((p) => p.path.startsWith(path) && p.status === status)) {\n    const now = import_node_perf_hooks.performance.now();\n    const start = spanContext?.timestamp || now;\n    spanContext?.paths?.add({\n      path: decoratedPath,\n      error: err?.name,\n      latency: now - start,\n      status\n    });\n  }\n  spanMeta.path = decoratedPath;\n}\nfunction decoratePathWithSubtype(metadata) {\n  if (!metadata.path) {\n    return \"\";\n  }\n  const pathComponents = metadata.path.split(\"}/{\");\n  if (pathComponents.length == 1) {\n    return metadata.path;\n  }\n  const stepSubtype = metadata.metadata && metadata.metadata[\"subtype\"] ? `,s:${metadata.metadata[\"subtype\"]}` : \"\";\n  const root = `${pathComponents.slice(0, -1).join(\"}/{\")}}/`;\n  const decoratedStep = `{${pathComponents.at(-1)?.slice(0, -1)}${stepSubtype}}`;\n  return root + decoratedStep;\n}\nconst rootSpanDetectionKey = \"__genkit_disableRootSpanDetection\";\nfunction isDisableRootSpanDetection() {\n  return global[rootSpanDetectionKey] === true;\n}\nfunction disableOTelRootSpanDetection() {\n  global[rootSpanDetectionKey] = true;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/node-telemetry-provider.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/node-telemetry-provider.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar node_telemetry_provider_exports = {};\n__export(node_telemetry_provider_exports, {\n  initNodeTelemetryProvider: () => initNodeTelemetryProvider\n});\nmodule.exports = __toCommonJS(node_telemetry_provider_exports);\nvar import_sdk_node = __webpack_require__(/*! @opentelemetry/sdk-node */ \"(action-browser)/./node_modules/@opentelemetry/sdk-node/build/src/index.js\");\nvar import_sdk_trace_base = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"(action-browser)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\nvar import_logging = __webpack_require__(/*! ../logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_tracing = __webpack_require__(/*! ../tracing.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_utils = __webpack_require__(/*! ../utils.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js\");\nvar import_exporter = __webpack_require__(/*! ./exporter.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js\");\nlet telemetrySDK = null;\nlet nodeOtelConfig = null;\nfunction initNodeTelemetryProvider() {\n  (0, import_tracing.setTelemetryProvider)({\n    enableTelemetry,\n    flushTracing\n  });\n}\nasync function enableTelemetry(telemetryConfig) {\n  if (process.env.GENKIT_TELEMETRY_SERVER) {\n    (0, import_exporter.setTelemetryServerUrl)(process.env.GENKIT_TELEMETRY_SERVER);\n  }\n  telemetryConfig = telemetryConfig instanceof Promise ? await telemetryConfig : telemetryConfig;\n  nodeOtelConfig = telemetryConfig || {};\n  const processors = [createTelemetryServerProcessor()];\n  if (nodeOtelConfig.traceExporter) {\n    throw new Error(\"Please specify spanProcessors instead.\");\n  }\n  if (nodeOtelConfig.spanProcessors) {\n    processors.push(...nodeOtelConfig.spanProcessors);\n  }\n  if (nodeOtelConfig.spanProcessor) {\n    processors.push(nodeOtelConfig.spanProcessor);\n    delete nodeOtelConfig.spanProcessor;\n  }\n  nodeOtelConfig.spanProcessors = processors;\n  telemetrySDK = new import_sdk_node.NodeSDK(nodeOtelConfig);\n  telemetrySDK.start();\n  process.on(\"SIGTERM\", async () => await cleanUpTracing());\n}\nasync function cleanUpTracing() {\n  if (!telemetrySDK) {\n    return;\n  }\n  await maybeFlushMetrics();\n  await telemetrySDK.shutdown();\n  import_logging.logger.debug(\"OpenTelemetry SDK shut down.\");\n  telemetrySDK = null;\n}\nfunction createTelemetryServerProcessor() {\n  const exporter = new import_exporter.TraceServerExporter();\n  return (0, import_utils.isDevEnv)() ? new import_sdk_trace_base.SimpleSpanProcessor(exporter) : new import_sdk_trace_base.BatchSpanProcessor(exporter);\n}\nfunction maybeFlushMetrics() {\n  if (nodeOtelConfig?.metricReader) {\n    return nodeOtelConfig.metricReader.forceFlush();\n  }\n  return Promise.resolve();\n}\nasync function flushTracing() {\n  if (nodeOtelConfig?.spanProcessors) {\n    await Promise.all(nodeOtelConfig.spanProcessors.map((p) => p.forceFlush()));\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=node-telemetry-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcvbm9kZS10ZWxlbWV0cnktcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxzQkFBc0IsbUJBQU8sQ0FBQywyR0FBeUI7QUFDdkQsNEJBQTRCLG1CQUFPLENBQUMsdUhBQStCO0FBQ25FLHFCQUFxQixtQkFBTyxDQUFDLHFGQUFlO0FBQzVDLHFCQUFxQixtQkFBTyxDQUFDLHFGQUFlO0FBQzVDLG1CQUFtQixtQkFBTyxDQUFDLGlGQUFhO0FBQ3hDLHNCQUFzQixtQkFBTyxDQUFDLDhGQUFlO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtanMtYXBwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvdHJhY2luZy9ub2RlLXRlbGVtZXRyeS1wcm92aWRlci5qcz9iNTczIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBub2RlX3RlbGVtZXRyeV9wcm92aWRlcl9leHBvcnRzID0ge307XG5fX2V4cG9ydChub2RlX3RlbGVtZXRyeV9wcm92aWRlcl9leHBvcnRzLCB7XG4gIGluaXROb2RlVGVsZW1ldHJ5UHJvdmlkZXI6ICgpID0+IGluaXROb2RlVGVsZW1ldHJ5UHJvdmlkZXJcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMobm9kZV90ZWxlbWV0cnlfcHJvdmlkZXJfZXhwb3J0cyk7XG52YXIgaW1wb3J0X3Nka19ub2RlID0gcmVxdWlyZShcIkBvcGVudGVsZW1ldHJ5L3Nkay1ub2RlXCIpO1xudmFyIGltcG9ydF9zZGtfdHJhY2VfYmFzZSA9IHJlcXVpcmUoXCJAb3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZVwiKTtcbnZhciBpbXBvcnRfbG9nZ2luZyA9IHJlcXVpcmUoXCIuLi9sb2dnaW5nLmpzXCIpO1xudmFyIGltcG9ydF90cmFjaW5nID0gcmVxdWlyZShcIi4uL3RyYWNpbmcuanNcIik7XG52YXIgaW1wb3J0X3V0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzLmpzXCIpO1xudmFyIGltcG9ydF9leHBvcnRlciA9IHJlcXVpcmUoXCIuL2V4cG9ydGVyLmpzXCIpO1xubGV0IHRlbGVtZXRyeVNESyA9IG51bGw7XG5sZXQgbm9kZU90ZWxDb25maWcgPSBudWxsO1xuZnVuY3Rpb24gaW5pdE5vZGVUZWxlbWV0cnlQcm92aWRlcigpIHtcbiAgKDAsIGltcG9ydF90cmFjaW5nLnNldFRlbGVtZXRyeVByb3ZpZGVyKSh7XG4gICAgZW5hYmxlVGVsZW1ldHJ5LFxuICAgIGZsdXNoVHJhY2luZ1xuICB9KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGVuYWJsZVRlbGVtZXRyeSh0ZWxlbWV0cnlDb25maWcpIHtcbiAgaWYgKHByb2Nlc3MuZW52LkdFTktJVF9URUxFTUVUUllfU0VSVkVSKSB7XG4gICAgKDAsIGltcG9ydF9leHBvcnRlci5zZXRUZWxlbWV0cnlTZXJ2ZXJVcmwpKHByb2Nlc3MuZW52LkdFTktJVF9URUxFTUVUUllfU0VSVkVSKTtcbiAgfVxuICB0ZWxlbWV0cnlDb25maWcgPSB0ZWxlbWV0cnlDb25maWcgaW5zdGFuY2VvZiBQcm9taXNlID8gYXdhaXQgdGVsZW1ldHJ5Q29uZmlnIDogdGVsZW1ldHJ5Q29uZmlnO1xuICBub2RlT3RlbENvbmZpZyA9IHRlbGVtZXRyeUNvbmZpZyB8fCB7fTtcbiAgY29uc3QgcHJvY2Vzc29ycyA9IFtjcmVhdGVUZWxlbWV0cnlTZXJ2ZXJQcm9jZXNzb3IoKV07XG4gIGlmIChub2RlT3RlbENvbmZpZy50cmFjZUV4cG9ydGVyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHNwZWNpZnkgc3BhblByb2Nlc3NvcnMgaW5zdGVhZC5cIik7XG4gIH1cbiAgaWYgKG5vZGVPdGVsQ29uZmlnLnNwYW5Qcm9jZXNzb3JzKSB7XG4gICAgcHJvY2Vzc29ycy5wdXNoKC4uLm5vZGVPdGVsQ29uZmlnLnNwYW5Qcm9jZXNzb3JzKTtcbiAgfVxuICBpZiAobm9kZU90ZWxDb25maWcuc3BhblByb2Nlc3Nvcikge1xuICAgIHByb2Nlc3NvcnMucHVzaChub2RlT3RlbENvbmZpZy5zcGFuUHJvY2Vzc29yKTtcbiAgICBkZWxldGUgbm9kZU90ZWxDb25maWcuc3BhblByb2Nlc3NvcjtcbiAgfVxuICBub2RlT3RlbENvbmZpZy5zcGFuUHJvY2Vzc29ycyA9IHByb2Nlc3NvcnM7XG4gIHRlbGVtZXRyeVNESyA9IG5ldyBpbXBvcnRfc2RrX25vZGUuTm9kZVNESyhub2RlT3RlbENvbmZpZyk7XG4gIHRlbGVtZXRyeVNESy5zdGFydCgpO1xuICBwcm9jZXNzLm9uKFwiU0lHVEVSTVwiLCBhc3luYyAoKSA9PiBhd2FpdCBjbGVhblVwVHJhY2luZygpKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGNsZWFuVXBUcmFjaW5nKCkge1xuICBpZiAoIXRlbGVtZXRyeVNESykge1xuICAgIHJldHVybjtcbiAgfVxuICBhd2FpdCBtYXliZUZsdXNoTWV0cmljcygpO1xuICBhd2FpdCB0ZWxlbWV0cnlTREsuc2h1dGRvd24oKTtcbiAgaW1wb3J0X2xvZ2dpbmcubG9nZ2VyLmRlYnVnKFwiT3BlblRlbGVtZXRyeSBTREsgc2h1dCBkb3duLlwiKTtcbiAgdGVsZW1ldHJ5U0RLID0gbnVsbDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRlbGVtZXRyeVNlcnZlclByb2Nlc3NvcigpIHtcbiAgY29uc3QgZXhwb3J0ZXIgPSBuZXcgaW1wb3J0X2V4cG9ydGVyLlRyYWNlU2VydmVyRXhwb3J0ZXIoKTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfdXRpbHMuaXNEZXZFbnYpKCkgPyBuZXcgaW1wb3J0X3Nka190cmFjZV9iYXNlLlNpbXBsZVNwYW5Qcm9jZXNzb3IoZXhwb3J0ZXIpIDogbmV3IGltcG9ydF9zZGtfdHJhY2VfYmFzZS5CYXRjaFNwYW5Qcm9jZXNzb3IoZXhwb3J0ZXIpO1xufVxuZnVuY3Rpb24gbWF5YmVGbHVzaE1ldHJpY3MoKSB7XG4gIGlmIChub2RlT3RlbENvbmZpZz8ubWV0cmljUmVhZGVyKSB7XG4gICAgcmV0dXJuIG5vZGVPdGVsQ29uZmlnLm1ldHJpY1JlYWRlci5mb3JjZUZsdXNoKCk7XG4gIH1cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xufVxuYXN5bmMgZnVuY3Rpb24gZmx1c2hUcmFjaW5nKCkge1xuICBpZiAobm9kZU90ZWxDb25maWc/LnNwYW5Qcm9jZXNzb3JzKSB7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwobm9kZU90ZWxDb25maWcuc3BhblByb2Nlc3NvcnMubWFwKChwKSA9PiBwLmZvcmNlRmx1c2goKSkpO1xuICB9XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgaW5pdE5vZGVUZWxlbWV0cnlQcm92aWRlclxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLXRlbGVtZXRyeS1wcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/node-telemetry-provider.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/types.js":
/*!***********************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/types.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar types_exports = {};\n__export(types_exports, {\n  InstrumentationLibrarySchema: () => InstrumentationLibrarySchema,\n  LinkSchema: () => LinkSchema,\n  PathMetadataSchema: () => PathMetadataSchema,\n  SpanContextSchema: () => SpanContextSchema,\n  SpanDataSchema: () => SpanDataSchema,\n  SpanMetadataSchema: () => SpanMetadataSchema,\n  SpanStatusSchema: () => SpanStatusSchema,\n  TimeEventSchema: () => TimeEventSchema,\n  TraceDataSchema: () => TraceDataSchema,\n  TraceMetadataSchema: () => TraceMetadataSchema\n});\nmodule.exports = __toCommonJS(types_exports);\nvar import_zod = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/lib/index.js\");\nconst PathMetadataSchema = import_zod.z.object({\n  path: import_zod.z.string(),\n  status: import_zod.z.string(),\n  error: import_zod.z.string().optional(),\n  latency: import_zod.z.number()\n});\nconst TraceMetadataSchema = import_zod.z.object({\n  featureName: import_zod.z.string().optional(),\n  paths: import_zod.z.set(PathMetadataSchema).optional(),\n  timestamp: import_zod.z.number()\n});\nconst SpanMetadataSchema = import_zod.z.object({\n  name: import_zod.z.string(),\n  state: import_zod.z.enum([\"success\", \"error\"]).optional(),\n  input: import_zod.z.any().optional(),\n  output: import_zod.z.any().optional(),\n  isRoot: import_zod.z.boolean().optional(),\n  metadata: import_zod.z.record(import_zod.z.string(), import_zod.z.string()).optional(),\n  path: import_zod.z.string().optional(),\n  // Indicates a \"leaf\" span that is the source of a failure.\n  isFailureSource: import_zod.z.boolean().optional()\n});\nconst SpanStatusSchema = import_zod.z.object({\n  code: import_zod.z.number(),\n  message: import_zod.z.string().optional()\n});\nconst TimeEventSchema = import_zod.z.object({\n  time: import_zod.z.number(),\n  annotation: import_zod.z.object({\n    attributes: import_zod.z.record(import_zod.z.string(), import_zod.z.any()),\n    description: import_zod.z.string()\n  })\n});\nconst SpanContextSchema = import_zod.z.object({\n  traceId: import_zod.z.string(),\n  spanId: import_zod.z.string(),\n  isRemote: import_zod.z.boolean().optional(),\n  traceFlags: import_zod.z.number()\n});\nconst LinkSchema = import_zod.z.object({\n  context: SpanContextSchema.optional(),\n  attributes: import_zod.z.record(import_zod.z.string(), import_zod.z.any()).optional(),\n  droppedAttributesCount: import_zod.z.number().optional()\n});\nconst InstrumentationLibrarySchema = import_zod.z.object({\n  name: import_zod.z.string().readonly(),\n  version: import_zod.z.string().optional().readonly(),\n  schemaUrl: import_zod.z.string().optional().readonly()\n});\nconst SpanDataSchema = import_zod.z.object({\n  spanId: import_zod.z.string(),\n  traceId: import_zod.z.string(),\n  parentSpanId: import_zod.z.string().optional(),\n  startTime: import_zod.z.number(),\n  endTime: import_zod.z.number(),\n  attributes: import_zod.z.record(import_zod.z.string(), import_zod.z.any()),\n  displayName: import_zod.z.string(),\n  links: import_zod.z.array(LinkSchema).optional(),\n  instrumentationLibrary: InstrumentationLibrarySchema,\n  spanKind: import_zod.z.string(),\n  sameProcessAsParentSpan: import_zod.z.object({ value: import_zod.z.boolean() }).optional(),\n  status: SpanStatusSchema.optional(),\n  timeEvents: import_zod.z.object({\n    timeEvent: import_zod.z.array(TimeEventSchema)\n  }).optional(),\n  truncated: import_zod.z.boolean().optional()\n});\nconst TraceDataSchema = import_zod.z.object({\n  traceId: import_zod.z.string(),\n  displayName: import_zod.z.string().optional(),\n  startTime: import_zod.z.number().optional().describe(\"trace start time in milliseconds since the epoch\"),\n  endTime: import_zod.z.number().optional().describe(\"end time in milliseconds since the epoch\"),\n  spans: import_zod.z.record(import_zod.z.string(), SpanDataSchema)\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxpQkFBaUIsbUJBQU8sQ0FBQyw2REFBSztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsK0JBQStCO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxNQUFNLENBV0w7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtanMtYXBwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvdHJhY2luZy90eXBlcy5qcz9lZmIyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciB0eXBlc19leHBvcnRzID0ge307XG5fX2V4cG9ydCh0eXBlc19leHBvcnRzLCB7XG4gIEluc3RydW1lbnRhdGlvbkxpYnJhcnlTY2hlbWE6ICgpID0+IEluc3RydW1lbnRhdGlvbkxpYnJhcnlTY2hlbWEsXG4gIExpbmtTY2hlbWE6ICgpID0+IExpbmtTY2hlbWEsXG4gIFBhdGhNZXRhZGF0YVNjaGVtYTogKCkgPT4gUGF0aE1ldGFkYXRhU2NoZW1hLFxuICBTcGFuQ29udGV4dFNjaGVtYTogKCkgPT4gU3BhbkNvbnRleHRTY2hlbWEsXG4gIFNwYW5EYXRhU2NoZW1hOiAoKSA9PiBTcGFuRGF0YVNjaGVtYSxcbiAgU3Bhbk1ldGFkYXRhU2NoZW1hOiAoKSA9PiBTcGFuTWV0YWRhdGFTY2hlbWEsXG4gIFNwYW5TdGF0dXNTY2hlbWE6ICgpID0+IFNwYW5TdGF0dXNTY2hlbWEsXG4gIFRpbWVFdmVudFNjaGVtYTogKCkgPT4gVGltZUV2ZW50U2NoZW1hLFxuICBUcmFjZURhdGFTY2hlbWE6ICgpID0+IFRyYWNlRGF0YVNjaGVtYSxcbiAgVHJhY2VNZXRhZGF0YVNjaGVtYTogKCkgPT4gVHJhY2VNZXRhZGF0YVNjaGVtYVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyh0eXBlc19leHBvcnRzKTtcbnZhciBpbXBvcnRfem9kID0gcmVxdWlyZShcInpvZFwiKTtcbmNvbnN0IFBhdGhNZXRhZGF0YVNjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICBwYXRoOiBpbXBvcnRfem9kLnouc3RyaW5nKCksXG4gIHN0YXR1czogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBlcnJvcjogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIGxhdGVuY3k6IGltcG9ydF96b2Quei5udW1iZXIoKVxufSk7XG5jb25zdCBUcmFjZU1ldGFkYXRhU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIGZlYXR1cmVOYW1lOiBpbXBvcnRfem9kLnouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgcGF0aHM6IGltcG9ydF96b2Quei5zZXQoUGF0aE1ldGFkYXRhU2NoZW1hKS5vcHRpb25hbCgpLFxuICB0aW1lc3RhbXA6IGltcG9ydF96b2Quei5udW1iZXIoKVxufSk7XG5jb25zdCBTcGFuTWV0YWRhdGFTY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgbmFtZTogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBzdGF0ZTogaW1wb3J0X3pvZC56LmVudW0oW1wic3VjY2Vzc1wiLCBcImVycm9yXCJdKS5vcHRpb25hbCgpLFxuICBpbnB1dDogaW1wb3J0X3pvZC56LmFueSgpLm9wdGlvbmFsKCksXG4gIG91dHB1dDogaW1wb3J0X3pvZC56LmFueSgpLm9wdGlvbmFsKCksXG4gIGlzUm9vdDogaW1wb3J0X3pvZC56LmJvb2xlYW4oKS5vcHRpb25hbCgpLFxuICBtZXRhZGF0YTogaW1wb3J0X3pvZC56LnJlY29yZChpbXBvcnRfem9kLnouc3RyaW5nKCksIGltcG9ydF96b2Quei5zdHJpbmcoKSkub3B0aW9uYWwoKSxcbiAgcGF0aDogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIC8vIEluZGljYXRlcyBhIFwibGVhZlwiIHNwYW4gdGhhdCBpcyB0aGUgc291cmNlIG9mIGEgZmFpbHVyZS5cbiAgaXNGYWlsdXJlU291cmNlOiBpbXBvcnRfem9kLnouYm9vbGVhbigpLm9wdGlvbmFsKClcbn0pO1xuY29uc3QgU3BhblN0YXR1c1NjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICBjb2RlOiBpbXBvcnRfem9kLnoubnVtYmVyKCksXG4gIG1lc3NhZ2U6IGltcG9ydF96b2Quei5zdHJpbmcoKS5vcHRpb25hbCgpXG59KTtcbmNvbnN0IFRpbWVFdmVudFNjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICB0aW1lOiBpbXBvcnRfem9kLnoubnVtYmVyKCksXG4gIGFubm90YXRpb246IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICAgIGF0dHJpYnV0ZXM6IGltcG9ydF96b2Quei5yZWNvcmQoaW1wb3J0X3pvZC56LnN0cmluZygpLCBpbXBvcnRfem9kLnouYW55KCkpLFxuICAgIGRlc2NyaXB0aW9uOiBpbXBvcnRfem9kLnouc3RyaW5nKClcbiAgfSlcbn0pO1xuY29uc3QgU3BhbkNvbnRleHRTY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgdHJhY2VJZDogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBzcGFuSWQ6IGltcG9ydF96b2Quei5zdHJpbmcoKSxcbiAgaXNSZW1vdGU6IGltcG9ydF96b2Quei5ib29sZWFuKCkub3B0aW9uYWwoKSxcbiAgdHJhY2VGbGFnczogaW1wb3J0X3pvZC56Lm51bWJlcigpXG59KTtcbmNvbnN0IExpbmtTY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgY29udGV4dDogU3BhbkNvbnRleHRTY2hlbWEub3B0aW9uYWwoKSxcbiAgYXR0cmlidXRlczogaW1wb3J0X3pvZC56LnJlY29yZChpbXBvcnRfem9kLnouc3RyaW5nKCksIGltcG9ydF96b2Quei5hbnkoKSkub3B0aW9uYWwoKSxcbiAgZHJvcHBlZEF0dHJpYnV0ZXNDb3VudDogaW1wb3J0X3pvZC56Lm51bWJlcigpLm9wdGlvbmFsKClcbn0pO1xuY29uc3QgSW5zdHJ1bWVudGF0aW9uTGlicmFyeVNjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICBuYW1lOiBpbXBvcnRfem9kLnouc3RyaW5nKCkucmVhZG9ubHkoKSxcbiAgdmVyc2lvbjogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKCkucmVhZG9ubHkoKSxcbiAgc2NoZW1hVXJsOiBpbXBvcnRfem9kLnouc3RyaW5nKCkub3B0aW9uYWwoKS5yZWFkb25seSgpXG59KTtcbmNvbnN0IFNwYW5EYXRhU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIHNwYW5JZDogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICB0cmFjZUlkOiBpbXBvcnRfem9kLnouc3RyaW5nKCksXG4gIHBhcmVudFNwYW5JZDogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIHN0YXJ0VGltZTogaW1wb3J0X3pvZC56Lm51bWJlcigpLFxuICBlbmRUaW1lOiBpbXBvcnRfem9kLnoubnVtYmVyKCksXG4gIGF0dHJpYnV0ZXM6IGltcG9ydF96b2Quei5yZWNvcmQoaW1wb3J0X3pvZC56LnN0cmluZygpLCBpbXBvcnRfem9kLnouYW55KCkpLFxuICBkaXNwbGF5TmFtZTogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBsaW5rczogaW1wb3J0X3pvZC56LmFycmF5KExpbmtTY2hlbWEpLm9wdGlvbmFsKCksXG4gIGluc3RydW1lbnRhdGlvbkxpYnJhcnk6IEluc3RydW1lbnRhdGlvbkxpYnJhcnlTY2hlbWEsXG4gIHNwYW5LaW5kOiBpbXBvcnRfem9kLnouc3RyaW5nKCksXG4gIHNhbWVQcm9jZXNzQXNQYXJlbnRTcGFuOiBpbXBvcnRfem9kLnoub2JqZWN0KHsgdmFsdWU6IGltcG9ydF96b2Quei5ib29sZWFuKCkgfSkub3B0aW9uYWwoKSxcbiAgc3RhdHVzOiBTcGFuU3RhdHVzU2NoZW1hLm9wdGlvbmFsKCksXG4gIHRpbWVFdmVudHM6IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICAgIHRpbWVFdmVudDogaW1wb3J0X3pvZC56LmFycmF5KFRpbWVFdmVudFNjaGVtYSlcbiAgfSkub3B0aW9uYWwoKSxcbiAgdHJ1bmNhdGVkOiBpbXBvcnRfem9kLnouYm9vbGVhbigpLm9wdGlvbmFsKClcbn0pO1xuY29uc3QgVHJhY2VEYXRhU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIHRyYWNlSWQ6IGltcG9ydF96b2Quei5zdHJpbmcoKSxcbiAgZGlzcGxheU5hbWU6IGltcG9ydF96b2Quei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBzdGFydFRpbWU6IGltcG9ydF96b2Quei5udW1iZXIoKS5vcHRpb25hbCgpLmRlc2NyaWJlKFwidHJhY2Ugc3RhcnQgdGltZSBpbiBtaWxsaXNlY29uZHMgc2luY2UgdGhlIGVwb2NoXCIpLFxuICBlbmRUaW1lOiBpbXBvcnRfem9kLnoubnVtYmVyKCkub3B0aW9uYWwoKS5kZXNjcmliZShcImVuZCB0aW1lIGluIG1pbGxpc2Vjb25kcyBzaW5jZSB0aGUgZXBvY2hcIiksXG4gIHNwYW5zOiBpbXBvcnRfem9kLnoucmVjb3JkKGltcG9ydF96b2Quei5zdHJpbmcoKSwgU3BhbkRhdGFTY2hlbWEpXG59KTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBJbnN0cnVtZW50YXRpb25MaWJyYXJ5U2NoZW1hLFxuICBMaW5rU2NoZW1hLFxuICBQYXRoTWV0YWRhdGFTY2hlbWEsXG4gIFNwYW5Db250ZXh0U2NoZW1hLFxuICBTcGFuRGF0YVNjaGVtYSxcbiAgU3Bhbk1ldGFkYXRhU2NoZW1hLFxuICBTcGFuU3RhdHVzU2NoZW1hLFxuICBUaW1lRXZlbnRTY2hlbWEsXG4gIFRyYWNlRGF0YVNjaGVtYSxcbiAgVHJhY2VNZXRhZGF0YVNjaGVtYVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/types.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/utils.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar utils_exports = {};\n__export(utils_exports, {\n  deleteUndefinedProps: () => deleteUndefinedProps,\n  featureMetadataPrefix: () => featureMetadataPrefix,\n  getCurrentEnv: () => getCurrentEnv,\n  isDevEnv: () => isDevEnv,\n  stripUndefinedProps: () => stripUndefinedProps\n});\nmodule.exports = __toCommonJS(utils_exports);\nfunction deleteUndefinedProps(obj) {\n  for (const prop in obj) {\n    if (obj[prop] === void 0) {\n      delete obj[prop];\n    } else {\n      if (typeof obj[prop] === \"object\") {\n        deleteUndefinedProps(obj[prop]);\n      }\n    }\n  }\n}\nfunction stripUndefinedProps(input) {\n  if (input === void 0 || input === null || Array.isArray(input) || typeof input !== \"object\") {\n    return input;\n  }\n  const out = {};\n  for (const key in input) {\n    if (input[key] !== void 0) {\n      out[key] = stripUndefinedProps(input[key]);\n    }\n  }\n  return out;\n}\nfunction getCurrentEnv() {\n  return process.env.GENKIT_ENV || \"prod\";\n}\nfunction isDevEnv() {\n  return getCurrentEnv() === \"dev\";\n}\nfunction featureMetadataPrefix(name) {\n  return `feature:${name}`;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixLQUFLO0FBQ3pCO0FBQ0E7QUFDQSxNQUFNLENBTUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtanMtYXBwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvdXRpbHMuanM/ODdkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgdXRpbHNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQodXRpbHNfZXhwb3J0cywge1xuICBkZWxldGVVbmRlZmluZWRQcm9wczogKCkgPT4gZGVsZXRlVW5kZWZpbmVkUHJvcHMsXG4gIGZlYXR1cmVNZXRhZGF0YVByZWZpeDogKCkgPT4gZmVhdHVyZU1ldGFkYXRhUHJlZml4LFxuICBnZXRDdXJyZW50RW52OiAoKSA9PiBnZXRDdXJyZW50RW52LFxuICBpc0RldkVudjogKCkgPT4gaXNEZXZFbnYsXG4gIHN0cmlwVW5kZWZpbmVkUHJvcHM6ICgpID0+IHN0cmlwVW5kZWZpbmVkUHJvcHNcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlModXRpbHNfZXhwb3J0cyk7XG5mdW5jdGlvbiBkZWxldGVVbmRlZmluZWRQcm9wcyhvYmopIHtcbiAgZm9yIChjb25zdCBwcm9wIGluIG9iaikge1xuICAgIGlmIChvYmpbcHJvcF0gPT09IHZvaWQgMCkge1xuICAgICAgZGVsZXRlIG9ialtwcm9wXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGVvZiBvYmpbcHJvcF0gPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgZGVsZXRlVW5kZWZpbmVkUHJvcHMob2JqW3Byb3BdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHN0cmlwVW5kZWZpbmVkUHJvcHMoaW5wdXQpIHtcbiAgaWYgKGlucHV0ID09PSB2b2lkIDAgfHwgaW5wdXQgPT09IG51bGwgfHwgQXJyYXkuaXNBcnJheShpbnB1dCkgfHwgdHlwZW9mIGlucHV0ICE9PSBcIm9iamVjdFwiKSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG4gIGNvbnN0IG91dCA9IHt9O1xuICBmb3IgKGNvbnN0IGtleSBpbiBpbnB1dCkge1xuICAgIGlmIChpbnB1dFtrZXldICE9PSB2b2lkIDApIHtcbiAgICAgIG91dFtrZXldID0gc3RyaXBVbmRlZmluZWRQcm9wcyhpbnB1dFtrZXldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cbmZ1bmN0aW9uIGdldEN1cnJlbnRFbnYoKSB7XG4gIHJldHVybiBwcm9jZXNzLmVudi5HRU5LSVRfRU5WIHx8IFwicHJvZFwiO1xufVxuZnVuY3Rpb24gaXNEZXZFbnYoKSB7XG4gIHJldHVybiBnZXRDdXJyZW50RW52KCkgPT09IFwiZGV2XCI7XG59XG5mdW5jdGlvbiBmZWF0dXJlTWV0YWRhdGFQcmVmaXgobmFtZSkge1xuICByZXR1cm4gYGZlYXR1cmU6JHtuYW1lfWA7XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVsZXRlVW5kZWZpbmVkUHJvcHMsXG4gIGZlYXR1cmVNZXRhZGF0YVByZWZpeCxcbiAgZ2V0Q3VycmVudEVudixcbiAgaXNEZXZFbnYsXG4gIHN0cmlwVW5kZWZpbmVkUHJvcHNcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/google-genai/lib/common/converters.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@genkit-ai/google-genai/lib/common/converters.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar converters_exports = {};\n__export(converters_exports, {\n  fromGeminiCandidate: () => fromGeminiCandidate,\n  toGeminiFunctionModeEnum: () => toGeminiFunctionModeEnum,\n  toGeminiMessage: () => toGeminiMessage,\n  toGeminiSystemInstruction: () => toGeminiSystemInstruction,\n  toGeminiTool: () => toGeminiTool\n});\nmodule.exports = __toCommonJS(converters_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_types = __webpack_require__(/*! ./types.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/common/types.js\");\nfunction toGeminiTool(tool) {\n  const declaration = {\n    name: tool.name.replace(/\\//g, \"__\"),\n    // Gemini throws on '/' in tool name\n    description: tool.description,\n    parameters: toGeminiSchemaProperty(tool.inputSchema)\n  };\n  return declaration;\n}\nfunction toGeminiSchemaProperty(property) {\n  if (!property || !property.type) {\n    return void 0;\n  }\n  const baseSchema = {};\n  if (property.description) {\n    baseSchema.description = property.description;\n  }\n  if (property.enum) {\n    baseSchema.enum = property.enum;\n  }\n  if (property.nullable) {\n    baseSchema.nullable = property.nullable;\n  }\n  let propertyType;\n  if (Array.isArray(property.type)) {\n    const types = property.type;\n    if (types.includes(\"null\")) {\n      baseSchema.nullable = true;\n    }\n    propertyType = types.find((t) => t !== \"null\");\n  } else {\n    propertyType = property.type;\n  }\n  if (propertyType === \"object\") {\n    const nestedProperties = {};\n    Object.keys(property.properties).forEach((key) => {\n      nestedProperties[key] = toGeminiSchemaProperty(property.properties[key]);\n    });\n    return {\n      ...baseSchema,\n      type: import_types.SchemaType.OBJECT,\n      properties: nestedProperties,\n      required: property.required\n    };\n  } else if (propertyType === \"array\") {\n    return {\n      ...baseSchema,\n      type: import_types.SchemaType.ARRAY,\n      items: toGeminiSchemaProperty(property.items)\n    };\n  } else {\n    const schemaType = import_types.SchemaType[propertyType.toUpperCase()];\n    if (!schemaType) {\n      throw new import_genkit.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `Unsupported property type ${propertyType.toUpperCase()}`\n      });\n    }\n    return {\n      ...baseSchema,\n      type: schemaType\n    };\n  }\n}\nfunction toGeminiMedia(part) {\n  if (part.media?.url.startsWith(\"data:\")) {\n    const dataUrl = part.media.url;\n    const b64Data = dataUrl.substring(dataUrl.indexOf(\",\") + 1);\n    const contentType = part.media.contentType || dataUrl.substring(dataUrl.indexOf(\":\") + 1, dataUrl.indexOf(\";\"));\n    return { inlineData: { mimeType: contentType, data: b64Data } };\n  }\n  if (!part.media?.contentType) {\n    throw Error(\n      \"Must supply a `contentType` when sending File URIs to Gemini.\"\n    );\n  }\n  return {\n    fileData: {\n      mimeType: part.media.contentType,\n      fileUri: part.media.url\n    }\n  };\n}\nfunction toGeminiToolRequest(part) {\n  if (!part.toolRequest?.input) {\n    throw Error(\"Invalid ToolRequestPart: input was missing.\");\n  }\n  return {\n    functionCall: {\n      name: part.toolRequest.name,\n      args: part.toolRequest.input\n    }\n  };\n}\nfunction toGeminiToolResponse(part) {\n  if (!part.toolResponse?.output) {\n    throw Error(\"Invalid ToolResponsePart: output was missing.\");\n  }\n  return {\n    functionResponse: {\n      name: part.toolResponse.name,\n      response: {\n        name: part.toolResponse.name,\n        content: part.toolResponse.output\n      }\n    }\n  };\n}\nfunction toGeminiReasoning(part) {\n  const out = { thought: true };\n  if (typeof part.metadata?.thoughtSignature === \"string\") {\n    out.thoughtSignature = part.metadata.thoughtSignature;\n  }\n  if (part.reasoning?.length) {\n    out.text = part.reasoning;\n  }\n  return out;\n}\nfunction toGeminiCustom(part) {\n  if (part.custom?.codeExecutionResult) {\n    return {\n      codeExecutionResult: part.custom.codeExecutionResult\n    };\n  }\n  if (part.custom?.executableCode) {\n    return {\n      executableCode: part.custom.executableCode\n    };\n  }\n  throw new Error(\"Unsupported Custom Part type\");\n}\nfunction toGeminiPart(part) {\n  if (part.text) {\n    return { text: part.text };\n  }\n  if (part.media) {\n    return toGeminiMedia(part);\n  }\n  if (part.toolRequest) {\n    return toGeminiToolRequest(part);\n  }\n  if (part.toolResponse) {\n    return toGeminiToolResponse(part);\n  }\n  if (typeof part.reasoning === \"string\") {\n    return toGeminiReasoning(part);\n  }\n  if (part.custom) {\n    return toGeminiCustom(part);\n  }\n  throw new Error(\"Unsupported Part type \" + JSON.stringify(part));\n}\nfunction toGeminiRole(role, model) {\n  switch (role) {\n    case \"user\":\n      return \"user\";\n    case \"model\":\n      return \"model\";\n    case \"system\":\n      if (model?.info?.supports?.systemRole) {\n        throw new Error(\n          \"system role is only supported for a single message in the first position\"\n        );\n      } else {\n        throw new Error(\"system role is not supported\");\n      }\n    case \"tool\":\n      return \"function\";\n    default:\n      return \"user\";\n  }\n}\nfunction toGeminiMessage(message, model) {\n  let sortedParts = message.content;\n  if (message.role === \"tool\") {\n    sortedParts = [...message.content].sort((a, b) => {\n      const aRef = a.toolResponse?.ref;\n      const bRef = b.toolResponse?.ref;\n      if (!aRef && !bRef) return 0;\n      if (!aRef) return 1;\n      if (!bRef) return -1;\n      return parseInt(aRef, 10) - parseInt(bRef, 10);\n    });\n  }\n  return {\n    role: toGeminiRole(message.role, model),\n    parts: sortedParts.map(toGeminiPart)\n  };\n}\nfunction toGeminiSystemInstruction(message) {\n  return {\n    role: \"user\",\n    parts: message.content.map(toGeminiPart)\n  };\n}\nfunction toGeminiFunctionModeEnum(from) {\n  if (from === void 0) {\n    return void 0;\n  }\n  switch (from) {\n    case \"MODE_UNSPECIFIED\": {\n      return import_types.FunctionCallingMode.MODE_UNSPECIFIED;\n    }\n    case \"required\":\n    case \"ANY\": {\n      return import_types.FunctionCallingMode.ANY;\n    }\n    case \"auto\":\n    case \"AUTO\": {\n      return import_types.FunctionCallingMode.AUTO;\n    }\n    case \"none\":\n    case \"NONE\": {\n      return import_types.FunctionCallingMode.NONE;\n    }\n    default:\n      throw new Error(`unsupported function calling mode: ${from}`);\n  }\n}\nfunction fromGeminiFinishReason(reason) {\n  if (!reason) return \"unknown\";\n  switch (reason) {\n    case \"STOP\":\n      return \"stop\";\n    case \"MAX_TOKENS\":\n      return \"length\";\n    case \"SAFETY\":\n    // blocked for safety\n    case \"RECITATION\":\n    // blocked for reciting training data\n    case \"LANGUAGE\":\n    // blocked for using an unsupported language\n    case \"BLOCKLIST\":\n    // blocked for forbidden terms\n    case \"PROHIBITED_CONTENT\":\n    // blocked for potentially containing prohibited content\n    case \"SPII\":\n      return \"blocked\";\n    case \"MALFORMED_FUNCTION_CALL\":\n    case \"OTHER\":\n      return \"other\";\n    default:\n      return \"unknown\";\n  }\n}\nfunction fromGeminiThought(part) {\n  return {\n    reasoning: part.text || \"\",\n    metadata: { thoughtSignature: part.thoughtSignature }\n  };\n}\nfunction fromGeminiInlineData(part) {\n  if (!part.inlineData || !part.inlineData.hasOwnProperty(\"mimeType\") || !part.inlineData.hasOwnProperty(\"data\")) {\n    throw new Error(\"Invalid GeminiPart: missing required properties\");\n  }\n  const { mimeType, data } = part.inlineData;\n  const dataUrl = `data:${mimeType};base64,${data}`;\n  return {\n    media: {\n      url: dataUrl,\n      contentType: mimeType\n    }\n  };\n}\nfunction fromGeminiFileData(part) {\n  if (!part.fileData || !part.fileData.hasOwnProperty(\"mimeType\") || !part.fileData.hasOwnProperty(\"fileUri\")) {\n    throw new Error(\n      \"Invalid Gemini File Data Part: missing required properties\"\n    );\n  }\n  return {\n    media: {\n      url: part.fileData?.fileUri,\n      contentType: part.fileData?.mimeType\n    }\n  };\n}\nfunction fromGeminiFunctionCall(part, ref) {\n  if (!part.functionCall) {\n    throw Error(\n      \"Invalid Gemini Function Call Part: missing function call data\"\n    );\n  }\n  return {\n    toolRequest: {\n      name: part.functionCall.name,\n      input: part.functionCall.args,\n      ref\n    }\n  };\n}\nfunction fromGeminiFunctionResponse(part, ref) {\n  if (!part.functionResponse) {\n    throw new Error(\n      \"Invalid Gemini Function Call Part: missing function call data\"\n    );\n  }\n  return {\n    toolResponse: {\n      name: part.functionResponse.name.replace(/__/g, \"/\"),\n      // restore slashes\n      output: part.functionResponse.response,\n      ref\n    }\n  };\n}\nfunction fromExecutableCode(part) {\n  if (!part.executableCode) {\n    throw new Error(\"Invalid GeminiPart: missing executableCode\");\n  }\n  return {\n    custom: {\n      executableCode: {\n        language: part.executableCode.language,\n        code: part.executableCode.code\n      }\n    }\n  };\n}\nfunction fromCodeExecutionResult(part) {\n  if (!part.codeExecutionResult) {\n    throw new Error(\"Invalid GeminiPart: missing codeExecutionResult\");\n  }\n  return {\n    custom: {\n      codeExecutionResult: {\n        outcome: part.codeExecutionResult.outcome,\n        output: part.codeExecutionResult.output\n      }\n    }\n  };\n}\nfunction fromGeminiPart(part, ref) {\n  if (part.thought) return fromGeminiThought(part);\n  if (typeof part.text === \"string\") return { text: part.text };\n  if (part.inlineData) return fromGeminiInlineData(part);\n  if (part.fileData) return fromGeminiFileData(part);\n  if (part.functionCall) return fromGeminiFunctionCall(part, ref);\n  if (part.functionResponse) return fromGeminiFunctionResponse(part, ref);\n  if (part.executableCode) return fromExecutableCode(part);\n  if (part.codeExecutionResult) return fromCodeExecutionResult(part);\n  throw new Error(\"Unsupported GeminiPart type \" + JSON.stringify(part));\n}\nfunction fromGeminiCandidate(candidate) {\n  const parts = candidate.content?.parts || [];\n  const genkitCandidate = {\n    index: candidate.index || 0,\n    message: {\n      role: \"model\",\n      content: parts.filter((p) => Object.keys(p).length > 0).map((part, index) => fromGeminiPart(part, index.toString()))\n    },\n    finishReason: fromGeminiFinishReason(candidate.finishReason),\n    finishMessage: candidate.finishMessage,\n    custom: {\n      safetyRatings: candidate.safetyRatings,\n      citationMetadata: candidate.citationMetadata\n    }\n  };\n  return genkitCandidate;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=converters.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/google-genai/lib/common/converters.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/google-genai/lib/common/types.js":
/*!******************************************************************!*\
  !*** ./node_modules/@genkit-ai/google-genai/lib/common/types.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar types_exports = {};\n__export(types_exports, {\n  BlockReason: () => BlockReason,\n  DynamicRetrievalMode: () => DynamicRetrievalMode,\n  ExecutableCodeLanguage: () => ExecutableCodeLanguage,\n  FinishReason: () => FinishReason,\n  FunctionCallingMode: () => FunctionCallingMode,\n  HarmBlockThreshold: () => HarmBlockThreshold,\n  HarmCategory: () => HarmCategory,\n  HarmProbability: () => HarmProbability,\n  HarmSeverity: () => HarmSeverity,\n  Outcome: () => Outcome,\n  SchemaType: () => SchemaType,\n  TaskTypeSchema: () => TaskTypeSchema,\n  isCodeExecutionTool: () => isCodeExecutionTool,\n  isFunctionDeclarationsTool: () => isFunctionDeclarationsTool,\n  isGoogleSearchRetrievalTool: () => isGoogleSearchRetrievalTool,\n  isObject: () => isObject,\n  isRetrievalTool: () => isRetrievalTool\n});\nmodule.exports = __toCommonJS(types_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar FunctionCallingMode = /* @__PURE__ */ ((FunctionCallingMode2) => {\n  FunctionCallingMode2[\"MODE_UNSPECIFIED\"] = \"MODE_UNSPECIFIED\";\n  FunctionCallingMode2[\"AUTO\"] = \"AUTO\";\n  FunctionCallingMode2[\"ANY\"] = \"ANY\";\n  FunctionCallingMode2[\"NONE\"] = \"NONE\";\n  return FunctionCallingMode2;\n})(FunctionCallingMode || {});\nfunction isObject(value) {\n  return typeof value === \"object\" && value !== null;\n}\nvar BlockReason = /* @__PURE__ */ ((BlockReason2) => {\n  BlockReason2[\"BLOCKED_REASON_UNSPECIFIED\"] = \"BLOCKED_REASON_UNSPECIFIED\";\n  BlockReason2[\"BLOCK_REASON_UNSPECIFIED\"] = \"BLOCK_REASON_UNSPECIFIED\";\n  BlockReason2[\"SAFETY\"] = \"SAFETY\";\n  BlockReason2[\"OTHER\"] = \"OTHER\";\n  BlockReason2[\"BLOCKLIST\"] = \"BLOCKLIST\";\n  BlockReason2[\"PROHIBITED_CONTENT\"] = \"PROHIBITED_CONTENT\";\n  return BlockReason2;\n})(BlockReason || {});\nvar HarmCategory = /* @__PURE__ */ ((HarmCategory2) => {\n  HarmCategory2[\"HARM_CATEGORY_UNSPECIFIED\"] = \"HARM_CATEGORY_UNSPECIFIED\";\n  HarmCategory2[\"HARM_CATEGORY_HATE_SPEECH\"] = \"HARM_CATEGORY_HATE_SPEECH\";\n  HarmCategory2[\"HARM_CATEGORY_SEXUALLY_EXPLICIT\"] = \"HARM_CATEGORY_SEXUALLY_EXPLICIT\";\n  HarmCategory2[\"HARM_CATEGORY_HARASSMENT\"] = \"HARM_CATEGORY_HARASSMENT\";\n  HarmCategory2[\"HARM_CATEGORY_DANGEROUS_CONTENT\"] = \"HARM_CATEGORY_DANGEROUS_CONTENT\";\n  HarmCategory2[\"HARM_CATEGORY_CIVIC_INTEGRITY\"] = \"HARM_CATEGORY_CIVIC_INTEGRITY\";\n  return HarmCategory2;\n})(HarmCategory || {});\nvar HarmBlockThreshold = /* @__PURE__ */ ((HarmBlockThreshold2) => {\n  HarmBlockThreshold2[\"HARM_BLOCK_THRESHOLD_UNSPECIFIED\"] = \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\";\n  HarmBlockThreshold2[\"BLOCK_LOW_AND_ABOVE\"] = \"BLOCK_LOW_AND_ABOVE\";\n  HarmBlockThreshold2[\"BLOCK_MEDIUM_AND_ABOVE\"] = \"BLOCK_MEDIUM_AND_ABOVE\";\n  HarmBlockThreshold2[\"BLOCK_ONLY_HIGH\"] = \"BLOCK_ONLY_HIGH\";\n  HarmBlockThreshold2[\"BLOCK_NONE\"] = \"BLOCK_NONE\";\n  HarmBlockThreshold2[\"OFF\"] = \"OFF\";\n  return HarmBlockThreshold2;\n})(HarmBlockThreshold || {});\nvar HarmProbability = /* @__PURE__ */ ((HarmProbability2) => {\n  HarmProbability2[\"HARM_PROBABILITY_UNSPECIFIED\"] = \"HARM_PROBABILITY_UNSPECIFIED\";\n  HarmProbability2[\"NEGLIGIBLE\"] = \"NEGLIGIBLE\";\n  HarmProbability2[\"LOW\"] = \"LOW\";\n  HarmProbability2[\"MEDIUM\"] = \"MEDIUM\";\n  HarmProbability2[\"HIGH\"] = \"HIGH\";\n  return HarmProbability2;\n})(HarmProbability || {});\nvar DynamicRetrievalMode = /* @__PURE__ */ ((DynamicRetrievalMode2) => {\n  DynamicRetrievalMode2[\"MODE_UNSPECIFIED\"] = \"MODE_UNSPECIFIED\";\n  DynamicRetrievalMode2[\"MODE_DYNAMIC\"] = \"MODE_DYNAMIC\";\n  return DynamicRetrievalMode2;\n})(DynamicRetrievalMode || {});\nfunction isGoogleSearchRetrievalTool(tool) {\n  return tool.googleSearchRetrieval !== void 0 || tool.googleSearch !== void 0;\n}\nvar HarmSeverity = /* @__PURE__ */ ((HarmSeverity2) => {\n  HarmSeverity2[\"HARM_SEVERITY_UNSPECIFIED\"] = \"HARM_SEVERITY_UNSPECIFIED\";\n  HarmSeverity2[\"HARM_SEVERITY_NEGLIGIBLE\"] = \"HARM_SEVERITY_NEGLIGIBLE\";\n  HarmSeverity2[\"HARM_SEVERITY_LOW\"] = \"HARM_SEVERITY_LOW\";\n  HarmSeverity2[\"HARM_SEVERITY_MEDIUM\"] = \"HARM_SEVERITY_MEDIUM\";\n  HarmSeverity2[\"HARM_SEVERITY_HIGH\"] = \"HARM_SEVERITY_HIGH\";\n  return HarmSeverity2;\n})(HarmSeverity || {});\nvar SchemaType = /* @__PURE__ */ ((SchemaType2) => {\n  SchemaType2[\"STRING\"] = \"STRING\";\n  SchemaType2[\"NUMBER\"] = \"NUMBER\";\n  SchemaType2[\"INTEGER\"] = \"INTEGER\";\n  SchemaType2[\"BOOLEAN\"] = \"BOOLEAN\";\n  SchemaType2[\"ARRAY\"] = \"ARRAY\";\n  SchemaType2[\"OBJECT\"] = \"OBJECT\";\n  return SchemaType2;\n})(SchemaType || {});\nconst TaskTypeSchema = import_genkit.z.enum([\n  \"RETRIEVAL_DOCUMENT\",\n  \"RETRIEVAL_QUERY\",\n  \"SEMANTIC_SIMILARITY\",\n  \"CLASSIFICATION\",\n  \"CLUSTERING\"\n]);\nvar FinishReason = /* @__PURE__ */ ((FinishReason2) => {\n  FinishReason2[\"FINISH_REASON_UNSPECIFIED\"] = \"FINISH_REASON_UNSPECIFIED\";\n  FinishReason2[\"STOP\"] = \"STOP\";\n  FinishReason2[\"MAX_TOKENS\"] = \"MAX_TOKENS\";\n  FinishReason2[\"SAFETY\"] = \"SAFETY\";\n  FinishReason2[\"RECITATION\"] = \"RECITATION\";\n  FinishReason2[\"LANGUAGE\"] = \"LANGUAGE\";\n  FinishReason2[\"BLOCKLIST\"] = \"BLOCKLIST\";\n  FinishReason2[\"PROHIBITED_CONTENT\"] = \"PROHIBITED_CONTENT\";\n  FinishReason2[\"SPII\"] = \"SPII\";\n  FinishReason2[\"MALFORMED_FUNCTION_CALL\"] = \"MALFORMED_FUNCTION_CALL\";\n  FinishReason2[\"OTHER\"] = \"OTHER\";\n  return FinishReason2;\n})(FinishReason || {});\nvar ExecutableCodeLanguage = /* @__PURE__ */ ((ExecutableCodeLanguage2) => {\n  ExecutableCodeLanguage2[\"LANGUAGE_UNSPECIFIED\"] = \"LANGUAGE_UNSPECIFIED\";\n  ExecutableCodeLanguage2[\"PYTHON\"] = \"PYTHON\";\n  return ExecutableCodeLanguage2;\n})(ExecutableCodeLanguage || {});\nvar Outcome = /* @__PURE__ */ ((Outcome2) => {\n  Outcome2[\"OUTCOME_UNSPECIFIED\"] = \"OUTCOME_UNSPECIFIED\";\n  Outcome2[\"OUTCOME_OK\"] = \"OUTCOME_OK\";\n  Outcome2[\"OUTCOME_FAILED\"] = \"OUTCOME_FAILED\";\n  Outcome2[\"OUTCOME_DEADLINE_EXCEEDED\"] = \"OUTCOME_DEADLINE_EXCEEDED\";\n  return Outcome2;\n})(Outcome || {});\nfunction isFunctionDeclarationsTool(tool) {\n  return tool.functionDeclarations !== void 0;\n}\nfunction isCodeExecutionTool(tool) {\n  return tool.codeExecution !== void 0;\n}\nfunction isRetrievalTool(tool) {\n  return tool.retrieval !== void 0;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/google-genai/lib/common/types.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/google-genai/lib/common/utils.js":
/*!******************************************************************!*\
  !*** ./node_modules/@genkit-ai/google-genai/lib/common/utils.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar utils_exports = {};\n__export(utils_exports, {\n  checkModelName: () => checkModelName,\n  checkSupportedMimeType: () => checkSupportedMimeType,\n  cleanSchema: () => cleanSchema,\n  displayUrl: () => displayUrl,\n  extractErrMsg: () => extractErrMsg,\n  extractMedia: () => extractMedia,\n  extractMimeType: () => extractMimeType,\n  extractText: () => extractText,\n  extractVersion: () => extractVersion,\n  getGenkitClientHeader: () => getGenkitClientHeader,\n  modelName: () => modelName,\n  processStream: () => processStream\n});\nmodule.exports = __toCommonJS(utils_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_types = __webpack_require__(/*! ./types.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/common/types.js\");\nfunction extractErrMsg(e) {\n  let errorMessage = \"An unknown error occurred\";\n  if (e instanceof Error) {\n    errorMessage = e.message;\n  } else if (typeof e === \"string\") {\n    errorMessage = e;\n  } else {\n    try {\n      errorMessage = JSON.stringify(e);\n    } catch (stringifyError) {\n      errorMessage = \"Failed to stringify error object\";\n    }\n  }\n  return errorMessage;\n}\nfunction extractVersion(model) {\n  return model.version ? model.version : checkModelName(model.name);\n}\nfunction modelName(name) {\n  if (!name) return name;\n  const prefixesToRemove = /background-model\\/|model\\/|models\\/|embedders\\/|googleai\\/|vertexai\\//g;\n  return name.replace(prefixesToRemove, \"\");\n}\nfunction checkModelName(name) {\n  const version = modelName(name);\n  if (!version) {\n    throw new import_genkit.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: \"Model name is required.\"\n    });\n  }\n  return version;\n}\nfunction extractText(request) {\n  return request.messages.at(-1)?.content.map((c) => c.text || \"\").join(\"\") ?? \"\";\n}\nconst KNOWN_MIME_TYPES = {\n  jpg: \"image/jpeg\",\n  jpeg: \"image/jpeg\",\n  png: \"image/png\",\n  mp4: \"video/mp4\",\n  pdf: \"application/pdf\"\n};\nfunction extractMimeType(url) {\n  if (!url) {\n    return \"\";\n  }\n  const dataPrefix = \"data:\";\n  if (!url.startsWith(dataPrefix)) {\n    url.lastIndexOf(\".\");\n    const key = url.substring(url.lastIndexOf(\".\") + 1);\n    if (Object.keys(KNOWN_MIME_TYPES).includes(key)) {\n      return KNOWN_MIME_TYPES[key];\n    }\n    return \"\";\n  }\n  const commaIndex = url.indexOf(\",\");\n  if (commaIndex == -1) {\n    return \"\";\n  }\n  let mimeType = url.substring(dataPrefix.length, commaIndex);\n  const base64Marker = \";base64\";\n  if (mimeType.endsWith(base64Marker)) {\n    mimeType = mimeType.substring(0, mimeType.length - base64Marker.length);\n  }\n  return mimeType.trim();\n}\nfunction checkSupportedMimeType(media, supportedTypes) {\n  if (!supportedTypes.includes(media.contentType ?? \"\")) {\n    throw new import_genkit.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: `Invalid mimeType for ${displayUrl(media.url)}: \"${media.contentType}\". Supported mimeTypes: ${supportedTypes.join(\", \")}`\n    });\n  }\n}\nfunction displayUrl(url) {\n  if (url.length <= 50) {\n    return url;\n  }\n  return url.substring(0, 25) + \"...\" + url.substring(url.length - 25);\n}\nfunction extractMedia(request, params) {\n  const predicate = (part) => {\n    const media2 = part.media;\n    if (!media2) {\n      return false;\n    }\n    if (params.metadataType || params.isDefault) {\n      const metadata = part.metadata;\n      if (!metadata?.type) {\n        return !!params.isDefault;\n      } else {\n        return metadata.type == params.metadataType;\n      }\n    }\n    return true;\n  };\n  const media = request.messages.at(-1)?.content.find(predicate)?.media;\n  if (media && !media?.contentType) {\n    return {\n      url: media.url,\n      contentType: extractMimeType(media.url)\n    };\n  }\n  return media;\n}\nfunction cleanSchema(schema) {\n  const out = structuredClone(schema);\n  for (const key in out) {\n    if (key === \"$schema\" || key === \"additionalProperties\") {\n      delete out[key];\n      continue;\n    }\n    if (typeof out[key] === \"object\") {\n      out[key] = cleanSchema(out[key]);\n    }\n    if (key === \"type\" && Array.isArray(out[key])) {\n      out[key] = out[key].find((t) => t !== \"null\");\n    }\n  }\n  return out;\n}\nfunction processStream(response) {\n  if (!response.body) {\n    throw new Error(\"Error processing stream because response.body not found\");\n  }\n  const inputStream = response.body.pipeThrough(\n    new TextDecoderStream(\"utf8\", { fatal: true })\n  );\n  const responseStream = getResponseStream(inputStream);\n  const [stream1, stream2] = responseStream.tee();\n  return {\n    stream: generateResponseSequence(stream1),\n    response: getResponsePromise(stream2)\n  };\n}\nfunction getResponseStream(inputStream) {\n  const responseLineRE = /^data: (.*)(?:\\n\\n|\\r\\r|\\r\\n\\r\\n)/;\n  const reader = inputStream.getReader();\n  const stream = new ReadableStream({\n    start(controller) {\n      let currentText = \"\";\n      return pump();\n      function pump() {\n        return reader.read().then(({ value, done }) => {\n          if (done) {\n            if (currentText.trim()) {\n              controller.error(new Error(\"Failed to parse stream\"));\n              return;\n            }\n            controller.close();\n            return;\n          }\n          currentText += value;\n          let match = currentText.match(responseLineRE);\n          let parsedResponse;\n          while (match) {\n            try {\n              parsedResponse = JSON.parse(match[1]);\n            } catch (e) {\n              controller.error(\n                new Error(`Error parsing JSON response: \"${match[1]}\"`)\n              );\n              return;\n            }\n            controller.enqueue(parsedResponse);\n            currentText = currentText.substring(match[0].length);\n            match = currentText.match(responseLineRE);\n          }\n          return pump();\n        }).catch((e) => {\n          let err = e;\n          err.stack = e.stack;\n          if (err.name === \"AbortError\") {\n            err = new import_genkit.GenkitError({\n              status: \"ABORTED\",\n              message: \"Request aborted when reading from the stream\"\n            });\n          } else {\n            err = new Error(\"Error reading from the stream\");\n          }\n          throw err;\n        });\n      }\n    }\n  });\n  return stream;\n}\nasync function* generateResponseSequence(stream) {\n  const reader = stream.getReader();\n  while (true) {\n    const { value, done } = await reader.read();\n    if (done) {\n      break;\n    }\n    yield value;\n  }\n}\nasync function getResponsePromise(stream) {\n  const allResponses = [];\n  const reader = stream.getReader();\n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) {\n      return aggregateResponses(allResponses);\n    }\n    allResponses.push(value);\n  }\n}\nfunction aggregateResponses(responses) {\n  const lastResponse = responses.at(-1);\n  if (lastResponse === void 0) {\n    throw new Error(\n      \"Error aggregating stream chunks because the final response in stream chunk is undefined\"\n    );\n  }\n  const aggregatedResponse = {};\n  if (lastResponse.promptFeedback) {\n    aggregatedResponse.promptFeedback = lastResponse.promptFeedback;\n  }\n  for (const response of responses) {\n    for (const candidate of response.candidates ?? []) {\n      const index = candidate.index ?? 0;\n      if (!aggregatedResponse.candidates) {\n        aggregatedResponse.candidates = [];\n      }\n      if (!aggregatedResponse.candidates[index]) {\n        aggregatedResponse.candidates[index] = {\n          index\n        };\n      }\n      const aggregatedCandidate = aggregatedResponse.candidates[index];\n      aggregateMetadata(aggregatedCandidate, candidate, \"citationMetadata\");\n      aggregateMetadata(aggregatedCandidate, candidate, \"groundingMetadata\");\n      if (candidate.safetyRatings?.length) {\n        aggregatedCandidate.safetyRatings = (aggregatedCandidate.safetyRatings ?? []).concat(candidate.safetyRatings);\n      }\n      if (candidate.finishReason !== void 0) {\n        aggregatedCandidate.finishReason = candidate.finishReason;\n      }\n      if (candidate.finishMessage !== void 0) {\n        aggregatedCandidate.finishMessage = candidate.finishMessage;\n      }\n      if (candidate.avgLogprobs !== void 0) {\n        aggregatedCandidate.avgLogprobs = candidate.avgLogprobs;\n      }\n      if (candidate.logprobsResult !== void 0) {\n        aggregatedCandidate.logprobsResult = candidate.logprobsResult;\n      }\n      if (candidate.content && candidate.content.parts) {\n        if (!aggregatedCandidate.content) {\n          aggregatedCandidate.content = {\n            role: candidate.content.role || \"user\",\n            parts: []\n          };\n        }\n        for (const part of candidate.content.parts) {\n          const newPart = {};\n          if (part.thought) {\n            newPart.thought = part.thought;\n          }\n          if (part.text) {\n            newPart.text = part.text;\n          }\n          if (part.functionCall) {\n            newPart.functionCall = part.functionCall;\n          }\n          if (part.executableCode) {\n            newPart.executableCode = part.executableCode;\n          }\n          if (part.codeExecutionResult) {\n            newPart.codeExecutionResult = part.codeExecutionResult;\n          }\n          if (Object.keys(newPart).length === 0) {\n            newPart.text = \"\";\n          }\n          aggregatedCandidate.content.parts.push(newPart);\n        }\n      }\n    }\n    if (response.usageMetadata) {\n      aggregatedResponse.usageMetadata = response.usageMetadata;\n    }\n  }\n  return aggregatedResponse;\n}\nfunction aggregateMetadata(aggCandidate, chunkCandidate, fieldName) {\n  const chunkObj = chunkCandidate[fieldName];\n  const aggObj = aggCandidate[fieldName];\n  if (chunkObj === void 0) return;\n  if (aggObj === void 0) {\n    aggCandidate[fieldName] = chunkObj;\n    return;\n  }\n  if ((0, import_types.isObject)(chunkObj)) {\n    for (const k of Object.keys(chunkObj)) {\n      if (Array.isArray(aggObj[k]) && Array.isArray(chunkObj[k])) {\n        aggObj[k] = aggObj[k].concat(chunkObj[k]);\n      } else {\n        aggObj[k] = chunkObj[k] ?? aggObj[k];\n      }\n    }\n  }\n}\nfunction getGenkitClientHeader() {\n  if (process.env.MONOSPACE_ENV == \"true\") {\n    return (0, import_genkit.getClientHeader)() + \" firebase-studio-vm\";\n  }\n  return (0, import_genkit.getClientHeader)();\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/google-genai/lib/common/utils.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/client.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@genkit-ai/google-genai/lib/googleai/client.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar client_exports = {};\n__export(client_exports, {\n  TEST_ONLY: () => TEST_ONLY,\n  embedContent: () => embedContent,\n  generateContent: () => generateContent,\n  generateContentStream: () => generateContentStream,\n  getGoogleAIUrl: () => getGoogleAIUrl,\n  imagenPredict: () => imagenPredict,\n  listModels: () => listModels,\n  veoCheckOperation: () => veoCheckOperation,\n  veoPredict: () => veoPredict\n});\nmodule.exports = __toCommonJS(client_exports);\nvar import_utils = __webpack_require__(/*! ../common/utils.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/common/utils.js\");\nasync function listModels(apiKey, clientOptions) {\n  const url = getGoogleAIUrl({\n    resourcePath: \"models\",\n    queryParams: \"pageSize=1000\",\n    clientOptions\n  });\n  const fetchOptions = getFetchOptions({\n    method: \"GET\",\n    apiKey,\n    clientOptions\n  });\n  const response = await makeRequest(url, fetchOptions);\n  const modelResponse = JSON.parse(await response.text());\n  return modelResponse.models;\n}\nasync function generateContent(apiKey, model, generateContentRequest, clientOptions) {\n  const url = getGoogleAIUrl({\n    resourcePath: `models/${model}`,\n    resourceMethod: \"generateContent\",\n    clientOptions\n  });\n  const fetchOptions = getFetchOptions({\n    method: \"POST\",\n    apiKey,\n    clientOptions,\n    body: JSON.stringify(generateContentRequest)\n  });\n  const response = await makeRequest(url, fetchOptions);\n  const responseJson = await response.json();\n  return responseJson;\n}\nasync function generateContentStream(apiKey, model, generateContentRequest, clientOptions) {\n  const url = getGoogleAIUrl({\n    resourcePath: `models/${model}`,\n    resourceMethod: \"streamGenerateContent\",\n    clientOptions\n  });\n  const fetchOptions = getFetchOptions({\n    method: \"POST\",\n    apiKey,\n    clientOptions,\n    body: JSON.stringify(generateContentRequest)\n  });\n  const response = await makeRequest(url, fetchOptions);\n  return (0, import_utils.processStream)(response);\n}\nasync function embedContent(apiKey, model, embedContentRequest, clientOptions) {\n  const url = getGoogleAIUrl({\n    resourcePath: `models/${model}`,\n    resourceMethod: \"embedContent\",\n    clientOptions\n  });\n  const fetchOptions = getFetchOptions({\n    method: \"POST\",\n    apiKey,\n    clientOptions,\n    body: JSON.stringify(embedContentRequest)\n  });\n  const response = await makeRequest(url, fetchOptions);\n  return response.json();\n}\nasync function imagenPredict(apiKey, model, imagenPredictRequest, clientOptions) {\n  const url = getGoogleAIUrl({\n    resourcePath: `models/${model}`,\n    resourceMethod: \"predict\",\n    clientOptions\n  });\n  const fetchOptions = getFetchOptions({\n    method: \"POST\",\n    apiKey,\n    clientOptions,\n    body: JSON.stringify(imagenPredictRequest)\n  });\n  const response = await makeRequest(url, fetchOptions);\n  return response.json();\n}\nasync function veoPredict(apiKey, model, veoPredictRequest, clientOptions) {\n  const url = getGoogleAIUrl({\n    resourcePath: `models/${model}`,\n    resourceMethod: \"predictLongRunning\",\n    clientOptions\n  });\n  const fetchOptions = getFetchOptions({\n    method: \"POST\",\n    apiKey,\n    clientOptions,\n    body: JSON.stringify(veoPredictRequest)\n  });\n  const response = await makeRequest(url, fetchOptions);\n  return response.json();\n}\nasync function veoCheckOperation(apiKey, operation, clientOptions) {\n  const url = getGoogleAIUrl({\n    resourcePath: operation,\n    clientOptions\n  });\n  const fetchOptions = getFetchOptions({\n    method: \"GET\",\n    apiKey,\n    clientOptions\n  });\n  const response = await makeRequest(url, fetchOptions);\n  return response.json();\n}\nfunction getGoogleAIUrl(params) {\n  const DEFAULT_API_VERSION = \"v1beta\";\n  const DEFAULT_BASE_URL = \"https://generativelanguage.googleapis.com\";\n  const apiVersion = params.clientOptions?.apiVersion || DEFAULT_API_VERSION;\n  const baseUrl = params.clientOptions?.baseUrl || DEFAULT_BASE_URL;\n  let url = `${baseUrl}/${apiVersion}/${params.resourcePath}`;\n  if (params.resourceMethod) {\n    url += `:${params.resourceMethod}`;\n  }\n  if (params.queryParams) {\n    url += `?${params.queryParams}`;\n  }\n  if (params.resourceMethod === \"streamGenerateContent\") {\n    url += `${params.queryParams ? \"&\" : \"?\"}alt=sse`;\n  }\n  return url;\n}\nfunction getFetchOptions(params) {\n  const fetchOptions = {\n    method: params.method,\n    headers: getHeaders(params.apiKey, params.clientOptions)\n  };\n  if (params.body) {\n    fetchOptions.body = params.body;\n  }\n  const signal = getAbortSignal(params.clientOptions);\n  if (signal) {\n    fetchOptions.signal = signal;\n  }\n  return fetchOptions;\n}\nfunction getAbortSignal(clientOptions) {\n  const hasTimeout = (clientOptions?.timeout ?? -1) >= 0;\n  if (clientOptions?.signal !== void 0 || hasTimeout) {\n    const controller = new AbortController();\n    if (hasTimeout) {\n      setTimeout(() => controller.abort(), clientOptions?.timeout);\n    }\n    if (clientOptions?.signal) {\n      clientOptions.signal.addEventListener(\"abort\", () => {\n        controller.abort();\n      });\n    }\n    return controller.signal;\n  }\n  return void 0;\n}\nfunction getHeaders(apiKey, clientOptions) {\n  let customHeaders = {};\n  if (clientOptions?.customHeaders) {\n    customHeaders = structuredClone(clientOptions.customHeaders);\n    delete customHeaders[\"x-goog-api-key\"];\n    delete customHeaders[\"x-goog-api-client\"];\n  }\n  const headers = {\n    ...customHeaders,\n    \"Content-Type\": \"application/json\",\n    \"x-goog-api-key\": apiKey,\n    \"x-goog-api-client\": (0, import_utils.getGenkitClientHeader)()\n  };\n  return headers;\n}\nasync function makeRequest(url, fetchOptions) {\n  try {\n    const response = await fetch(url, fetchOptions);\n    if (!response.ok) {\n      let errorText = await response.text();\n      let errorMessage = errorText;\n      try {\n        const json = JSON.parse(errorText);\n        if (json.error && json.error.message) {\n          errorMessage = json.error.message;\n        }\n      } catch (e) {\n      }\n      throw new Error(\n        `Error fetching from ${url}: [${response.status} ${response.statusText}] ${errorMessage}`\n      );\n    }\n    return response;\n  } catch (e) {\n    console.error(e);\n    throw new Error(`Failed to fetch from ${url}: ${(0, import_utils.extractErrMsg)(e)}`);\n  }\n}\nconst TEST_ONLY = {\n  getFetchOptions,\n  getAbortSignal,\n  getHeaders,\n  makeRequest\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/client.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/embedder.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@genkit-ai/google-genai/lib/googleai/embedder.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar embedder_exports = {};\n__export(embedder_exports, {\n  EmbeddingConfigSchema: () => EmbeddingConfigSchema,\n  TEST_ONLY: () => TEST_ONLY,\n  defineEmbedder: () => defineEmbedder,\n  defineKnownModels: () => defineKnownModels,\n  listActions: () => listActions,\n  model: () => model\n});\nmodule.exports = __toCommonJS(embedder_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_embedder = __webpack_require__(/*! genkit/embedder */ \"(action-browser)/./node_modules/genkit/lib/embedder.js\");\nvar import_client = __webpack_require__(/*! ./client.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/client.js\");\nvar import_types = __webpack_require__(/*! ./types.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/types.js\");\nvar import_utils = __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/utils.js\");\nconst EmbeddingConfigSchema = import_genkit.z.object({\n  /** Override the API key provided at plugin initialization. */\n  apiKey: import_genkit.z.string().optional(),\n  /**\n   * The `task_type` parameter is defined as the intended downstream application to help the model\n   * produce better quality embeddings.\n   **/\n  taskType: import_types.TaskTypeSchema.optional(),\n  title: import_genkit.z.string().optional(),\n  version: import_genkit.z.string().optional(),\n  /**\n   * The `outputDimensionality` parameter allows you to specify the dimensionality of the embedding output.\n   * By default, the model generates embeddings with 768 dimensions. Models such as\n   * `text-embedding-004`, `text-embedding-005`, and `text-multilingual-embedding-002`\n   * allow the output dimensionality to be adjusted between 1 and 768.\n   * By selecting a smaller output dimensionality, users can save memory and storage space, leading to more efficient computations.\n   **/\n  outputDimensionality: import_genkit.z.number().min(1).optional()\n}).passthrough();\nfunction commonRef(name, info, configSchema = EmbeddingConfigSchema) {\n  return (0, import_embedder.embedderRef)({\n    name: `googleai/${name}`,\n    configSchema,\n    info: info ?? {\n      dimensions: 768,\n      supports: {\n        input: [\"text\"]\n      }\n    }\n  });\n}\nconst GENERIC_MODEL = commonRef(\"embedder\");\nconst KNOWN_MODELS = {\n  \"text-embedding-004\": commonRef(\"text-embedding-004\"),\n  \"gemini-embedding-001\": commonRef(\"gemini-embedding-001\")\n};\nfunction model(version, config = {}) {\n  const name = (0, import_utils.checkModelName)(version);\n  return (0, import_embedder.embedderRef)({\n    name: `googleai/${name}`,\n    config,\n    configSchema: GENERIC_MODEL.configSchema,\n    info: {\n      ...GENERIC_MODEL.info\n    }\n  });\n}\nfunction listActions(models) {\n  return models.filter((m) => m.supportedGenerationMethods.includes(\"embedContent\")).filter((m) => !m.description || !m.description.includes(\"deprecated\")).map((m) => {\n    const ref = model(m.name);\n    return (0, import_genkit.embedderActionMetadata)({\n      name: ref.name,\n      info: ref.info,\n      configSchema: ref.configSchema\n    });\n  });\n}\nfunction defineKnownModels(ai, options) {\n  for (const name of Object.keys(KNOWN_MODELS)) {\n    defineEmbedder(ai, name, options);\n  }\n}\nfunction defineEmbedder(ai, name, pluginOptions) {\n  (0, import_utils.checkApiKey)(pluginOptions?.apiKey);\n  const ref = model(name);\n  return ai.defineEmbedder(\n    {\n      name: ref.name,\n      configSchema: ref.configSchema,\n      info: ref.info\n    },\n    async (input, reqOptions) => {\n      const embedApiKey = (0, import_utils.calculateApiKey)(\n        pluginOptions?.apiKey,\n        reqOptions?.apiKey\n      );\n      const embedVersion = reqOptions?.version || (0, import_utils.extractVersion)(ref);\n      const embeddings = await Promise.all(\n        input.map(async (doc) => {\n          const response = await (0, import_client.embedContent)(embedApiKey, embedVersion, {\n            taskType: reqOptions?.taskType,\n            title: reqOptions?.title,\n            content: {\n              role: \"\",\n              parts: [{ text: doc.text }]\n            },\n            outputDimensionality: reqOptions?.outputDimensionality\n          });\n          const values = response.embedding.values;\n          return { embedding: values };\n        })\n      );\n      return { embeddings };\n    }\n  );\n}\nconst TEST_ONLY = { KNOWN_MODELS };\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=embedder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/embedder.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/gemini.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@genkit-ai/google-genai/lib/googleai/gemini.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar gemini_exports = {};\n__export(gemini_exports, {\n  GeminiConfigSchema: () => GeminiConfigSchema,\n  GeminiTtsConfigSchema: () => GeminiTtsConfigSchema,\n  GemmaConfigSchema: () => GemmaConfigSchema,\n  TEST_ONLY: () => TEST_ONLY,\n  defineKnownModels: () => defineKnownModels,\n  defineModel: () => defineModel,\n  isGeminiModelName: () => isGeminiModelName,\n  isGemmaModelName: () => isGemmaModelName,\n  isTTSModelName: () => isTTSModelName,\n  listActions: () => listActions,\n  model: () => model\n});\nmodule.exports = __toCommonJS(gemini_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_model = __webpack_require__(/*! genkit/model */ \"(action-browser)/./node_modules/genkit/lib/model.js\");\nvar import_middleware = __webpack_require__(/*! genkit/model/middleware */ \"(action-browser)/./node_modules/genkit/lib/middleware.js\");\nvar import_tracing = __webpack_require__(/*! genkit/tracing */ \"(action-browser)/./node_modules/genkit/lib/tracing.js\");\nvar import_converters = __webpack_require__(/*! ../common/converters.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/common/converters.js\");\nvar import_client = __webpack_require__(/*! ./client.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/client.js\");\nvar import_utils = __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/utils.js\");\nconst SafetySettingsSchema = import_genkit.z.object({\n  category: import_genkit.z.enum([\n    \"HARM_CATEGORY_UNSPECIFIED\",\n    \"HARM_CATEGORY_HATE_SPEECH\",\n    \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n    \"HARM_CATEGORY_HARASSMENT\",\n    \"HARM_CATEGORY_DANGEROUS_CONTENT\"\n  ]),\n  threshold: import_genkit.z.enum([\n    \"BLOCK_LOW_AND_ABOVE\",\n    \"BLOCK_MEDIUM_AND_ABOVE\",\n    \"BLOCK_ONLY_HIGH\",\n    \"BLOCK_NONE\"\n  ])\n});\nconst VoiceConfigSchema = import_genkit.z.object({\n  prebuiltVoiceConfig: import_genkit.z.object({\n    // TODO: Make this an array of objects so we can also specify the description\n    // for each voiceName.\n    voiceName: import_genkit.z.union([\n      import_genkit.z.enum([\n        \"Zephyr\",\n        \"Puck\",\n        \"Charon\",\n        \"Kore\",\n        \"Fenrir\",\n        \"Leda\",\n        \"Orus\",\n        \"Aoede\",\n        \"Callirrhoe\",\n        \"Autonoe\",\n        \"Enceladus\",\n        \"Iapetus\",\n        \"Umbriel\",\n        \"Algieba\",\n        \"Despina\",\n        \"Erinome\",\n        \"Algenib\",\n        \"Rasalgethi\",\n        \"Laomedeia\",\n        \"Achernar\",\n        \"Alnilam\",\n        \"Schedar\",\n        \"Gacrux\",\n        \"Pulcherrima\",\n        \"Achird\",\n        \"Zubenelgenubi\",\n        \"Vindemiatrix\",\n        \"Sadachbia\",\n        \"Sadaltager\",\n        \"Sulafat\"\n      ]),\n      // To allow any new string values\n      import_genkit.z.string()\n    ]).describe(\"Name of the preset voice to use\").optional()\n  }).describe(\"Configuration for the prebuilt speaker to use\").passthrough().optional()\n}).describe(\"Configuration for the voice to use\").passthrough();\nconst GeminiConfigSchema = import_model.GenerationCommonConfigSchema.extend({\n  apiKey: import_genkit.z.string().describe(\"Overrides the plugin-configured API key, if specified.\").optional(),\n  safetySettings: import_genkit.z.array(SafetySettingsSchema).describe(\n    \"Adjust how likely you are to see responses that could be harmful. Content is blocked based on the probability that it is harmful.\"\n  ).optional(),\n  codeExecution: import_genkit.z.union([import_genkit.z.boolean(), import_genkit.z.object({}).strict()]).describe(\"Enables the model to generate and run code.\").optional(),\n  contextCache: import_genkit.z.boolean().describe(\n    \"Context caching allows you to save and reuse precomputed input tokens that you wish to use repeatedly.\"\n  ).optional(),\n  functionCallingConfig: import_genkit.z.object({\n    mode: import_genkit.z.enum([\"MODE_UNSPECIFIED\", \"AUTO\", \"ANY\", \"NONE\"]).optional(),\n    allowedFunctionNames: import_genkit.z.array(import_genkit.z.string()).optional()\n  }).describe(\n    \"Controls how the model uses the provided tools (function declarations). With AUTO (Default) mode, the model decides whether to generate a natural language response or suggest a function call based on the prompt and context. With ANY, the model is constrained to always predict a function call and guarantee function schema adherence. With NONE, the model is prohibited from making function calls.\"\n  ).optional(),\n  responseModalities: import_genkit.z.array(import_genkit.z.enum([\"TEXT\", \"IMAGE\", \"AUDIO\"])).describe(\n    \"The modalities to be used in response. Only supported for 'gemini-2.0-flash-exp' model at present.\"\n  ).optional(),\n  googleSearchRetrieval: import_genkit.z.union([import_genkit.z.boolean(), import_genkit.z.object({}).passthrough()]).describe(\n    \"Retrieve public web data for grounding, powered by Google Search.\"\n  ).optional(),\n  temperature: import_genkit.z.number().min(0).max(2).describe(\n    import_model.GenerationCommonConfigDescriptions.temperature + \" The default value is 1.0.\"\n  ).optional(),\n  topP: import_genkit.z.number().min(0).max(1).describe(\n    import_model.GenerationCommonConfigDescriptions.topP + \" The default value is 0.95.\"\n  ).optional(),\n  thinkingConfig: import_genkit.z.object({\n    includeThoughts: import_genkit.z.boolean().describe(\n      \"Indicates whether to include thoughts in the response.If true, thoughts are returned only if the model supports thought and thoughts are available.\"\n    ).optional(),\n    thinkingBudget: import_genkit.z.number().min(0).max(24576).describe(\n      \"Indicates the thinking budget in tokens. 0 is DISABLED. -1 is AUTOMATIC. The default values and allowed ranges are model dependent. The thinking budget parameter gives the model guidance on the number of thinking tokens it can use when generating a response. A greater number of tokens is typically associated with more detailed thinking, which is needed for solving more complex tasks. \"\n    ).optional()\n  }).optional()\n}).passthrough();\nconst GeminiTtsConfigSchema = GeminiConfigSchema.extend({\n  speechConfig: import_genkit.z.object({\n    voiceConfig: VoiceConfigSchema.optional(),\n    multiSpeakerVoiceConfig: import_genkit.z.object({\n      speakerVoiceConfigs: import_genkit.z.array(\n        import_genkit.z.object({\n          speaker: import_genkit.z.string().describe(\"Name of the speaker to use\"),\n          voiceConfig: VoiceConfigSchema\n        }).describe(\n          \"Configuration for a single speaker in a multi speaker setup\"\n        ).passthrough()\n      ).describe(\"Configuration for all the enabled speaker voices\")\n    }).describe(\"Configuration for multi-speaker setup\").passthrough().optional()\n  }).describe(\"Speech generation config\").passthrough().optional()\n}).passthrough();\nconst GemmaConfigSchema = GeminiConfigSchema.extend({\n  temperature: import_genkit.z.number().min(0).max(1).describe(\n    import_model.GenerationCommonConfigDescriptions.temperature + \" The default value is 1.0.\"\n  ).optional()\n}).passthrough();\nfunction commonRef(name, info, configSchema = GeminiConfigSchema) {\n  return (0, import_model.modelRef)({\n    name: `googleai/${name}`,\n    configSchema,\n    info: info ?? {\n      supports: {\n        multiturn: true,\n        media: true,\n        tools: true,\n        toolChoice: true,\n        systemRole: true,\n        constrained: \"no-tools\",\n        output: [\"text\", \"json\"]\n      }\n    }\n  });\n}\nconst GENERIC_MODEL = commonRef(\"gemini\");\nconst GENERIC_TTS_MODEL = commonRef(\n  \"gemini-tts\",\n  {\n    supports: {\n      multiturn: false,\n      media: false,\n      tools: false,\n      toolChoice: false,\n      systemRole: false,\n      constrained: \"no-tools\"\n    }\n  },\n  GeminiTtsConfigSchema\n);\nconst GENERIC_GEMMA_MODEL = commonRef(\n  \"gemma-generic\",\n  void 0,\n  GemmaConfigSchema\n);\nconst KNOWN_GEMINI_MODELS = {\n  \"gemini-2.5-pro\": commonRef(\"gemini-2.5-pro\"),\n  \"gemini-2.5-flash\": commonRef(\"gemini-2.5-flash\"),\n  \"gemini-2.5-flash-lite\": commonRef(\"gemini-2.5-flash-lite\"),\n  \"gemini-2.5-flash-image-preview\": commonRef(\"gemini-2.5-flash-image-preview\"),\n  \"gemini-2.0-flash\": commonRef(\"gemini-2.0-flash\"),\n  \"gemini-2.0-flash-preview-image-generation\": commonRef(\n    \"gemini-2.0-flash-preview-image-generation\"\n  ),\n  \"gemini-2.0-flash-lite\": commonRef(\"gemini-2.0-flash-lite\")\n};\nfunction isGeminiModelName(value) {\n  return value.startsWith(\"gemini-\") && !value.endsWith(\"-tts\");\n}\nconst KNOWN_TTS_MODELS = {\n  \"gemini-2.5-flash-preview-tts\": commonRef(\n    \"gemini-2.5-flash-preview-tts\",\n    { ...GENERIC_TTS_MODEL.info },\n    GeminiTtsConfigSchema\n  ),\n  \"gemini-2.5-pro-preview-tts\": commonRef(\n    \"gemini-2.5-pro-preview-tts\",\n    { ...GENERIC_TTS_MODEL.info },\n    GeminiTtsConfigSchema\n  )\n};\nfunction isTTSModelName(value) {\n  return value.startsWith(\"gemini-\") && value.endsWith(\"-tts\");\n}\nconst KNOWN_GEMMA_MODELS = {\n  \"gemma-3-12b-it\": commonRef(\"gemma-3-12b-it\", void 0, GemmaConfigSchema),\n  \"gemma-3-1b-it\": commonRef(\"gemma-3-1b-it\", void 0, GemmaConfigSchema),\n  \"gemma-3-27b-it\": commonRef(\"gemma-3-27b-it\", void 0, GemmaConfigSchema),\n  \"gemma-3-4b-it\": commonRef(\"gemma-3-4b-it\", void 0, GemmaConfigSchema),\n  \"gemma-3n-e4b-it\": commonRef(\"gemma-3n-e4b-it\", void 0, GemmaConfigSchema)\n};\nfunction isGemmaModelName(value) {\n  return value.startsWith(\"gemma-\");\n}\nconst KNOWN_MODELS = {\n  ...KNOWN_GEMINI_MODELS,\n  ...KNOWN_TTS_MODELS,\n  ...KNOWN_GEMMA_MODELS\n};\nfunction model(version, config = {}) {\n  const name = (0, import_utils.checkModelName)(version);\n  if (isTTSModelName(name)) {\n    return (0, import_model.modelRef)({\n      name: `googleai/${name}`,\n      config,\n      configSchema: GeminiTtsConfigSchema,\n      info: { ...GENERIC_TTS_MODEL.info }\n    });\n  }\n  if (isGemmaModelName(name)) {\n    return (0, import_model.modelRef)({\n      name: `googleai/${name}`,\n      config,\n      configSchema: GemmaConfigSchema,\n      info: { ...GENERIC_GEMMA_MODEL.info }\n    });\n  }\n  return (0, import_model.modelRef)({\n    name: `googleai/${name}`,\n    config,\n    configSchema: GeminiConfigSchema,\n    info: { ...GENERIC_MODEL.info }\n  });\n}\nfunction listActions(models) {\n  return models.filter((m) => m.supportedGenerationMethods.includes(\"generateContent\")).filter((m) => !m.description || !m.description.includes(\"deprecated\")).map((m) => {\n    const ref = model(m.name);\n    return (0, import_genkit.modelActionMetadata)({\n      name: ref.name,\n      info: ref.info,\n      configSchema: ref.configSchema\n    });\n  });\n}\nfunction defineKnownModels(ai, options) {\n  for (const name of Object.keys(KNOWN_MODELS)) {\n    defineModel(ai, name, options);\n  }\n}\nfunction defineModel(ai, name, pluginOptions) {\n  (0, import_utils.checkApiKey)(pluginOptions?.apiKey);\n  const ref = model(name);\n  const clientOptions = {\n    apiVersion: pluginOptions?.apiVersion,\n    baseUrl: pluginOptions?.baseUrl\n  };\n  const middleware = [];\n  if (ref.info?.supports?.media) {\n    middleware.push(\n      (0, import_middleware.downloadRequestMedia)({\n        maxBytes: 1024 * 1024 * 10,\n        // don't downlaod files that have been uploaded using the Files API\n        filter: (part) => {\n          try {\n            const url = new URL(part.media.url);\n            if (\n              // Gemini can handle these URLs\n              [\n                \"generativelanguage.googleapis.com\",\n                \"www.youtube.com\",\n                \"youtube.com\",\n                \"youtu.be\"\n              ].includes(url.hostname)\n            )\n              return false;\n          } catch {\n          }\n          return true;\n        }\n      })\n    );\n  }\n  return ai.defineModel(\n    {\n      apiVersion: \"v2\",\n      name: ref.name,\n      ...ref.info,\n      configSchema: ref.configSchema,\n      use: middleware\n    },\n    async (request, { streamingRequested, sendChunk, abortSignal }) => {\n      const clientOpt = { ...clientOptions, signal: abortSignal };\n      const messages = [...request.messages];\n      if (messages.length === 0) throw new Error(\"No messages provided.\");\n      let systemInstruction = void 0;\n      const systemMessage = messages.find((m) => m.role === \"system\");\n      if (systemMessage) {\n        messages.splice(messages.indexOf(systemMessage), 1);\n        systemInstruction = (0, import_converters.toGeminiSystemInstruction)(systemMessage);\n      }\n      const tools = [];\n      if (request.tools?.length) {\n        tools.push({\n          functionDeclarations: request.tools.map(import_converters.toGeminiTool)\n        });\n      }\n      const requestOptions = {\n        ...request.config\n      };\n      const {\n        apiKey: apiKeyFromConfig,\n        safetySettings: safetySettingsFromConfig,\n        codeExecution: codeExecutionFromConfig,\n        version: versionFromConfig,\n        functionCallingConfig,\n        googleSearchRetrieval,\n        tools: toolsFromConfig,\n        ...restOfConfigOptions\n      } = requestOptions;\n      if (codeExecutionFromConfig) {\n        tools.push({\n          codeExecution: codeExecutionFromConfig === true ? {} : codeExecutionFromConfig\n        });\n      }\n      if (toolsFromConfig) {\n        tools.push(...toolsFromConfig);\n      }\n      if (googleSearchRetrieval) {\n        tools.push({\n          googleSearch: googleSearchRetrieval === true ? {} : googleSearchRetrieval\n        });\n      }\n      let toolConfig;\n      if (functionCallingConfig) {\n        toolConfig = {\n          functionCallingConfig: {\n            allowedFunctionNames: functionCallingConfig.allowedFunctionNames,\n            mode: (0, import_converters.toGeminiFunctionModeEnum)(functionCallingConfig.mode)\n          }\n        };\n      } else if (request.toolChoice) {\n        toolConfig = {\n          functionCallingConfig: {\n            mode: (0, import_converters.toGeminiFunctionModeEnum)(request.toolChoice)\n          }\n        };\n      }\n      const jsonMode = request.output?.format === \"json\" || request.output?.contentType === \"application/json\" && tools.length === 0;\n      const generationConfig = {\n        ...restOfConfigOptions,\n        candidateCount: request.candidates || void 0,\n        responseMimeType: jsonMode ? \"application/json\" : void 0\n      };\n      if (request.output?.constrained && jsonMode) {\n        generationConfig.responseSchema = (0, import_utils.cleanSchema)(request.output.schema);\n      }\n      const msg = (0, import_converters.toGeminiMessage)(messages[messages.length - 1], ref);\n      let generateContentRequest = {\n        systemInstruction,\n        generationConfig,\n        tools: tools.length ? tools : void 0,\n        toolConfig,\n        safetySettings: safetySettingsFromConfig?.filter(\n          (setting) => setting.category !== \"HARM_CATEGORY_UNSPECIFIED\"\n        ),\n        contents: messages.map((message) => (0, import_converters.toGeminiMessage)(message, ref))\n      };\n      const modelVersion = versionFromConfig || (0, import_utils.extractVersion)(ref);\n      const generateApiKey = (0, import_utils.calculateApiKey)(\n        pluginOptions?.apiKey,\n        requestOptions.apiKey\n      );\n      const callGemini = async () => {\n        let response;\n        if (streamingRequested) {\n          const result = await (0, import_client.generateContentStream)(\n            generateApiKey,\n            modelVersion,\n            generateContentRequest,\n            clientOpt\n          );\n          for await (const item of result.stream) {\n            item.candidates?.forEach((candidate) => {\n              const c = (0, import_converters.fromGeminiCandidate)(candidate);\n              sendChunk({\n                index: c.index,\n                content: c.message.content\n              });\n            });\n          }\n          response = await result.response;\n        } else {\n          response = await (0, import_client.generateContent)(\n            generateApiKey,\n            modelVersion,\n            generateContentRequest,\n            clientOpt\n          );\n        }\n        const candidates = response.candidates || [];\n        if (response.candidates?.[\"undefined\"]) {\n          candidates.push(response.candidates[\"undefined\"]);\n        }\n        if (!candidates.length) {\n          throw new import_genkit.GenkitError({\n            status: \"FAILED_PRECONDITION\",\n            message: \"No valid candidates returned.\"\n          });\n        }\n        const candidateData = candidates.map(import_converters.fromGeminiCandidate) || [];\n        return {\n          candidates: candidateData,\n          custom: response,\n          usage: {\n            ...(0, import_model.getBasicUsageStats)(request.messages, candidateData),\n            inputTokens: response.usageMetadata?.promptTokenCount,\n            outputTokens: response.usageMetadata?.candidatesTokenCount,\n            thoughtsTokens: response.usageMetadata?.thoughtsTokenCount,\n            totalTokens: response.usageMetadata?.totalTokenCount,\n            cachedContentTokens: response.usageMetadata?.cachedContentTokenCount\n          }\n        };\n      };\n      return pluginOptions?.experimental_debugTraces ? await (0, import_tracing.runInNewSpan)(\n        ai.registry,\n        {\n          metadata: {\n            name: streamingRequested ? \"sendMessageStream\" : \"sendMessage\"\n          }\n        },\n        async (metadata) => {\n          metadata.input = {\n            apiEndpoint: (0, import_client.getGoogleAIUrl)({\n              resourcePath: \"\",\n              clientOptions: clientOpt\n            }),\n            cache: {},\n            model: modelVersion,\n            generateContentOptions: generateContentRequest,\n            parts: msg.parts,\n            options: clientOpt\n          };\n          const response = await callGemini();\n          metadata.output = response.custom;\n          return response;\n        }\n      ) : await callGemini();\n    }\n  );\n}\nconst TEST_ONLY = { KNOWN_MODELS };\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=gemini.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/gemini.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/imagen.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@genkit-ai/google-genai/lib/googleai/imagen.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar imagen_exports = {};\n__export(imagen_exports, {\n  ImagenConfigSchema: () => ImagenConfigSchema,\n  TEST_ONLY: () => TEST_ONLY,\n  defineKnownModels: () => defineKnownModels,\n  defineModel: () => defineModel,\n  isImagenModelName: () => isImagenModelName,\n  listActions: () => listActions,\n  model: () => model\n});\nmodule.exports = __toCommonJS(imagen_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_model = __webpack_require__(/*! genkit/model */ \"(action-browser)/./node_modules/genkit/lib/model.js\");\nvar import_client = __webpack_require__(/*! ./client.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/client.js\");\nvar import_utils = __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/utils.js\");\nconst ImagenConfigSchema = import_genkit.z.object({\n  apiKey: import_genkit.z.string().describe(\"Override the API key provided at plugin initialization.\").optional(),\n  numberOfImages: import_genkit.z.number().describe(\n    \"The number of images to generate, from 1 to 4 (inclusive). The default is 1.\"\n  ).optional(),\n  aspectRatio: import_genkit.z.enum([\"1:1\", \"9:16\", \"16:9\", \"3:4\", \"4:3\"]).describe(\"Desired aspect ratio of the output image.\").optional(),\n  personGeneration: import_genkit.z.enum([\"dont_allow\", \"allow_adult\", \"allow_all\"]).describe(\n    \"Control if/how images of people will be generated by the model.\"\n  ).optional()\n}).passthrough();\nfunction commonRef(name, info, configSchema = ImagenConfigSchema) {\n  return (0, import_model.modelRef)({\n    name: `googleai/${name}`,\n    configSchema,\n    info: info ?? {\n      supports: {\n        media: true,\n        multiturn: false,\n        tools: false,\n        toolChoice: false,\n        systemRole: false,\n        output: [\"media\"]\n      }\n    }\n  });\n}\nconst GENERIC_MODEL = commonRef(\"imagen\", {\n  supports: {\n    media: true,\n    multiturn: true,\n    tools: true,\n    systemRole: true,\n    output: [\"media\"]\n  }\n});\nconst KNOWN_MODELS = {\n  \"imagen-3.0-generate-002\": commonRef(\"imagen-3.0-generate-002\"),\n  \"imagen-4.0-generate-preview-06-06\": commonRef(\n    \"imagen-4.0-generate-preview-06-06\"\n  ),\n  \"imagen-4.0-ultra-generate-preview-06-06\": commonRef(\n    \"imagen-4.0-ultra-generate-preview-06-06\"\n  )\n};\nfunction isImagenModelName(value) {\n  return !!value?.startsWith(\"imagen-\");\n}\nfunction model(version, config = {}) {\n  const name = (0, import_utils.checkModelName)(version);\n  if (KNOWN_MODELS[name]) {\n    return KNOWN_MODELS[name].withConfig(config);\n  }\n  return (0, import_model.modelRef)({\n    name: `googleai/${name}`,\n    config,\n    configSchema: ImagenConfigSchema,\n    info: {\n      ...GENERIC_MODEL.info\n    }\n  });\n}\nfunction listActions(models) {\n  return models.filter(\n    (m) => m.supportedGenerationMethods.includes(\"predict\") && isImagenModelName((0, import_utils.modelName)(m.name))\n  ).filter((m) => !m.description || !m.description.includes(\"deprecated\")).map((m) => {\n    const ref = model(m.name);\n    return (0, import_genkit.modelActionMetadata)({\n      name: ref.name,\n      info: ref.info,\n      configSchema: ref.configSchema\n    });\n  });\n}\nfunction defineKnownModels(ai, options) {\n  for (const name of Object.keys(KNOWN_MODELS)) {\n    defineModel(ai, name, options);\n  }\n}\nfunction defineModel(ai, name, pluginOptions) {\n  (0, import_utils.checkApiKey)(pluginOptions?.apiKey);\n  const ref = model(name);\n  const clientOptions = {\n    apiVersion: pluginOptions?.apiVersion,\n    baseUrl: pluginOptions?.baseUrl\n  };\n  return ai.defineModel(\n    {\n      apiVersion: \"v2\",\n      name: ref.name,\n      ...ref.info,\n      configSchema: ref.configSchema\n    },\n    async (request, { abortSignal }) => {\n      const clientOpt = { ...clientOptions, signal: abortSignal };\n      const imagenPredictRequest = {\n        instances: [\n          {\n            prompt: (0, import_utils.extractText)(request),\n            image: (0, import_utils.extractImagenImage)(request)\n          }\n        ],\n        parameters: toImagenParameters(request)\n      };\n      const predictApiKey = (0, import_utils.calculateApiKey)(\n        pluginOptions?.apiKey,\n        request.config?.apiKey\n      );\n      const response = await (0, import_client.imagenPredict)(\n        predictApiKey,\n        (0, import_utils.extractVersion)(ref),\n        imagenPredictRequest,\n        clientOpt\n      );\n      if (!response.predictions || response.predictions.length == 0) {\n        throw new Error(\n          \"Model returned no predictions. Possibly due to content filters.\"\n        );\n      }\n      const message = {\n        role: \"model\",\n        content: response.predictions.map(fromImagenPrediction)\n      };\n      return {\n        finishReason: \"stop\",\n        message,\n        usage: (0, import_model.getBasicUsageStats)(request.messages, message),\n        custom: response\n      };\n    }\n  );\n}\nfunction fromImagenPrediction(p) {\n  const b64data = p.bytesBase64Encoded;\n  const mimeType = p.mimeType;\n  return {\n    media: {\n      url: `data:${mimeType};base64,${b64data}`,\n      contentType: mimeType\n    }\n  };\n}\nfunction toImagenParameters(request) {\n  const out = {\n    sampleCount: request.config?.numberOfImages ?? 1,\n    ...request?.config\n  };\n  for (const k in out) {\n    if (!out[k]) delete out[k];\n  }\n  delete out.apiKey;\n  return out;\n}\nconst TEST_ONLY = {\n  toImagenParameters,\n  fromImagenPrediction,\n  GENERIC_MODEL,\n  KNOWN_MODELS\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=imagen.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/imagen.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@genkit-ai/google-genai/lib/googleai/index.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar googleai_exports = {};\n__export(googleai_exports, {\n  default: () => googleai_default,\n  googleAI: () => googleAI,\n  googleAIPlugin: () => googleAIPlugin\n});\nmodule.exports = __toCommonJS(googleai_exports);\nvar import_logging = __webpack_require__(/*! genkit/logging */ \"(action-browser)/./node_modules/genkit/lib/logging.js\");\nvar import_plugin = __webpack_require__(/*! genkit/plugin */ \"(action-browser)/./node_modules/genkit/lib/plugin.js\");\nvar import_utils = __webpack_require__(/*! ../common/utils.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/common/utils.js\");\nvar import_client = __webpack_require__(/*! ./client.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/client.js\");\nvar import_utils2 = __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/utils.js\");\nvar embedder = __toESM(__webpack_require__(/*! ./embedder.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/embedder.js\"));\nvar gemini = __toESM(__webpack_require__(/*! ./gemini.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/gemini.js\"));\nvar imagen = __toESM(__webpack_require__(/*! ./imagen.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/imagen.js\"));\nvar veo = __toESM(__webpack_require__(/*! ./veo.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/veo.js\"));\nasync function initializer(ai, options) {\n  imagen.defineKnownModels(ai, options);\n  gemini.defineKnownModels(ai, options);\n  embedder.defineKnownModels(ai, options);\n  veo.defineKnownModels(ai, options);\n}\nasync function resolver(ai, actionType, actionName, options) {\n  switch (actionType) {\n    case \"model\":\n      if (veo.isVeoModelName(actionName)) {\n      } else if (imagen.isImagenModelName(actionName)) {\n        imagen.defineModel(ai, actionName, options);\n      } else {\n        gemini.defineModel(ai, actionName, options);\n      }\n      break;\n    case \"background-model\":\n      if (veo.isVeoModelName(actionName)) {\n        veo.defineModel(ai, actionName, options);\n      }\n      break;\n    case \"embedder\":\n      embedder.defineEmbedder(ai, actionName, options);\n      break;\n    default:\n  }\n}\nasync function listActions(options) {\n  try {\n    const apiKey = (0, import_utils2.calculateApiKey)(options?.apiKey, void 0);\n    const allModels = await (0, import_client.listModels)(apiKey, {\n      baseUrl: options?.baseUrl,\n      apiVersion: options?.apiVersion\n    });\n    return [\n      ...gemini.listActions(allModels),\n      ...imagen.listActions(allModels),\n      ...veo.listActions(allModels),\n      ...embedder.listActions(allModels)\n    ];\n  } catch (e) {\n    import_logging.logger.error((0, import_utils.extractErrMsg)(e));\n    return [];\n  }\n}\nfunction googleAIPlugin(options) {\n  let listActionsCache;\n  return (0, import_plugin.genkitPlugin)(\n    \"googleai\",\n    async (ai) => await initializer(ai, options),\n    async (ai, actionType, actionName) => await resolver(ai, actionType, actionName, options || {}),\n    async () => {\n      if (listActionsCache) return listActionsCache;\n      listActionsCache = await listActions(options);\n      return listActionsCache;\n    }\n  );\n}\nconst googleAI = googleAIPlugin;\ngoogleAI.model = (name, config) => {\n  if (veo.isVeoModelName(name)) {\n    return veo.model(name, config);\n  }\n  if (imagen.isImagenModelName(name)) {\n    return imagen.model(name, config);\n  }\n  return gemini.model(name, config);\n};\ngoogleAI.embedder = (name, config) => {\n  return embedder.model(name, config);\n};\nvar googleai_default = googleAI;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZS1nZW5haS9saWIvZ29vZ2xlYWkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxtR0FBbUc7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsOEJBQThCO0FBQ3ZHO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLHFCQUFxQixtQkFBTyxDQUFDLDZFQUFnQjtBQUM3QyxvQkFBb0IsbUJBQU8sQ0FBQywyRUFBZTtBQUMzQyxtQkFBbUIsbUJBQU8sQ0FBQyx1R0FBb0I7QUFDL0Msb0JBQW9CLG1CQUFPLENBQUMsbUdBQWE7QUFDekMsb0JBQW9CLG1CQUFPLENBQUMsaUdBQVk7QUFDeEMsdUJBQXVCLG1CQUFPLENBQUMsdUdBQWU7QUFDOUMscUJBQXFCLG1CQUFPLENBQUMsbUdBQWE7QUFDMUMscUJBQXFCLG1CQUFPLENBQUMsbUdBQWE7QUFDMUMsa0JBQWtCLG1CQUFPLENBQUMsNkZBQVU7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0dBQWtHO0FBQ2xHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUdMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWpzLWFwcC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZS1nZW5haS9saWIvZ29vZ2xlYWkvaW5kZXguanM/ZmQ3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKFxuICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNXG4gIC8vIGZpbGUgdGhhdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBDb21tb25KUyBmaWxlIHVzaW5nIGEgQmFiZWwtXG4gIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuIFwiX19lc01vZHVsZVwiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldFxuICAvLyBcImRlZmF1bHRcIiB0byB0aGUgQ29tbW9uSlMgXCJtb2R1bGUuZXhwb3J0c1wiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgZ29vZ2xlYWlfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoZ29vZ2xlYWlfZXhwb3J0cywge1xuICBkZWZhdWx0OiAoKSA9PiBnb29nbGVhaV9kZWZhdWx0LFxuICBnb29nbGVBSTogKCkgPT4gZ29vZ2xlQUksXG4gIGdvb2dsZUFJUGx1Z2luOiAoKSA9PiBnb29nbGVBSVBsdWdpblxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhnb29nbGVhaV9leHBvcnRzKTtcbnZhciBpbXBvcnRfbG9nZ2luZyA9IHJlcXVpcmUoXCJnZW5raXQvbG9nZ2luZ1wiKTtcbnZhciBpbXBvcnRfcGx1Z2luID0gcmVxdWlyZShcImdlbmtpdC9wbHVnaW5cIik7XG52YXIgaW1wb3J0X3V0aWxzID0gcmVxdWlyZShcIi4uL2NvbW1vbi91dGlscy5qc1wiKTtcbnZhciBpbXBvcnRfY2xpZW50ID0gcmVxdWlyZShcIi4vY2xpZW50LmpzXCIpO1xudmFyIGltcG9ydF91dGlsczIgPSByZXF1aXJlKFwiLi91dGlscy5qc1wiKTtcbnZhciBlbWJlZGRlciA9IF9fdG9FU00ocmVxdWlyZShcIi4vZW1iZWRkZXIuanNcIikpO1xudmFyIGdlbWluaSA9IF9fdG9FU00ocmVxdWlyZShcIi4vZ2VtaW5pLmpzXCIpKTtcbnZhciBpbWFnZW4gPSBfX3RvRVNNKHJlcXVpcmUoXCIuL2ltYWdlbi5qc1wiKSk7XG52YXIgdmVvID0gX190b0VTTShyZXF1aXJlKFwiLi92ZW8uanNcIikpO1xuYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZXIoYWksIG9wdGlvbnMpIHtcbiAgaW1hZ2VuLmRlZmluZUtub3duTW9kZWxzKGFpLCBvcHRpb25zKTtcbiAgZ2VtaW5pLmRlZmluZUtub3duTW9kZWxzKGFpLCBvcHRpb25zKTtcbiAgZW1iZWRkZXIuZGVmaW5lS25vd25Nb2RlbHMoYWksIG9wdGlvbnMpO1xuICB2ZW8uZGVmaW5lS25vd25Nb2RlbHMoYWksIG9wdGlvbnMpO1xufVxuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZXIoYWksIGFjdGlvblR5cGUsIGFjdGlvbk5hbWUsIG9wdGlvbnMpIHtcbiAgc3dpdGNoIChhY3Rpb25UeXBlKSB7XG4gICAgY2FzZSBcIm1vZGVsXCI6XG4gICAgICBpZiAodmVvLmlzVmVvTW9kZWxOYW1lKGFjdGlvbk5hbWUpKSB7XG4gICAgICB9IGVsc2UgaWYgKGltYWdlbi5pc0ltYWdlbk1vZGVsTmFtZShhY3Rpb25OYW1lKSkge1xuICAgICAgICBpbWFnZW4uZGVmaW5lTW9kZWwoYWksIGFjdGlvbk5hbWUsIG9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2VtaW5pLmRlZmluZU1vZGVsKGFpLCBhY3Rpb25OYW1lLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJiYWNrZ3JvdW5kLW1vZGVsXCI6XG4gICAgICBpZiAodmVvLmlzVmVvTW9kZWxOYW1lKGFjdGlvbk5hbWUpKSB7XG4gICAgICAgIHZlby5kZWZpbmVNb2RlbChhaSwgYWN0aW9uTmFtZSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZW1iZWRkZXJcIjpcbiAgICAgIGVtYmVkZGVyLmRlZmluZUVtYmVkZGVyKGFpLCBhY3Rpb25OYW1lLCBvcHRpb25zKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGxpc3RBY3Rpb25zKG9wdGlvbnMpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBhcGlLZXkgPSAoMCwgaW1wb3J0X3V0aWxzMi5jYWxjdWxhdGVBcGlLZXkpKG9wdGlvbnM/LmFwaUtleSwgdm9pZCAwKTtcbiAgICBjb25zdCBhbGxNb2RlbHMgPSBhd2FpdCAoMCwgaW1wb3J0X2NsaWVudC5saXN0TW9kZWxzKShhcGlLZXksIHtcbiAgICAgIGJhc2VVcmw6IG9wdGlvbnM/LmJhc2VVcmwsXG4gICAgICBhcGlWZXJzaW9uOiBvcHRpb25zPy5hcGlWZXJzaW9uXG4gICAgfSk7XG4gICAgcmV0dXJuIFtcbiAgICAgIC4uLmdlbWluaS5saXN0QWN0aW9ucyhhbGxNb2RlbHMpLFxuICAgICAgLi4uaW1hZ2VuLmxpc3RBY3Rpb25zKGFsbE1vZGVscyksXG4gICAgICAuLi52ZW8ubGlzdEFjdGlvbnMoYWxsTW9kZWxzKSxcbiAgICAgIC4uLmVtYmVkZGVyLmxpc3RBY3Rpb25zKGFsbE1vZGVscylcbiAgICBdO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaW1wb3J0X2xvZ2dpbmcubG9nZ2VyLmVycm9yKCgwLCBpbXBvcnRfdXRpbHMuZXh0cmFjdEVyck1zZykoZSkpO1xuICAgIHJldHVybiBbXTtcbiAgfVxufVxuZnVuY3Rpb24gZ29vZ2xlQUlQbHVnaW4ob3B0aW9ucykge1xuICBsZXQgbGlzdEFjdGlvbnNDYWNoZTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfcGx1Z2luLmdlbmtpdFBsdWdpbikoXG4gICAgXCJnb29nbGVhaVwiLFxuICAgIGFzeW5jIChhaSkgPT4gYXdhaXQgaW5pdGlhbGl6ZXIoYWksIG9wdGlvbnMpLFxuICAgIGFzeW5jIChhaSwgYWN0aW9uVHlwZSwgYWN0aW9uTmFtZSkgPT4gYXdhaXQgcmVzb2x2ZXIoYWksIGFjdGlvblR5cGUsIGFjdGlvbk5hbWUsIG9wdGlvbnMgfHwge30pLFxuICAgIGFzeW5jICgpID0+IHtcbiAgICAgIGlmIChsaXN0QWN0aW9uc0NhY2hlKSByZXR1cm4gbGlzdEFjdGlvbnNDYWNoZTtcbiAgICAgIGxpc3RBY3Rpb25zQ2FjaGUgPSBhd2FpdCBsaXN0QWN0aW9ucyhvcHRpb25zKTtcbiAgICAgIHJldHVybiBsaXN0QWN0aW9uc0NhY2hlO1xuICAgIH1cbiAgKTtcbn1cbmNvbnN0IGdvb2dsZUFJID0gZ29vZ2xlQUlQbHVnaW47XG5nb29nbGVBSS5tb2RlbCA9IChuYW1lLCBjb25maWcpID0+IHtcbiAgaWYgKHZlby5pc1Zlb01vZGVsTmFtZShuYW1lKSkge1xuICAgIHJldHVybiB2ZW8ubW9kZWwobmFtZSwgY29uZmlnKTtcbiAgfVxuICBpZiAoaW1hZ2VuLmlzSW1hZ2VuTW9kZWxOYW1lKG5hbWUpKSB7XG4gICAgcmV0dXJuIGltYWdlbi5tb2RlbChuYW1lLCBjb25maWcpO1xuICB9XG4gIHJldHVybiBnZW1pbmkubW9kZWwobmFtZSwgY29uZmlnKTtcbn07XG5nb29nbGVBSS5lbWJlZGRlciA9IChuYW1lLCBjb25maWcpID0+IHtcbiAgcmV0dXJuIGVtYmVkZGVyLm1vZGVsKG5hbWUsIGNvbmZpZyk7XG59O1xudmFyIGdvb2dsZWFpX2RlZmF1bHQgPSBnb29nbGVBSTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBnb29nbGVBSSxcbiAgZ29vZ2xlQUlQbHVnaW5cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/types.js":
/*!********************************************************************!*\
  !*** ./node_modules/@genkit-ai/google-genai/lib/googleai/types.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar types_exports = {};\n__export(types_exports, {\n  FinishReason: () => import_types.FinishReason,\n  HarmBlockThreshold: () => import_types.HarmBlockThreshold,\n  HarmCategory: () => import_types.HarmCategory,\n  TaskTypeSchema: () => import_types.TaskTypeSchema\n});\nmodule.exports = __toCommonJS(types_exports);\nvar import_types = __webpack_require__(/*! ../common/types.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/common/types.js\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZS1nZW5haS9saWIvZ29vZ2xlYWkvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxtQkFBbUIsbUJBQU8sQ0FBQyx1R0FBb0I7QUFDL0M7QUFDQSxNQUFNLENBS0w7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtanMtYXBwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZ29vZ2xlLWdlbmFpL2xpYi9nb29nbGVhaS90eXBlcy5qcz85NjU5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciB0eXBlc19leHBvcnRzID0ge307XG5fX2V4cG9ydCh0eXBlc19leHBvcnRzLCB7XG4gIEZpbmlzaFJlYXNvbjogKCkgPT4gaW1wb3J0X3R5cGVzLkZpbmlzaFJlYXNvbixcbiAgSGFybUJsb2NrVGhyZXNob2xkOiAoKSA9PiBpbXBvcnRfdHlwZXMuSGFybUJsb2NrVGhyZXNob2xkLFxuICBIYXJtQ2F0ZWdvcnk6ICgpID0+IGltcG9ydF90eXBlcy5IYXJtQ2F0ZWdvcnksXG4gIFRhc2tUeXBlU2NoZW1hOiAoKSA9PiBpbXBvcnRfdHlwZXMuVGFza1R5cGVTY2hlbWFcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlModHlwZXNfZXhwb3J0cyk7XG52YXIgaW1wb3J0X3R5cGVzID0gcmVxdWlyZShcIi4uL2NvbW1vbi90eXBlcy5qc1wiKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBGaW5pc2hSZWFzb24sXG4gIEhhcm1CbG9ja1RocmVzaG9sZCxcbiAgSGFybUNhdGVnb3J5LFxuICBUYXNrVHlwZVNjaGVtYVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/types.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/utils.js":
/*!********************************************************************!*\
  !*** ./node_modules/@genkit-ai/google-genai/lib/googleai/utils.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar utils_exports = {};\n__export(utils_exports, {\n  API_KEY_FALSE_ERROR: () => API_KEY_FALSE_ERROR,\n  MISSING_API_KEY_ERROR: () => MISSING_API_KEY_ERROR,\n  calculateApiKey: () => calculateApiKey,\n  checkApiKey: () => checkApiKey,\n  checkModelName: () => import_utils2.checkModelName,\n  cleanSchema: () => import_utils2.cleanSchema,\n  extractImagenImage: () => extractImagenImage,\n  extractText: () => import_utils2.extractText,\n  extractVeoImage: () => extractVeoImage,\n  extractVersion: () => import_utils2.extractVersion,\n  getApiKeyFromEnvVar: () => getApiKeyFromEnvVar,\n  modelName: () => import_utils2.modelName\n});\nmodule.exports = __toCommonJS(utils_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_process = __toESM(__webpack_require__(/*! process */ \"process\"));\nvar import_utils = __webpack_require__(/*! ../common/utils.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/common/utils.js\");\nvar import_utils2 = __webpack_require__(/*! ../common/utils.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/common/utils.js\");\nfunction getApiKeyFromEnvVar() {\n  return import_process.default.env.GEMINI_API_KEY || import_process.default.env.GOOGLE_API_KEY || import_process.default.env.GOOGLE_GENAI_API_KEY;\n}\nconst MISSING_API_KEY_ERROR = new import_genkit.GenkitError({\n  status: \"FAILED_PRECONDITION\",\n  message: \"Please pass in the API key or set the GEMINI_API_KEY or GOOGLE_API_KEY environment variable.\\nFor more details see https://genkit.dev/docs/plugins/google-genai/\"\n});\nconst API_KEY_FALSE_ERROR = new import_genkit.GenkitError({\n  status: \"INVALID_ARGUMENT\",\n  message: \"GoogleAI plugin was initialized with {apiKey: false} but no apiKey configuration was passed at call time.\"\n});\nfunction checkApiKey(pluginApiKey) {\n  let apiKey;\n  if (pluginApiKey !== false) {\n    apiKey = pluginApiKey || getApiKeyFromEnvVar();\n  }\n  if (pluginApiKey !== false && !apiKey) {\n    throw MISSING_API_KEY_ERROR;\n  }\n  return apiKey;\n}\nfunction calculateApiKey(pluginApiKey, requestApiKey) {\n  let apiKey;\n  if (pluginApiKey !== false) {\n    apiKey = pluginApiKey || getApiKeyFromEnvVar();\n  }\n  apiKey = requestApiKey || apiKey;\n  if (pluginApiKey === false && !requestApiKey) {\n    throw API_KEY_FALSE_ERROR;\n  }\n  if (!apiKey) {\n    throw MISSING_API_KEY_ERROR;\n  }\n  return apiKey;\n}\nfunction extractVeoImage(request) {\n  const media = request.messages.at(-1)?.content.find((p) => !!p.media)?.media;\n  if (media) {\n    const img = media.url.split(\",\")[1];\n    if (img && media.contentType) {\n      return {\n        bytesBase64Encoded: img,\n        mimeType: media.contentType\n      };\n    } else if (img) {\n      throw new import_genkit.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: \"content type is required for images\"\n      });\n    }\n  }\n  return void 0;\n}\nfunction extractImagenImage(request) {\n  const image = (0, import_utils.extractMedia)(request, {\n    metadataType: \"base\",\n    isDefault: true\n  })?.url.split(\",\")[1];\n  if (image) {\n    return { bytesBase64Encoded: image };\n  }\n  return void 0;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZS1nZW5haS9saWIvZ29vZ2xlYWkvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxtR0FBbUc7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsOEJBQThCO0FBQ3ZHO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG9CQUFvQixtQkFBTyxDQUFDLG1FQUFRO0FBQ3BDLDZCQUE2QixtQkFBTyxDQUFDLHdCQUFTO0FBQzlDLG1CQUFtQixtQkFBTyxDQUFDLHVHQUFvQjtBQUMvQyxvQkFBb0IsbUJBQU8sQ0FBQyx1R0FBb0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxrREFBa0QsZUFBZTtBQUNqRSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQWFMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWpzLWFwcC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZS1nZW5haS9saWIvZ29vZ2xlYWkvdXRpbHMuanM/NTI1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKFxuICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNXG4gIC8vIGZpbGUgdGhhdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBDb21tb25KUyBmaWxlIHVzaW5nIGEgQmFiZWwtXG4gIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuIFwiX19lc01vZHVsZVwiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldFxuICAvLyBcImRlZmF1bHRcIiB0byB0aGUgQ29tbW9uSlMgXCJtb2R1bGUuZXhwb3J0c1wiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgdXRpbHNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQodXRpbHNfZXhwb3J0cywge1xuICBBUElfS0VZX0ZBTFNFX0VSUk9SOiAoKSA9PiBBUElfS0VZX0ZBTFNFX0VSUk9SLFxuICBNSVNTSU5HX0FQSV9LRVlfRVJST1I6ICgpID0+IE1JU1NJTkdfQVBJX0tFWV9FUlJPUixcbiAgY2FsY3VsYXRlQXBpS2V5OiAoKSA9PiBjYWxjdWxhdGVBcGlLZXksXG4gIGNoZWNrQXBpS2V5OiAoKSA9PiBjaGVja0FwaUtleSxcbiAgY2hlY2tNb2RlbE5hbWU6ICgpID0+IGltcG9ydF91dGlsczIuY2hlY2tNb2RlbE5hbWUsXG4gIGNsZWFuU2NoZW1hOiAoKSA9PiBpbXBvcnRfdXRpbHMyLmNsZWFuU2NoZW1hLFxuICBleHRyYWN0SW1hZ2VuSW1hZ2U6ICgpID0+IGV4dHJhY3RJbWFnZW5JbWFnZSxcbiAgZXh0cmFjdFRleHQ6ICgpID0+IGltcG9ydF91dGlsczIuZXh0cmFjdFRleHQsXG4gIGV4dHJhY3RWZW9JbWFnZTogKCkgPT4gZXh0cmFjdFZlb0ltYWdlLFxuICBleHRyYWN0VmVyc2lvbjogKCkgPT4gaW1wb3J0X3V0aWxzMi5leHRyYWN0VmVyc2lvbixcbiAgZ2V0QXBpS2V5RnJvbUVudlZhcjogKCkgPT4gZ2V0QXBpS2V5RnJvbUVudlZhcixcbiAgbW9kZWxOYW1lOiAoKSA9PiBpbXBvcnRfdXRpbHMyLm1vZGVsTmFtZVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyh1dGlsc19leHBvcnRzKTtcbnZhciBpbXBvcnRfZ2Vua2l0ID0gcmVxdWlyZShcImdlbmtpdFwiKTtcbnZhciBpbXBvcnRfcHJvY2VzcyA9IF9fdG9FU00ocmVxdWlyZShcInByb2Nlc3NcIikpO1xudmFyIGltcG9ydF91dGlscyA9IHJlcXVpcmUoXCIuLi9jb21tb24vdXRpbHMuanNcIik7XG52YXIgaW1wb3J0X3V0aWxzMiA9IHJlcXVpcmUoXCIuLi9jb21tb24vdXRpbHMuanNcIik7XG5mdW5jdGlvbiBnZXRBcGlLZXlGcm9tRW52VmFyKCkge1xuICByZXR1cm4gaW1wb3J0X3Byb2Nlc3MuZGVmYXVsdC5lbnYuR0VNSU5JX0FQSV9LRVkgfHwgaW1wb3J0X3Byb2Nlc3MuZGVmYXVsdC5lbnYuR09PR0xFX0FQSV9LRVkgfHwgaW1wb3J0X3Byb2Nlc3MuZGVmYXVsdC5lbnYuR09PR0xFX0dFTkFJX0FQSV9LRVk7XG59XG5jb25zdCBNSVNTSU5HX0FQSV9LRVlfRVJST1IgPSBuZXcgaW1wb3J0X2dlbmtpdC5HZW5raXRFcnJvcih7XG4gIHN0YXR1czogXCJGQUlMRURfUFJFQ09ORElUSU9OXCIsXG4gIG1lc3NhZ2U6IFwiUGxlYXNlIHBhc3MgaW4gdGhlIEFQSSBrZXkgb3Igc2V0IHRoZSBHRU1JTklfQVBJX0tFWSBvciBHT09HTEVfQVBJX0tFWSBlbnZpcm9ubWVudCB2YXJpYWJsZS5cXG5Gb3IgbW9yZSBkZXRhaWxzIHNlZSBodHRwczovL2dlbmtpdC5kZXYvZG9jcy9wbHVnaW5zL2dvb2dsZS1nZW5haS9cIlxufSk7XG5jb25zdCBBUElfS0VZX0ZBTFNFX0VSUk9SID0gbmV3IGltcG9ydF9nZW5raXQuR2Vua2l0RXJyb3Ioe1xuICBzdGF0dXM6IFwiSU5WQUxJRF9BUkdVTUVOVFwiLFxuICBtZXNzYWdlOiBcIkdvb2dsZUFJIHBsdWdpbiB3YXMgaW5pdGlhbGl6ZWQgd2l0aCB7YXBpS2V5OiBmYWxzZX0gYnV0IG5vIGFwaUtleSBjb25maWd1cmF0aW9uIHdhcyBwYXNzZWQgYXQgY2FsbCB0aW1lLlwiXG59KTtcbmZ1bmN0aW9uIGNoZWNrQXBpS2V5KHBsdWdpbkFwaUtleSkge1xuICBsZXQgYXBpS2V5O1xuICBpZiAocGx1Z2luQXBpS2V5ICE9PSBmYWxzZSkge1xuICAgIGFwaUtleSA9IHBsdWdpbkFwaUtleSB8fCBnZXRBcGlLZXlGcm9tRW52VmFyKCk7XG4gIH1cbiAgaWYgKHBsdWdpbkFwaUtleSAhPT0gZmFsc2UgJiYgIWFwaUtleSkge1xuICAgIHRocm93IE1JU1NJTkdfQVBJX0tFWV9FUlJPUjtcbiAgfVxuICByZXR1cm4gYXBpS2V5O1xufVxuZnVuY3Rpb24gY2FsY3VsYXRlQXBpS2V5KHBsdWdpbkFwaUtleSwgcmVxdWVzdEFwaUtleSkge1xuICBsZXQgYXBpS2V5O1xuICBpZiAocGx1Z2luQXBpS2V5ICE9PSBmYWxzZSkge1xuICAgIGFwaUtleSA9IHBsdWdpbkFwaUtleSB8fCBnZXRBcGlLZXlGcm9tRW52VmFyKCk7XG4gIH1cbiAgYXBpS2V5ID0gcmVxdWVzdEFwaUtleSB8fCBhcGlLZXk7XG4gIGlmIChwbHVnaW5BcGlLZXkgPT09IGZhbHNlICYmICFyZXF1ZXN0QXBpS2V5KSB7XG4gICAgdGhyb3cgQVBJX0tFWV9GQUxTRV9FUlJPUjtcbiAgfVxuICBpZiAoIWFwaUtleSkge1xuICAgIHRocm93IE1JU1NJTkdfQVBJX0tFWV9FUlJPUjtcbiAgfVxuICByZXR1cm4gYXBpS2V5O1xufVxuZnVuY3Rpb24gZXh0cmFjdFZlb0ltYWdlKHJlcXVlc3QpIHtcbiAgY29uc3QgbWVkaWEgPSByZXF1ZXN0Lm1lc3NhZ2VzLmF0KC0xKT8uY29udGVudC5maW5kKChwKSA9PiAhIXAubWVkaWEpPy5tZWRpYTtcbiAgaWYgKG1lZGlhKSB7XG4gICAgY29uc3QgaW1nID0gbWVkaWEudXJsLnNwbGl0KFwiLFwiKVsxXTtcbiAgICBpZiAoaW1nICYmIG1lZGlhLmNvbnRlbnRUeXBlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBieXRlc0Jhc2U2NEVuY29kZWQ6IGltZyxcbiAgICAgICAgbWltZVR5cGU6IG1lZGlhLmNvbnRlbnRUeXBlXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoaW1nKSB7XG4gICAgICB0aHJvdyBuZXcgaW1wb3J0X2dlbmtpdC5HZW5raXRFcnJvcih7XG4gICAgICAgIHN0YXR1czogXCJJTlZBTElEX0FSR1VNRU5UXCIsXG4gICAgICAgIG1lc3NhZ2U6IFwiY29udGVudCB0eXBlIGlzIHJlcXVpcmVkIGZvciBpbWFnZXNcIlxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG5mdW5jdGlvbiBleHRyYWN0SW1hZ2VuSW1hZ2UocmVxdWVzdCkge1xuICBjb25zdCBpbWFnZSA9ICgwLCBpbXBvcnRfdXRpbHMuZXh0cmFjdE1lZGlhKShyZXF1ZXN0LCB7XG4gICAgbWV0YWRhdGFUeXBlOiBcImJhc2VcIixcbiAgICBpc0RlZmF1bHQ6IHRydWVcbiAgfSk/LnVybC5zcGxpdChcIixcIilbMV07XG4gIGlmIChpbWFnZSkge1xuICAgIHJldHVybiB7IGJ5dGVzQmFzZTY0RW5jb2RlZDogaW1hZ2UgfTtcbiAgfVxuICByZXR1cm4gdm9pZCAwO1xufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFQSV9LRVlfRkFMU0VfRVJST1IsXG4gIE1JU1NJTkdfQVBJX0tFWV9FUlJPUixcbiAgY2FsY3VsYXRlQXBpS2V5LFxuICBjaGVja0FwaUtleSxcbiAgY2hlY2tNb2RlbE5hbWUsXG4gIGNsZWFuU2NoZW1hLFxuICBleHRyYWN0SW1hZ2VuSW1hZ2UsXG4gIGV4dHJhY3RUZXh0LFxuICBleHRyYWN0VmVvSW1hZ2UsXG4gIGV4dHJhY3RWZXJzaW9uLFxuICBnZXRBcGlLZXlGcm9tRW52VmFyLFxuICBtb2RlbE5hbWVcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/utils.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/veo.js":
/*!******************************************************************!*\
  !*** ./node_modules/@genkit-ai/google-genai/lib/googleai/veo.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar veo_exports = {};\n__export(veo_exports, {\n  TEST_ONLY: () => TEST_ONLY,\n  VeoConfigSchema: () => VeoConfigSchema,\n  defineKnownModels: () => defineKnownModels,\n  defineModel: () => defineModel,\n  isVeoModelName: () => isVeoModelName,\n  listActions: () => listActions,\n  model: () => model\n});\nmodule.exports = __toCommonJS(veo_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_model = __webpack_require__(/*! genkit/model */ \"(action-browser)/./node_modules/genkit/lib/model.js\");\nvar import_client = __webpack_require__(/*! ./client.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/client.js\");\nvar import_utils = __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/utils.js\");\nconst VeoConfigSchema = import_genkit.z.object({\n  // NOTE: Documentation notes numberOfVideos parameter to pick the number of\n  // output videos, but this setting does not seem to work\n  negativePrompt: import_genkit.z.string().optional(),\n  aspectRatio: import_genkit.z.enum([\"9:16\", \"16:9\"]).describe(\"Desired aspect ratio of the output video.\").optional(),\n  personGeneration: import_genkit.z.enum([\"dont_allow\", \"allow_adult\", \"allow_all\"]).describe(\n    \"Control if/how images of people will be generated by the model.\"\n  ).optional(),\n  durationSeconds: import_genkit.z.number().step(1).min(5).max(8).describe(\"Length of each output video in seconds, between 5 and 8.\").optional(),\n  enhancePrompt: import_genkit.z.boolean().describe(\"Enable or disable the prompt rewriter. Enabled by default.\").optional()\n}).passthrough();\nfunction commonRef(name, info, configSchema = VeoConfigSchema) {\n  return (0, import_model.modelRef)({\n    name: `googleai/${name}`,\n    configSchema,\n    info: info ?? {\n      supports: {\n        media: true,\n        multiturn: false,\n        tools: false,\n        systemRole: false,\n        output: [\"media\"],\n        longRunning: true\n      }\n    }\n    // TODO(ifielker): Remove this cast if we fix longRunning\n  });\n}\nconst GENERIC_MODEL = commonRef(\"veo\");\nconst KNOWN_MODELS = {\n  \"veo-3.0-generate-preview\": commonRef(\"veo-3.0-generate-preview\"),\n  \"veo-3.0-fast-generate-preview\": commonRef(\"veo-3.0-fast-generate-preview\"),\n  \"veo-2.0-generate-001\": commonRef(\"veo-2.0-generate-001\")\n};\nfunction isVeoModelName(value) {\n  return !!value?.startsWith(\"veo-\");\n}\nfunction model(version, config = {}) {\n  const name = (0, import_utils.checkModelName)(version);\n  return (0, import_model.modelRef)({\n    name: `googleai/${name}`,\n    config,\n    configSchema: VeoConfigSchema,\n    info: { ...GENERIC_MODEL.info }\n  });\n}\nfunction listActions(models) {\n  return models.filter(\n    (m) => m.supportedGenerationMethods.includes(\"predictLongRunning\") && isVeoModelName((0, import_utils.modelName)(m.name))\n  ).filter((m) => !m.description || !m.description.includes(\"deprecated\")).map((m) => {\n    const ref = model(m.name);\n    return (0, import_genkit.modelActionMetadata)({\n      name: ref.name,\n      info: ref.info,\n      configSchema: ref.configSchema\n    });\n  });\n}\nfunction defineKnownModels(ai, options) {\n  for (const name of Object.keys(KNOWN_MODELS)) {\n    defineModel(ai, name, options);\n  }\n}\nfunction defineModel(ai, name, pluginOptions) {\n  const ref = model(name);\n  const clientOptions = {\n    apiVersion: pluginOptions?.apiVersion,\n    baseUrl: pluginOptions?.baseUrl\n  };\n  return ai.defineBackgroundModel({\n    name: ref.name,\n    ...ref.info,\n    configSchema: ref.configSchema,\n    async start(request) {\n      const apiKey = (0, import_utils.calculateApiKey)(pluginOptions?.apiKey, void 0);\n      const veoPredictRequest = {\n        instances: [\n          {\n            prompt: (0, import_utils.extractText)(request),\n            image: (0, import_utils.extractVeoImage)(request)\n          }\n        ],\n        parameters: toVeoParameters(request)\n      };\n      const response = await (0, import_client.veoPredict)(\n        apiKey,\n        (0, import_utils.extractVersion)(ref),\n        veoPredictRequest,\n        clientOptions\n      );\n      return fromVeoOperation(response);\n    },\n    async check(operation) {\n      const apiKey = (0, import_utils.calculateApiKey)(pluginOptions?.apiKey, void 0);\n      const response = await (0, import_client.veoCheckOperation)(\n        apiKey,\n        operation.id,\n        clientOptions\n      );\n      return fromVeoOperation(response);\n    }\n  });\n}\nfunction toVeoParameters(request) {\n  const out = {\n    ...request?.config\n  };\n  for (const k in out) {\n    if (out[k] === null) delete out[k];\n  }\n  delete out.apiKey;\n  delete out.version;\n  return out;\n}\nfunction fromVeoOperation(apiOp) {\n  const res = { id: apiOp.name };\n  if (apiOp.done !== void 0) {\n    res.done = apiOp.done;\n  }\n  if (apiOp.error) {\n    res.error = { message: apiOp.error.message };\n  }\n  if (apiOp.response && apiOp.response.generateVideoResponse && apiOp.response.generateVideoResponse.generatedSamples) {\n    res.output = {\n      finishReason: \"stop\",\n      raw: apiOp.response,\n      message: {\n        role: \"model\",\n        content: apiOp.response.generateVideoResponse.generatedSamples.map(\n          (s) => {\n            return {\n              media: {\n                url: s.video.uri\n              }\n            };\n          }\n        )\n      }\n    };\n  }\n  return res;\n}\nconst TEST_ONLY = {\n  toVeoParameters,\n  fromVeoOperation,\n  GENERIC_MODEL,\n  KNOWN_MODELS\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=veo.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZS1nZW5haS9saWIvZ29vZ2xlYWkvdmVvLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esb0JBQW9CLG1CQUFPLENBQUMsbUVBQVE7QUFDcEMsbUJBQW1CLG1CQUFPLENBQUMseUVBQWM7QUFDekMsb0JBQW9CLG1CQUFPLENBQUMsbUdBQWE7QUFDekMsbUJBQW1CLG1CQUFPLENBQUMsaUdBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLHNCQUFzQixLQUFLO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0Esc0JBQXNCLEtBQUs7QUFDM0I7QUFDQTtBQUNBLFlBQVk7QUFDWixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FRTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1qcy1hcHAvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9nb29nbGUtZ2VuYWkvbGliL2dvb2dsZWFpL3Zlby5qcz9kMTc5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciB2ZW9fZXhwb3J0cyA9IHt9O1xuX19leHBvcnQodmVvX2V4cG9ydHMsIHtcbiAgVEVTVF9PTkxZOiAoKSA9PiBURVNUX09OTFksXG4gIFZlb0NvbmZpZ1NjaGVtYTogKCkgPT4gVmVvQ29uZmlnU2NoZW1hLFxuICBkZWZpbmVLbm93bk1vZGVsczogKCkgPT4gZGVmaW5lS25vd25Nb2RlbHMsXG4gIGRlZmluZU1vZGVsOiAoKSA9PiBkZWZpbmVNb2RlbCxcbiAgaXNWZW9Nb2RlbE5hbWU6ICgpID0+IGlzVmVvTW9kZWxOYW1lLFxuICBsaXN0QWN0aW9uczogKCkgPT4gbGlzdEFjdGlvbnMsXG4gIG1vZGVsOiAoKSA9PiBtb2RlbFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyh2ZW9fZXhwb3J0cyk7XG52YXIgaW1wb3J0X2dlbmtpdCA9IHJlcXVpcmUoXCJnZW5raXRcIik7XG52YXIgaW1wb3J0X21vZGVsID0gcmVxdWlyZShcImdlbmtpdC9tb2RlbFwiKTtcbnZhciBpbXBvcnRfY2xpZW50ID0gcmVxdWlyZShcIi4vY2xpZW50LmpzXCIpO1xudmFyIGltcG9ydF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzLmpzXCIpO1xuY29uc3QgVmVvQ29uZmlnU2NoZW1hID0gaW1wb3J0X2dlbmtpdC56Lm9iamVjdCh7XG4gIC8vIE5PVEU6IERvY3VtZW50YXRpb24gbm90ZXMgbnVtYmVyT2ZWaWRlb3MgcGFyYW1ldGVyIHRvIHBpY2sgdGhlIG51bWJlciBvZlxuICAvLyBvdXRwdXQgdmlkZW9zLCBidXQgdGhpcyBzZXR0aW5nIGRvZXMgbm90IHNlZW0gdG8gd29ya1xuICBuZWdhdGl2ZVByb21wdDogaW1wb3J0X2dlbmtpdC56LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIGFzcGVjdFJhdGlvOiBpbXBvcnRfZ2Vua2l0LnouZW51bShbXCI5OjE2XCIsIFwiMTY6OVwiXSkuZGVzY3JpYmUoXCJEZXNpcmVkIGFzcGVjdCByYXRpbyBvZiB0aGUgb3V0cHV0IHZpZGVvLlwiKS5vcHRpb25hbCgpLFxuICBwZXJzb25HZW5lcmF0aW9uOiBpbXBvcnRfZ2Vua2l0LnouZW51bShbXCJkb250X2FsbG93XCIsIFwiYWxsb3dfYWR1bHRcIiwgXCJhbGxvd19hbGxcIl0pLmRlc2NyaWJlKFxuICAgIFwiQ29udHJvbCBpZi9ob3cgaW1hZ2VzIG9mIHBlb3BsZSB3aWxsIGJlIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwuXCJcbiAgKS5vcHRpb25hbCgpLFxuICBkdXJhdGlvblNlY29uZHM6IGltcG9ydF9nZW5raXQuei5udW1iZXIoKS5zdGVwKDEpLm1pbig1KS5tYXgoOCkuZGVzY3JpYmUoXCJMZW5ndGggb2YgZWFjaCBvdXRwdXQgdmlkZW8gaW4gc2Vjb25kcywgYmV0d2VlbiA1IGFuZCA4LlwiKS5vcHRpb25hbCgpLFxuICBlbmhhbmNlUHJvbXB0OiBpbXBvcnRfZ2Vua2l0LnouYm9vbGVhbigpLmRlc2NyaWJlKFwiRW5hYmxlIG9yIGRpc2FibGUgdGhlIHByb21wdCByZXdyaXRlci4gRW5hYmxlZCBieSBkZWZhdWx0LlwiKS5vcHRpb25hbCgpXG59KS5wYXNzdGhyb3VnaCgpO1xuZnVuY3Rpb24gY29tbW9uUmVmKG5hbWUsIGluZm8sIGNvbmZpZ1NjaGVtYSA9IFZlb0NvbmZpZ1NjaGVtYSkge1xuICByZXR1cm4gKDAsIGltcG9ydF9tb2RlbC5tb2RlbFJlZikoe1xuICAgIG5hbWU6IGBnb29nbGVhaS8ke25hbWV9YCxcbiAgICBjb25maWdTY2hlbWEsXG4gICAgaW5mbzogaW5mbyA/PyB7XG4gICAgICBzdXBwb3J0czoge1xuICAgICAgICBtZWRpYTogdHJ1ZSxcbiAgICAgICAgbXVsdGl0dXJuOiBmYWxzZSxcbiAgICAgICAgdG9vbHM6IGZhbHNlLFxuICAgICAgICBzeXN0ZW1Sb2xlOiBmYWxzZSxcbiAgICAgICAgb3V0cHV0OiBbXCJtZWRpYVwiXSxcbiAgICAgICAgbG9uZ1J1bm5pbmc6IHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gVE9ETyhpZmllbGtlcik6IFJlbW92ZSB0aGlzIGNhc3QgaWYgd2UgZml4IGxvbmdSdW5uaW5nXG4gIH0pO1xufVxuY29uc3QgR0VORVJJQ19NT0RFTCA9IGNvbW1vblJlZihcInZlb1wiKTtcbmNvbnN0IEtOT1dOX01PREVMUyA9IHtcbiAgXCJ2ZW8tMy4wLWdlbmVyYXRlLXByZXZpZXdcIjogY29tbW9uUmVmKFwidmVvLTMuMC1nZW5lcmF0ZS1wcmV2aWV3XCIpLFxuICBcInZlby0zLjAtZmFzdC1nZW5lcmF0ZS1wcmV2aWV3XCI6IGNvbW1vblJlZihcInZlby0zLjAtZmFzdC1nZW5lcmF0ZS1wcmV2aWV3XCIpLFxuICBcInZlby0yLjAtZ2VuZXJhdGUtMDAxXCI6IGNvbW1vblJlZihcInZlby0yLjAtZ2VuZXJhdGUtMDAxXCIpXG59O1xuZnVuY3Rpb24gaXNWZW9Nb2RlbE5hbWUodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWU/LnN0YXJ0c1dpdGgoXCJ2ZW8tXCIpO1xufVxuZnVuY3Rpb24gbW9kZWwodmVyc2lvbiwgY29uZmlnID0ge30pIHtcbiAgY29uc3QgbmFtZSA9ICgwLCBpbXBvcnRfdXRpbHMuY2hlY2tNb2RlbE5hbWUpKHZlcnNpb24pO1xuICByZXR1cm4gKDAsIGltcG9ydF9tb2RlbC5tb2RlbFJlZikoe1xuICAgIG5hbWU6IGBnb29nbGVhaS8ke25hbWV9YCxcbiAgICBjb25maWcsXG4gICAgY29uZmlnU2NoZW1hOiBWZW9Db25maWdTY2hlbWEsXG4gICAgaW5mbzogeyAuLi5HRU5FUklDX01PREVMLmluZm8gfVxuICB9KTtcbn1cbmZ1bmN0aW9uIGxpc3RBY3Rpb25zKG1vZGVscykge1xuICByZXR1cm4gbW9kZWxzLmZpbHRlcihcbiAgICAobSkgPT4gbS5zdXBwb3J0ZWRHZW5lcmF0aW9uTWV0aG9kcy5pbmNsdWRlcyhcInByZWRpY3RMb25nUnVubmluZ1wiKSAmJiBpc1Zlb01vZGVsTmFtZSgoMCwgaW1wb3J0X3V0aWxzLm1vZGVsTmFtZSkobS5uYW1lKSlcbiAgKS5maWx0ZXIoKG0pID0+ICFtLmRlc2NyaXB0aW9uIHx8ICFtLmRlc2NyaXB0aW9uLmluY2x1ZGVzKFwiZGVwcmVjYXRlZFwiKSkubWFwKChtKSA9PiB7XG4gICAgY29uc3QgcmVmID0gbW9kZWwobS5uYW1lKTtcbiAgICByZXR1cm4gKDAsIGltcG9ydF9nZW5raXQubW9kZWxBY3Rpb25NZXRhZGF0YSkoe1xuICAgICAgbmFtZTogcmVmLm5hbWUsXG4gICAgICBpbmZvOiByZWYuaW5mbyxcbiAgICAgIGNvbmZpZ1NjaGVtYTogcmVmLmNvbmZpZ1NjaGVtYVxuICAgIH0pO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGRlZmluZUtub3duTW9kZWxzKGFpLCBvcHRpb25zKSB7XG4gIGZvciAoY29uc3QgbmFtZSBvZiBPYmplY3Qua2V5cyhLTk9XTl9NT0RFTFMpKSB7XG4gICAgZGVmaW5lTW9kZWwoYWksIG5hbWUsIG9wdGlvbnMpO1xuICB9XG59XG5mdW5jdGlvbiBkZWZpbmVNb2RlbChhaSwgbmFtZSwgcGx1Z2luT3B0aW9ucykge1xuICBjb25zdCByZWYgPSBtb2RlbChuYW1lKTtcbiAgY29uc3QgY2xpZW50T3B0aW9ucyA9IHtcbiAgICBhcGlWZXJzaW9uOiBwbHVnaW5PcHRpb25zPy5hcGlWZXJzaW9uLFxuICAgIGJhc2VVcmw6IHBsdWdpbk9wdGlvbnM/LmJhc2VVcmxcbiAgfTtcbiAgcmV0dXJuIGFpLmRlZmluZUJhY2tncm91bmRNb2RlbCh7XG4gICAgbmFtZTogcmVmLm5hbWUsXG4gICAgLi4ucmVmLmluZm8sXG4gICAgY29uZmlnU2NoZW1hOiByZWYuY29uZmlnU2NoZW1hLFxuICAgIGFzeW5jIHN0YXJ0KHJlcXVlc3QpIHtcbiAgICAgIGNvbnN0IGFwaUtleSA9ICgwLCBpbXBvcnRfdXRpbHMuY2FsY3VsYXRlQXBpS2V5KShwbHVnaW5PcHRpb25zPy5hcGlLZXksIHZvaWQgMCk7XG4gICAgICBjb25zdCB2ZW9QcmVkaWN0UmVxdWVzdCA9IHtcbiAgICAgICAgaW5zdGFuY2VzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgcHJvbXB0OiAoMCwgaW1wb3J0X3V0aWxzLmV4dHJhY3RUZXh0KShyZXF1ZXN0KSxcbiAgICAgICAgICAgIGltYWdlOiAoMCwgaW1wb3J0X3V0aWxzLmV4dHJhY3RWZW9JbWFnZSkocmVxdWVzdClcbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBhcmFtZXRlcnM6IHRvVmVvUGFyYW1ldGVycyhyZXF1ZXN0KVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIGltcG9ydF9jbGllbnQudmVvUHJlZGljdCkoXG4gICAgICAgIGFwaUtleSxcbiAgICAgICAgKDAsIGltcG9ydF91dGlscy5leHRyYWN0VmVyc2lvbikocmVmKSxcbiAgICAgICAgdmVvUHJlZGljdFJlcXVlc3QsXG4gICAgICAgIGNsaWVudE9wdGlvbnNcbiAgICAgICk7XG4gICAgICByZXR1cm4gZnJvbVZlb09wZXJhdGlvbihyZXNwb25zZSk7XG4gICAgfSxcbiAgICBhc3luYyBjaGVjayhvcGVyYXRpb24pIHtcbiAgICAgIGNvbnN0IGFwaUtleSA9ICgwLCBpbXBvcnRfdXRpbHMuY2FsY3VsYXRlQXBpS2V5KShwbHVnaW5PcHRpb25zPy5hcGlLZXksIHZvaWQgMCk7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCBpbXBvcnRfY2xpZW50LnZlb0NoZWNrT3BlcmF0aW9uKShcbiAgICAgICAgYXBpS2V5LFxuICAgICAgICBvcGVyYXRpb24uaWQsXG4gICAgICAgIGNsaWVudE9wdGlvbnNcbiAgICAgICk7XG4gICAgICByZXR1cm4gZnJvbVZlb09wZXJhdGlvbihyZXNwb25zZSk7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIHRvVmVvUGFyYW1ldGVycyhyZXF1ZXN0KSB7XG4gIGNvbnN0IG91dCA9IHtcbiAgICAuLi5yZXF1ZXN0Py5jb25maWdcbiAgfTtcbiAgZm9yIChjb25zdCBrIGluIG91dCkge1xuICAgIGlmIChvdXRba10gPT09IG51bGwpIGRlbGV0ZSBvdXRba107XG4gIH1cbiAgZGVsZXRlIG91dC5hcGlLZXk7XG4gIGRlbGV0ZSBvdXQudmVyc2lvbjtcbiAgcmV0dXJuIG91dDtcbn1cbmZ1bmN0aW9uIGZyb21WZW9PcGVyYXRpb24oYXBpT3ApIHtcbiAgY29uc3QgcmVzID0geyBpZDogYXBpT3AubmFtZSB9O1xuICBpZiAoYXBpT3AuZG9uZSAhPT0gdm9pZCAwKSB7XG4gICAgcmVzLmRvbmUgPSBhcGlPcC5kb25lO1xuICB9XG4gIGlmIChhcGlPcC5lcnJvcikge1xuICAgIHJlcy5lcnJvciA9IHsgbWVzc2FnZTogYXBpT3AuZXJyb3IubWVzc2FnZSB9O1xuICB9XG4gIGlmIChhcGlPcC5yZXNwb25zZSAmJiBhcGlPcC5yZXNwb25zZS5nZW5lcmF0ZVZpZGVvUmVzcG9uc2UgJiYgYXBpT3AucmVzcG9uc2UuZ2VuZXJhdGVWaWRlb1Jlc3BvbnNlLmdlbmVyYXRlZFNhbXBsZXMpIHtcbiAgICByZXMub3V0cHV0ID0ge1xuICAgICAgZmluaXNoUmVhc29uOiBcInN0b3BcIixcbiAgICAgIHJhdzogYXBpT3AucmVzcG9uc2UsXG4gICAgICBtZXNzYWdlOiB7XG4gICAgICAgIHJvbGU6IFwibW9kZWxcIixcbiAgICAgICAgY29udGVudDogYXBpT3AucmVzcG9uc2UuZ2VuZXJhdGVWaWRlb1Jlc3BvbnNlLmdlbmVyYXRlZFNhbXBsZXMubWFwKFxuICAgICAgICAgIChzKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBtZWRpYToge1xuICAgICAgICAgICAgICAgIHVybDogcy52aWRlby51cmlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHJldHVybiByZXM7XG59XG5jb25zdCBURVNUX09OTFkgPSB7XG4gIHRvVmVvUGFyYW1ldGVycyxcbiAgZnJvbVZlb09wZXJhdGlvbixcbiAgR0VORVJJQ19NT0RFTCxcbiAgS05PV05fTU9ERUxTXG59O1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIFRFU1RfT05MWSxcbiAgVmVvQ29uZmlnU2NoZW1hLFxuICBkZWZpbmVLbm93bk1vZGVscyxcbiAgZGVmaW5lTW9kZWwsXG4gIGlzVmVvTW9kZWxOYW1lLFxuICBsaXN0QWN0aW9ucyxcbiAgbW9kZWxcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVvLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/veo.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/client.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@genkit-ai/google-genai/lib/vertexai/client.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar client_exports = {};\n__export(client_exports, {\n  TEST_ONLY: () => TEST_ONLY,\n  embedContent: () => embedContent,\n  generateContent: () => generateContent,\n  generateContentStream: () => generateContentStream,\n  getVertexAIUrl: () => getVertexAIUrl,\n  imagenPredict: () => imagenPredict,\n  listModels: () => listModels,\n  lyriaPredict: () => lyriaPredict,\n  veoCheckOperation: () => veoCheckOperation,\n  veoPredict: () => veoPredict\n});\nmodule.exports = __toCommonJS(client_exports);\nvar import_utils = __webpack_require__(/*! ../common/utils.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/common/utils.js\");\nvar import_utils2 = __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/utils.js\");\nasync function listModels(clientOptions) {\n  const url = getVertexAIUrl({\n    includeProjectAndLocation: false,\n    resourcePath: \"publishers/google/models\",\n    clientOptions\n  });\n  const fetchOptions = await getFetchOptions({\n    method: \"GET\",\n    clientOptions\n  });\n  const response = await makeRequest(url, fetchOptions);\n  const modelResponse = await response.json();\n  return modelResponse.publisherModels;\n}\nasync function generateContent(model, generateContentRequest, clientOptions) {\n  let url;\n  if (model.includes(\"endpoints/\")) {\n    url = getVertexAIUrl({\n      includeProjectAndLocation: !model.startsWith(\"projects/\"),\n      resourcePath: model,\n      resourceMethod: \"generateContent\",\n      clientOptions\n    });\n  } else {\n    url = getVertexAIUrl({\n      includeProjectAndLocation: true,\n      resourcePath: `publishers/google/models/${model}`,\n      resourceMethod: \"generateContent\",\n      clientOptions\n    });\n  }\n  const fetchOptions = await getFetchOptions({\n    method: \"POST\",\n    clientOptions,\n    body: JSON.stringify(generateContentRequest)\n  });\n  const response = await makeRequest(url, fetchOptions);\n  const responseJson = await response.json();\n  return responseJson;\n}\nasync function generateContentStream(model, generateContentRequest, clientOptions) {\n  let url;\n  if (model.includes(\"endpoints/\")) {\n    url = getVertexAIUrl({\n      includeProjectAndLocation: !model.startsWith(\"projects/\"),\n      resourcePath: model,\n      resourceMethod: \"streamGenerateContent\",\n      clientOptions\n    });\n  } else {\n    url = getVertexAIUrl({\n      includeProjectAndLocation: true,\n      resourcePath: `publishers/google/models/${model}`,\n      resourceMethod: \"streamGenerateContent\",\n      clientOptions\n    });\n  }\n  const fetchOptions = await getFetchOptions({\n    method: \"POST\",\n    clientOptions,\n    body: JSON.stringify(generateContentRequest)\n  });\n  const response = await makeRequest(url, fetchOptions);\n  return (0, import_utils.processStream)(response);\n}\nasync function internalPredict(model, body, clientOptions) {\n  const url = getVertexAIUrl({\n    includeProjectAndLocation: true,\n    resourcePath: `publishers/google/models/${model}`,\n    resourceMethod: \"predict\",\n    clientOptions\n  });\n  const fetchOptions = await getFetchOptions({\n    method: \"POST\",\n    clientOptions,\n    body\n  });\n  return await makeRequest(url, fetchOptions);\n}\nasync function embedContent(model, embedContentRequest, clientOptions) {\n  const response = await internalPredict(\n    model,\n    JSON.stringify(embedContentRequest),\n    clientOptions\n  );\n  return response.json();\n}\nasync function imagenPredict(model, imagenPredictRequest, clientOptions) {\n  const response = await internalPredict(\n    model,\n    JSON.stringify(imagenPredictRequest),\n    clientOptions\n  );\n  return response.json();\n}\nasync function lyriaPredict(model, lyriaPredictRequest, clientOptions) {\n  const response = await internalPredict(\n    model,\n    JSON.stringify(lyriaPredictRequest),\n    clientOptions\n  );\n  return response.json();\n}\nasync function veoPredict(model, veoPredictRequest, clientOptions) {\n  const url = getVertexAIUrl({\n    includeProjectAndLocation: true,\n    resourcePath: `publishers/google/models/${model}`,\n    resourceMethod: \"predictLongRunning\",\n    clientOptions\n  });\n  const fetchOptions = await getFetchOptions({\n    method: \"POST\",\n    clientOptions,\n    body: JSON.stringify(veoPredictRequest)\n  });\n  const response = await makeRequest(url, fetchOptions);\n  return response.json();\n}\nasync function veoCheckOperation(model, veoOperationRequest, clientOptions) {\n  const url = getVertexAIUrl({\n    includeProjectAndLocation: true,\n    resourcePath: `publishers/google/models/${model}`,\n    resourceMethod: \"fetchPredictOperation\",\n    clientOptions\n  });\n  const fetchOptions = await getFetchOptions({\n    method: \"POST\",\n    clientOptions,\n    body: JSON.stringify(veoOperationRequest)\n  });\n  const response = await makeRequest(url, fetchOptions);\n  return response.json();\n}\nfunction getVertexAIUrl(params) {\n  (0, import_utils2.checkSupportedResourceMethod)(params);\n  const DEFAULT_API_VERSION = \"v1beta1\";\n  const API_BASE_PATH = \"aiplatform.googleapis.com\";\n  let basePath;\n  if (params.clientOptions.kind == \"regional\") {\n    basePath = `${params.clientOptions.location}-${API_BASE_PATH}`;\n  } else {\n    basePath = API_BASE_PATH;\n  }\n  let resourcePath = params.resourcePath;\n  if (params.clientOptions.kind != \"express\" && params.includeProjectAndLocation) {\n    const parent = `projects/${params.clientOptions.projectId}/locations/${params.clientOptions.location}`;\n    resourcePath = `${parent}/${params.resourcePath}`;\n  }\n  let url = `https://${basePath}/${DEFAULT_API_VERSION}/${resourcePath}`;\n  if (params.resourceMethod) {\n    url += `:${params.resourceMethod}`;\n  }\n  let joiner = \"?\";\n  if (params.queryParams) {\n    url += `${joiner}${params.queryParams}`;\n    joiner = \"&\";\n  }\n  if (params.resourceMethod === \"streamGenerateContent\") {\n    url += `${joiner}alt=sse`;\n    joiner = \"&\";\n  }\n  return url;\n}\nasync function getFetchOptions(params) {\n  const fetchOptions = {\n    method: params.method,\n    headers: await getHeaders(params.clientOptions)\n  };\n  if (params.body) {\n    fetchOptions.body = params.body;\n  }\n  const signal = getAbortSignal(params.clientOptions);\n  if (signal) {\n    fetchOptions.signal = signal;\n  }\n  return fetchOptions;\n}\nfunction getAbortSignal(clientOptions) {\n  const hasTimeout = (clientOptions.timeout ?? -1) >= 0;\n  if (clientOptions.signal !== void 0 || hasTimeout) {\n    const controller = new AbortController();\n    if (hasTimeout) {\n      setTimeout(() => controller.abort(), clientOptions.timeout);\n    }\n    if (clientOptions?.signal) {\n      clientOptions.signal.addEventListener(\"abort\", () => {\n        controller.abort();\n      });\n    }\n    return controller.signal;\n  }\n  return void 0;\n}\nasync function getHeaders(clientOptions) {\n  if (clientOptions.kind == \"express\") {\n    const headers = {\n      \"x-goog-api-key\": (0, import_utils2.calculateApiKey)(clientOptions.apiKey, void 0),\n      \"Content-Type\": \"application/json\",\n      \"X-Goog-Api-Client\": (0, import_utils.getGenkitClientHeader)(),\n      \"User-Agent\": (0, import_utils.getGenkitClientHeader)()\n    };\n    return headers;\n  } else {\n    const token = await getToken(clientOptions.authClient);\n    const headers = {\n      Authorization: `Bearer ${token}`,\n      \"x-goog-user-project\": clientOptions.projectId,\n      \"Content-Type\": \"application/json\",\n      \"X-Goog-Api-Client\": (0, import_utils.getGenkitClientHeader)(),\n      \"User-Agent\": (0, import_utils.getGenkitClientHeader)()\n    };\n    if (clientOptions.apiKey) {\n      headers[\"x-goog-api-key\"] = clientOptions.apiKey;\n    }\n    return headers;\n  }\n}\nasync function getToken(authClient) {\n  const CREDENTIAL_ERROR_MESSAGE = \"\\nUnable to authenticate your request        \\nDepending on your run time environment, you can get authentication by        \\n- if in local instance or cloud shell: `!gcloud auth login`        \\n- if in Colab:        \\n    -`from google.colab import auth`        \\n    -`auth.authenticate_user()`        \\n- if in service account or other: please follow guidance in https://cloud.google.com/docs/authentication\";\n  const token = await authClient.getAccessToken().catch((e) => {\n    throw new Error(CREDENTIAL_ERROR_MESSAGE, e);\n  });\n  if (!token) {\n    throw new Error(CREDENTIAL_ERROR_MESSAGE);\n  }\n  return token;\n}\nasync function makeRequest(url, fetchOptions) {\n  try {\n    const response = await fetch(url, fetchOptions);\n    if (!response.ok) {\n      let errorText = await response.text();\n      let errorMessage = errorText;\n      try {\n        const json = JSON.parse(errorText);\n        if (json.error && json.error.message) {\n          errorMessage = json.error.message;\n        }\n      } catch (e) {\n      }\n      throw new Error(\n        `Error fetching from ${url}: [${response.status} ${response.statusText}] ${errorMessage}`\n      );\n    }\n    return response;\n  } catch (e) {\n    console.error(e);\n    throw new Error(`Failed to fetch from ${url}: ${(0, import_utils.extractErrMsg)(e)}`);\n  }\n}\nconst TEST_ONLY = {\n  getFetchOptions,\n  getAbortSignal,\n  getHeaders,\n  makeRequest\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/client.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/converters.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@genkit-ai/google-genai/lib/vertexai/converters.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar converters_exports = {};\n__export(converters_exports, {\n  fromImagenResponse: () => fromImagenResponse,\n  fromLyriaResponse: () => fromLyriaResponse,\n  fromVeoOperation: () => fromVeoOperation,\n  toGeminiLabels: () => toGeminiLabels,\n  toGeminiSafetySettings: () => toGeminiSafetySettings,\n  toImagenPredictRequest: () => toImagenPredictRequest,\n  toLyriaPredictRequest: () => toLyriaPredictRequest,\n  toVeoMedia: () => toVeoMedia,\n  toVeoModel: () => toVeoModel,\n  toVeoOperationRequest: () => toVeoOperationRequest,\n  toVeoPredictRequest: () => toVeoPredictRequest\n});\nmodule.exports = __toCommonJS(converters_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_model = __webpack_require__(/*! genkit/model */ \"(action-browser)/./node_modules/genkit/lib/model.js\");\nvar import_utils = __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/utils.js\");\nfunction toGeminiSafetySettings(genkitSettings) {\n  if (!genkitSettings) return void 0;\n  return genkitSettings.map((s) => {\n    return {\n      category: s.category,\n      threshold: s.threshold\n    };\n  });\n}\nfunction toGeminiLabels(labels) {\n  if (!labels) {\n    return void 0;\n  }\n  const keys = Object.keys(labels);\n  const newLabels = {};\n  for (const key of keys) {\n    const value = labels[key];\n    if (!key) {\n      continue;\n    }\n    newLabels[key] = value;\n  }\n  if (Object.keys(newLabels).length == 0) {\n    return void 0;\n  }\n  return newLabels;\n}\nfunction toImagenPredictRequest(request) {\n  return {\n    instances: toImagenInstances(request),\n    parameters: toImagenParameters(request)\n  };\n}\nfunction toImagenInstances(request) {\n  let instance = {\n    prompt: (0, import_utils.extractText)(request)\n  };\n  const imageMedia = (0, import_utils.extractMedia)(request, {\n    metadataType: \"image\",\n    isDefault: true\n  });\n  if (imageMedia) {\n    const image = imageMedia.url.split(\",\")[1];\n    instance.image = {\n      bytesBase64Encoded: image\n    };\n  }\n  const maskMedia = (0, import_utils.extractMedia)(request, { metadataType: \"mask\" });\n  if (maskMedia) {\n    const mask = maskMedia.url.split(\",\")[1];\n    instance.mask = {\n      image: {\n        bytesBase64Encoded: mask\n      }\n    };\n  }\n  return [instance];\n}\nfunction toImagenParameters(request) {\n  const params = {\n    sampleCount: request.candidates ?? 1,\n    ...request?.config\n  };\n  for (const k in params) {\n    if (!params[k]) delete params[k];\n  }\n  return params;\n}\nfunction fromImagenPrediction(p, i) {\n  const b64data = p.bytesBase64Encoded;\n  const mimeType = p.mimeType;\n  return {\n    index: i,\n    finishReason: \"stop\",\n    message: {\n      role: \"model\",\n      content: [\n        {\n          media: {\n            url: `data:${mimeType};base64,${b64data}`,\n            contentType: mimeType\n          }\n        }\n      ]\n    }\n  };\n}\nfunction fromImagenResponse(response, request) {\n  const candidates = response.predictions.map(fromImagenPrediction);\n  return {\n    candidates,\n    usage: {\n      ...(0, import_model.getBasicUsageStats)(request.messages, candidates),\n      custom: { generations: candidates.length }\n    },\n    custom: response\n  };\n}\nfunction toLyriaPredictRequest(request) {\n  return {\n    instances: toLyriaInstances(request),\n    parameters: toLyriaParameters(request)\n  };\n}\nfunction toLyriaInstances(request) {\n  let config = { ...request.config };\n  delete config.sampleCount;\n  return [\n    {\n      prompt: (0, import_utils.extractText)(request),\n      ...config\n    }\n  ];\n}\nfunction toLyriaParameters(request) {\n  return {\n    sampleCount: request.config?.sampleCount || 1\n  };\n}\nfunction fromLyriaPrediction(p, i) {\n  const b64data = p.bytesBase64Encoded;\n  const mimeType = p.mimeType;\n  return {\n    index: i,\n    finishReason: \"stop\",\n    message: {\n      role: \"model\",\n      content: [\n        {\n          media: {\n            url: `data:${mimeType};base64,${b64data}`,\n            contentType: mimeType\n          }\n        }\n      ]\n    }\n  };\n}\nfunction fromLyriaResponse(response, request) {\n  const candidates = response.predictions.map(fromLyriaPrediction);\n  return {\n    candidates,\n    usage: {\n      ...(0, import_model.getBasicUsageStats)(request.messages, candidates),\n      custom: { generations: candidates.length }\n    },\n    custom: response\n  };\n}\nfunction toVeoPredictRequest(request) {\n  return {\n    instances: toVeoInstances(request),\n    parameters: { ...request.config }\n  };\n}\nfunction toVeoInstances(request) {\n  let instance = {\n    prompt: (0, import_utils.extractText)(request)\n  };\n  const supportedImageTypes = [\"image/jpeg\", \"image/png\"];\n  const supportedVideoTypes = [\"video/mp4\"];\n  const imageMedia = (0, import_utils.extractMedia)(request, { metadataType: \"image\" });\n  if (imageMedia) {\n    (0, import_utils.checkSupportedMimeType)(imageMedia, supportedImageTypes);\n    instance.image = toVeoMedia(imageMedia);\n  }\n  const lastFrameMedia = (0, import_utils.extractMedia)(request, { metadataType: \"lastFrame\" });\n  if (lastFrameMedia) {\n    (0, import_utils.checkSupportedMimeType)(lastFrameMedia, supportedImageTypes);\n    instance.lastFrame = toVeoMedia(lastFrameMedia);\n  }\n  const videoMedia = (0, import_utils.extractMedia)(request, { metadataType: \"video\" });\n  if (videoMedia) {\n    (0, import_utils.checkSupportedMimeType)(videoMedia, supportedVideoTypes);\n    instance.video = toVeoMedia(videoMedia);\n  }\n  return [instance];\n}\nfunction toVeoMedia(media) {\n  let mimeType = media.contentType;\n  if (!mimeType) {\n    mimeType = (0, import_utils.extractMimeType)(media.url);\n    if (!mimeType) {\n      throw new import_genkit.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: \"Content type is required.\"\n      });\n    }\n  }\n  if (media.url.startsWith(\"data:\")) {\n    return {\n      bytesBase64Encoded: media.url?.split(\",\")[1],\n      mimeType\n    };\n  } else if (media.url.startsWith(\"gs://\")) {\n    return {\n      gcsUri: media.url,\n      mimeType\n    };\n  } else if (media.url.startsWith(\"http\")) {\n    throw new import_genkit.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: \"Veo does not support http(s) URIs. Please specify a Cloud Storage URI.\"\n    });\n  } else {\n    return {\n      bytesBase64Encoded: media.url,\n      mimeType\n    };\n  }\n}\nfunction fromVeoOperation(fromOp) {\n  const toOp = { id: fromOp.name };\n  if (fromOp.done !== void 0) {\n    toOp.done = fromOp.done;\n  }\n  if (fromOp.error) {\n    toOp.error = { message: fromOp.error.message };\n  }\n  if (fromOp.response) {\n    toOp.output = {\n      finishReason: \"stop\",\n      raw: fromOp.response,\n      message: {\n        role: \"model\",\n        content: fromOp.response.videos.map((veoMedia) => {\n          if (veoMedia.bytesBase64Encoded) {\n            return {\n              media: {\n                url: `data:${veoMedia.mimeType}:base64,${veoMedia.bytesBase64Encoded}`,\n                contentType: veoMedia.mimeType\n              }\n            };\n          }\n          return {\n            media: {\n              url: veoMedia.gcsUri ?? \"\",\n              contentType: veoMedia.mimeType\n            }\n          };\n        })\n      }\n    };\n  }\n  return toOp;\n}\nfunction toVeoModel(op) {\n  return op.id.substring(\n    op.id.indexOf(\"models/\") + 7,\n    op.id.indexOf(\"/operations/\")\n  );\n}\nfunction toVeoOperationRequest(op) {\n  return {\n    operationName: op.id\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=converters.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/converters.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/embedder.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@genkit-ai/google-genai/lib/vertexai/embedder.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar embedder_exports = {};\n__export(embedder_exports, {\n  EmbeddingConfigSchema: () => EmbeddingConfigSchema,\n  KNOWN_MODELS: () => KNOWN_MODELS,\n  TEST_ONLY: () => TEST_ONLY,\n  defineEmbedder: () => defineEmbedder,\n  defineKnownModels: () => defineKnownModels,\n  model: () => model\n});\nmodule.exports = __toCommonJS(embedder_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_embedder = __webpack_require__(/*! genkit/embedder */ \"(action-browser)/./node_modules/genkit/lib/embedder.js\");\nvar import_client = __webpack_require__(/*! ./client.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/client.js\");\nvar import_types = __webpack_require__(/*! ./types.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/types.js\");\nvar import_utils = __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/utils.js\");\nconst EmbeddingConfigSchema = import_genkit.z.object({\n  /**\n   * The `task_type` parameter is defined as the intended downstream application\n   * to help the model produce better quality embeddings.\n   **/\n  taskType: import_types.TaskTypeSchema.optional(),\n  title: import_genkit.z.string().optional(),\n  location: import_genkit.z.string().optional(),\n  version: import_genkit.z.string().optional(),\n  /**\n   * The `outputDimensionality` parameter allows you to specify the dimensionality of the embedding output.\n   * By default, the model generates embeddings with 768 dimensions.\n   * By selecting a smaller output dimensionality, users can save memory and storage space, leading to more efficient computations.\n   **/\n  outputDimensionality: import_genkit.z.number().min(1).optional(),\n  /**\n   * For newly released embedders this parameter provides a hint for the proper\n   * way to call the embedder. (Multimodal embedders have a different request\n   * structure than non-multimodal embedders).\n   * For well-known embedders, this value will be ignored since we will already\n   * know if it's multimodal or not.\n   */\n  multimodal: import_genkit.z.boolean().optional()\n}).passthrough();\nfunction commonRef(name, info, configSchema = EmbeddingConfigSchema) {\n  return (0, import_embedder.embedderRef)({\n    name: `vertexai/${name}`,\n    configSchema,\n    info: info ?? {\n      dimensions: 768,\n      supports: {\n        input: [\"text\"]\n      }\n    }\n  });\n}\nconst GENERIC_TEXT_MODEL = commonRef(\"text\", {\n  dimensions: 3072,\n  supports: { input: [\"text\"] }\n});\nconst GENERIC_MULTIMODAL_MODEL = commonRef(\"multimodal\", {\n  dimensions: 768,\n  supports: { input: [\"text\", \"image\", \"video\"] }\n});\nconst KNOWN_MODELS = {\n  \"text-embedding-005\": commonRef(\"text-embedding-005\"),\n  \"text-multilingual-embedding-002\": commonRef(\n    \"text-multilingual-embedding-002\"\n  ),\n  \"multimodalembedding@001\": commonRef(\"multimodalembedding@001\", {\n    dimensions: 768,\n    supports: { input: [\"text\", \"image\", \"video\"] }\n  }),\n  \"gemini-embedding-001\": commonRef(\"gemini-embedding-001\", {\n    dimensions: 3072,\n    supports: { input: [\"text\"] }\n  })\n};\nfunction model(version, config = {}) {\n  const name = (0, import_utils.checkModelName)(version);\n  if (KNOWN_MODELS[name]) {\n    return (0, import_embedder.embedderRef)({\n      name: `vertexai/${name}`,\n      configSchema: EmbeddingConfigSchema,\n      config,\n      info: {\n        ...KNOWN_MODELS[name].info\n      }\n    });\n  }\n  if (config.multimodal) {\n    return (0, import_embedder.embedderRef)({\n      name: `vertexai/${name}`,\n      configSchema: EmbeddingConfigSchema,\n      config,\n      info: {\n        ...GENERIC_MULTIMODAL_MODEL.info\n      }\n    });\n  }\n  return (0, import_embedder.embedderRef)({\n    name: `vertexai/${name}`,\n    configSchema: EmbeddingConfigSchema,\n    config,\n    info: {\n      ...GENERIC_TEXT_MODEL.info\n    }\n  });\n}\nfunction defineKnownModels(ai, clientOptions, pluginOptions) {\n  for (const name of Object.keys(KNOWN_MODELS)) {\n    defineEmbedder(ai, name, clientOptions, pluginOptions);\n  }\n}\nfunction defineEmbedder(ai, name, clientOptions, pluginOptions) {\n  const ref = model(name);\n  return ai.defineEmbedder(\n    {\n      name: ref.name,\n      configSchema: ref.configSchema,\n      info: ref.info\n    },\n    async (input, options) => {\n      const embedContentRequest = {\n        instances: input.map(\n          (doc) => toEmbeddingInstance(ref, doc, options)\n        ),\n        parameters: { outputDimensionality: options?.outputDimensionality }\n      };\n      const response = await (0, import_client.embedContent)(\n        (0, import_utils.extractVersion)(ref),\n        embedContentRequest,\n        clientOptions\n      );\n      return {\n        embeddings: response.predictions.map(toEmbeddingResult).reduce((accumulator, value) => {\n          return accumulator.concat(value);\n        }, [])\n      };\n    }\n  );\n}\nfunction toEmbeddingInstance(embedder, doc, options) {\n  let instance;\n  if (isMultiModalEmbedder(embedder) || embedder.config?.multimodal || options?.multimodal) {\n    instance = {};\n    if (doc.text) {\n      instance.text = doc.text;\n    }\n    for (var media of doc.media) {\n      if ((0, import_types.isObject)(media) && typeof media.url === \"string\" && typeof media.contentType === \"string\") {\n        if (media.contentType?.startsWith(\"image/\")) {\n          if (media.url.startsWith(\"http\") || media.url.startsWith(\"gs://\")) {\n            instance.image = {\n              gcsUri: media.url,\n              mimeType: media.contentType\n            };\n          } else {\n            instance.image = {\n              bytesBase64Encoded: media.url,\n              mimeType: media.contentType\n            };\n          }\n        } else if (media.contentType.startsWith(\"video/\")) {\n          if (media.url.startsWith(\"http\") || media.url.startsWith(\"gs://\")) {\n            instance.video = {\n              gcsUri: media.url\n            };\n          } else {\n            instance.video = {\n              bytesBase64Encoded: media.url\n            };\n          }\n          if (instance.video && doc.metadata && doc.metadata.videoSegmentConfig) {\n            instance.video.videoSegmentConfig = doc.metadata.videoSegmentConfig;\n          }\n        } else {\n          throw new Error(`Unsupported contentType: '${media.contentType}`);\n        }\n      } else {\n        throw new Error(\"Invalid media specified.\");\n      }\n    }\n  } else {\n    instance = {\n      content: doc.text,\n      task_type: options?.taskType,\n      title: options?.title\n    };\n  }\n  return instance;\n}\nfunction toEmbeddingResult(prediction) {\n  if ((0, import_types.isMultimodalEmbeddingPrediction)(prediction)) {\n    const eArray = [];\n    if (prediction.imageEmbedding?.length) {\n      const imageResult = {\n        embedding: prediction.imageEmbedding,\n        metadata: { embedType: \"imageEmbedding\" }\n      };\n      eArray.push(imageResult);\n    }\n    if (prediction.textEmbedding?.length) {\n      const textResult = {\n        embedding: prediction.textEmbedding,\n        metadata: { embedType: \"textEmbedding\" }\n      };\n      eArray.push(textResult);\n    }\n    if (prediction.videoEmbeddings?.length) {\n      for (const ve of prediction.videoEmbeddings) {\n        if (ve.embedding?.length) {\n          const { embedding, ...metadata } = ve;\n          metadata.embedType = \"videoEmbedding\";\n          const videoResult = {\n            embedding,\n            metadata\n          };\n          eArray.push(videoResult);\n        }\n      }\n    }\n    return eArray;\n  } else {\n    return [\n      {\n        embedding: prediction.embeddings.values\n      }\n    ];\n  }\n}\nfunction isMultiModalEmbedder(embedder) {\n  if (embedder.config?.multimodal) {\n    return true;\n  }\n  const input = embedder.info?.supports?.input || \"\";\n  return input.includes(\"text\") && input.includes(\"image\") || false;\n}\nconst TEST_ONLY = { KNOWN_MODELS };\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=embedder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/embedder.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/gemini.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@genkit-ai/google-genai/lib/vertexai/gemini.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar gemini_exports = {};\n__export(gemini_exports, {\n  GENERIC_MODEL: () => GENERIC_MODEL,\n  GeminiConfigSchema: () => GeminiConfigSchema,\n  KNOWN_MODELS: () => KNOWN_MODELS,\n  SafetySettingsSchema: () => SafetySettingsSchema,\n  TEST_ONLY: () => TEST_ONLY,\n  defineKnownModels: () => defineKnownModels,\n  defineModel: () => defineModel,\n  isGeminiModelName: () => isGeminiModelName,\n  listActions: () => listActions,\n  model: () => model\n});\nmodule.exports = __toCommonJS(gemini_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_model = __webpack_require__(/*! genkit/model */ \"(action-browser)/./node_modules/genkit/lib/model.js\");\nvar import_middleware = __webpack_require__(/*! genkit/model/middleware */ \"(action-browser)/./node_modules/genkit/lib/middleware.js\");\nvar import_tracing = __webpack_require__(/*! genkit/tracing */ \"(action-browser)/./node_modules/genkit/lib/tracing.js\");\nvar import_converters = __webpack_require__(/*! ../common/converters.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/common/converters.js\");\nvar import_client = __webpack_require__(/*! ./client.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/client.js\");\nvar import_converters2 = __webpack_require__(/*! ./converters.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/converters.js\");\nvar import_utils = __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/utils.js\");\nconst SafetySettingsSchema = import_genkit.z.object({\n  category: import_genkit.z.enum([\n    /** The harm category is unspecified. */\n    \"HARM_CATEGORY_UNSPECIFIED\",\n    /** The harm category is hate speech. */\n    \"HARM_CATEGORY_HATE_SPEECH\",\n    /** The harm category is dangerous content. */\n    \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n    /** The harm category is harassment. */\n    \"HARM_CATEGORY_HARASSMENT\",\n    /** The harm category is sexually explicit content. */\n    \"HARM_CATEGORY_SEXUALLY_EXPLICIT\"\n  ]),\n  threshold: import_genkit.z.enum([\n    \"BLOCK_LOW_AND_ABOVE\",\n    \"BLOCK_MEDIUM_AND_ABOVE\",\n    \"BLOCK_ONLY_HIGH\",\n    \"BLOCK_NONE\"\n  ])\n});\nconst VertexRetrievalSchema = import_genkit.z.object({\n  datastore: import_genkit.z.object({\n    projectId: import_genkit.z.string().describe(\"Google Cloud Project ID.\").optional(),\n    location: import_genkit.z.string().describe(\"Google Cloud region e.g. us-central1.\").optional(),\n    dataStoreId: import_genkit.z.string().describe(\n      'The data store id, when project id and location are provided as separate options. Alternatively, the full path to the data store should be provided in the form: \"projects/{project}/locations/{location}/collections/default_collection/dataStores/{data_store}\".'\n    )\n  }).describe(\"Vertex AI Search data store details\"),\n  disableAttribution: import_genkit.z.boolean().describe(\n    \"Disable using the search data in detecting grounding attribution. This does not affect how the result is given to the model for generation.\"\n  ).optional()\n});\nconst GoogleSearchRetrievalSchema = import_genkit.z.object({\n  disableAttribution: import_genkit.z.boolean().describe(\n    \"Disable using the search data in detecting grounding attribution. This does not affect how the result is given to the model for generation.\"\n  ).optional()\n});\nconst GeminiConfigSchema = import_model.GenerationCommonConfigSchema.extend({\n  apiKey: import_genkit.z.string().describe(\"Overrides the plugin-configured API key, if specified.\").optional(),\n  labels: import_genkit.z.record(import_genkit.z.string()).optional().describe(\"Key-value labels to attach to the request for cost tracking.\"),\n  temperature: import_genkit.z.number().min(0).max(2).describe(\n    import_model.GenerationCommonConfigDescriptions.temperature + \" The default value is 1.0.\"\n  ).optional(),\n  topP: import_genkit.z.number().min(0).max(1).describe(\n    import_model.GenerationCommonConfigDescriptions.topP + \" The default value is 0.95.\"\n  ).optional(),\n  location: import_genkit.z.string().describe(\"Google Cloud region e.g. us-central1.\").optional(),\n  /**\n   * Safety filter settings. See: https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/configure-safety-filters#configurable-filters\n   *\n   * E.g.\n   *\n   * ```js\n   * config: {\n   *   safetySettings: [\n   *     {\n   *       category: 'HARM_CATEGORY_HATE_SPEECH',\n   *       threshold: 'BLOCK_LOW_AND_ABOVE',\n   *     },\n   *     {\n   *       category: 'HARM_CATEGORY_DANGEROUS_CONTENT',\n   *       threshold: 'BLOCK_MEDIUM_AND_ABOVE',\n   *     },\n   *     {\n   *       category: 'HARM_CATEGORY_HARASSMENT',\n   *       threshold: 'BLOCK_ONLY_HIGH',\n   *     },\n   *     {\n   *       category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',\n   *       threshold: 'BLOCK_NONE',\n   *     },\n   *   ],\n   * }\n   * ```\n   */\n  safetySettings: import_genkit.z.array(SafetySettingsSchema).describe(\n    \"Adjust how likely you are to see responses that could be harmful. Content is blocked based on the probability that it is harmful.\"\n  ).optional(),\n  /**\n   * Vertex retrieval options.\n   *\n   * E.g.\n   *\n   * ```js\n   *   config: {\n   *     vertexRetrieval: {\n   *       datastore: {\n   *         projectId: 'your-cloud-project',\n   *         location: 'us-central1',\n   *         collection: 'your-collection',\n   *       },\n   *       disableAttribution: true,\n   *     }\n   *   }\n   * ```\n   */\n  vertexRetrieval: VertexRetrievalSchema.describe(\n    \"Retrieve from Vertex AI Search data store for grounding generative responses.\"\n  ).optional(),\n  /**\n   * Google Search retrieval options.\n   *\n   * ```js\n   *   config: {\n   *     googleSearchRetrieval: {\n   *       disableAttribution: true,\n   *     }\n   *   }\n   * ```\n   */\n  googleSearchRetrieval: GoogleSearchRetrievalSchema.describe(\n    \"Retrieve public web data for grounding, powered by Google Search.\"\n  ).optional(),\n  /**\n   * Function calling options.\n   *\n   * E.g. forced tool call:\n   *\n   * ```js\n   *   config: {\n   *     functionCallingConfig: {\n   *       mode: 'ANY',\n   *     }\n   *   }\n   * ```\n   */\n  functionCallingConfig: import_genkit.z.object({\n    mode: import_genkit.z.enum([\"MODE_UNSPECIFIED\", \"AUTO\", \"ANY\", \"NONE\"]).optional(),\n    allowedFunctionNames: import_genkit.z.array(import_genkit.z.string()).optional()\n  }).describe(\n    \"Controls how the model uses the provided tools (function declarations). With AUTO (Default) mode, the model decides whether to generate a natural language response or suggest a function call based on the prompt and context. With ANY, the model is constrained to always predict a function call and guarantee function schema adherence. With NONE, the model is prohibited from making function calls.\"\n  ).optional(),\n  thinkingConfig: import_genkit.z.object({\n    includeThoughts: import_genkit.z.boolean().describe(\n      \"Indicates whether to include thoughts in the response.If true, thoughts are returned only if the model supports thought and thoughts are available.\"\n    ).optional(),\n    thinkingBudget: import_genkit.z.number().min(0).max(24576).describe(\n      \"Indicates the thinking budget in tokens. 0 is DISABLED. -1 is AUTOMATIC. The default values and allowed ranges are model dependent. The thinking budget parameter gives the model guidance on the number of thinking tokens it can use when generating a response. A greater number of tokens is typically associated with more detailed thinking, which is needed for solving more complex tasks. \"\n    ).optional()\n  }).optional()\n}).passthrough();\nfunction commonRef(name, info, configSchema = GeminiConfigSchema) {\n  return (0, import_model.modelRef)({\n    name: `vertexai/${name}`,\n    configSchema,\n    info: info ?? {\n      supports: {\n        multiturn: true,\n        media: true,\n        tools: true,\n        toolChoice: true,\n        systemRole: true,\n        constrained: \"no-tools\"\n      }\n    }\n  });\n}\nconst GENERIC_MODEL = commonRef(\"gemini\");\nconst KNOWN_MODELS = {\n  \"gemini-2.5-flash-lite\": commonRef(\"gemini-2.5-flash-lite\"),\n  \"gemini-2.5-pro\": commonRef(\"gemini-2.5-pro\"),\n  \"gemini-2.5-flash\": commonRef(\"gemini-2.5-flash\"),\n  \"gemini-2.0-flash-001\": commonRef(\"gemini-2.0-flash-001\"),\n  \"gemini-2.0-flash\": commonRef(\"gemini-2.0-flash\"),\n  \"gemini-2.0-flash-lite\": commonRef(\"gemini-2.0-flash-lite\"),\n  \"gemini-2.0-flash-lite-001\": commonRef(\"gemini-2.0-flash-lite-001\")\n};\nfunction isGeminiModelName(value) {\n  return !!value?.startsWith(\"gemini-\") && !value.includes(\"embedding\");\n}\nfunction model(version, options = {}) {\n  const name = (0, import_utils.checkModelName)(version);\n  return (0, import_model.modelRef)({\n    name: `vertexai/${name}`,\n    config: options,\n    configSchema: GeminiConfigSchema,\n    info: {\n      ...GENERIC_MODEL.info\n    }\n  });\n}\nfunction listActions(models) {\n  const KNOWN_DECOMISSIONED_MODELS = [\n    \"gemini-pro-vision\",\n    \"gemini-pro\",\n    \"gemini-ultra\",\n    \"gemini-ultra-vision\"\n  ];\n  return models.filter(\n    (m) => isGeminiModelName((0, import_utils.modelName)(m.name)) && !KNOWN_DECOMISSIONED_MODELS.includes((0, import_utils.modelName)(m.name) || \"\")\n  ).map((m) => {\n    const ref = model(m.name);\n    return (0, import_genkit.modelActionMetadata)({\n      name: ref.name,\n      info: ref.info,\n      configSchema: ref.configSchema\n    });\n  });\n}\nfunction defineKnownModels(ai, clientOptions, pluginOptions) {\n  for (const name of Object.keys(KNOWN_MODELS)) {\n    defineModel(ai, name, clientOptions, pluginOptions);\n  }\n}\nfunction defineModel(ai, name, clientOptions, pluginOptions) {\n  const ref = model(name);\n  const middlewares = [];\n  if (ref.info?.supports?.media) {\n    middlewares.push(\n      (0, import_middleware.downloadRequestMedia)({\n        maxBytes: 1024 * 1024 * 20,\n        filter: (part) => {\n          try {\n            const url = new URL(part.media.url);\n            if (\n              // Gemini can handle these URLs\n              [\"www.youtube.com\", \"youtube.com\", \"youtu.be\"].includes(\n                url.hostname\n              )\n            )\n              return false;\n          } catch {\n          }\n          return true;\n        }\n      })\n    );\n  }\n  return ai.defineModel(\n    {\n      apiVersion: \"v2\",\n      name: ref.name,\n      ...ref.info,\n      configSchema: ref.configSchema,\n      use: middlewares\n    },\n    async (request, { streamingRequested, sendChunk, abortSignal }) => {\n      let clientOpt = { ...clientOptions, signal: abortSignal };\n      const messages = structuredClone(request.messages);\n      if (messages.length === 0) throw new Error(\"No messages provided.\");\n      let systemInstruction = void 0;\n      const systemMessage = messages.find((m) => m.role === \"system\");\n      if (systemMessage) {\n        messages.splice(messages.indexOf(systemMessage), 1);\n        systemInstruction = (0, import_converters.toGeminiSystemInstruction)(systemMessage);\n      }\n      const requestConfig = { ...request.config };\n      const {\n        apiKey: apiKeyFromConfig,\n        functionCallingConfig,\n        version: versionFromConfig,\n        googleSearchRetrieval,\n        tools: toolsFromConfig,\n        vertexRetrieval,\n        location,\n        safetySettings,\n        labels: labelsFromConfig,\n        ...restOfConfig\n      } = requestConfig;\n      if (location && clientOptions.kind != \"express\" && clientOptions.location != location) {\n        if (location == \"global\") {\n          clientOpt = {\n            kind: \"global\",\n            location: \"global\",\n            projectId: clientOptions.projectId,\n            authClient: clientOptions.authClient,\n            apiKey: clientOptions.apiKey,\n            signal: abortSignal\n          };\n        } else {\n          clientOpt = {\n            kind: \"regional\",\n            location,\n            projectId: clientOptions.projectId,\n            authClient: clientOptions.authClient,\n            apiKey: clientOptions.apiKey,\n            signal: abortSignal\n          };\n        }\n      }\n      if (clientOptions.kind == \"express\") {\n        clientOpt.apiKey = (0, import_utils.calculateApiKey)(\n          clientOptions.apiKey,\n          apiKeyFromConfig\n        );\n      } else if (apiKeyFromConfig) {\n        clientOpt.apiKey = apiKeyFromConfig;\n      }\n      const labels = (0, import_converters2.toGeminiLabels)(labelsFromConfig);\n      const tools = [];\n      if (request.tools?.length) {\n        tools.push({\n          functionDeclarations: request.tools.map(import_converters.toGeminiTool)\n        });\n      }\n      let toolConfig;\n      if (functionCallingConfig) {\n        toolConfig = {\n          functionCallingConfig: {\n            allowedFunctionNames: functionCallingConfig.allowedFunctionNames,\n            mode: (0, import_converters.toGeminiFunctionModeEnum)(functionCallingConfig.mode)\n          }\n        };\n      } else if (request.toolChoice) {\n        toolConfig = {\n          functionCallingConfig: {\n            mode: (0, import_converters.toGeminiFunctionModeEnum)(request.toolChoice)\n          }\n        };\n      }\n      const jsonMode = (request.output?.format === \"json\" || !!request.output?.schema) && tools.length === 0;\n      if (toolsFromConfig) {\n        tools.push(...toolsFromConfig);\n      }\n      if (googleSearchRetrieval) {\n        if (ref.name.startsWith(\"vertexai/gemini-1.5\")) {\n          tools.push({\n            googleSearchRetrieval\n          });\n        } else {\n          tools.push({\n            googleSearch: googleSearchRetrieval\n          });\n        }\n      }\n      if (vertexRetrieval) {\n        const _projectId = vertexRetrieval.datastore.projectId || (clientOptions.kind != \"express\" ? clientOptions.projectId : void 0);\n        const _location = vertexRetrieval.datastore.location || (clientOptions.kind == \"regional\" ? clientOptions.location : void 0);\n        const _dataStoreId = vertexRetrieval.datastore.dataStoreId;\n        if (!_projectId || !_location || !_dataStoreId) {\n          throw new import_genkit.GenkitError({\n            status: \"INVALID_ARGUMENT\",\n            message: \"projectId, location and datastoreId are required for vertexRetrieval and could not be determined from configuration\"\n          });\n        }\n        const datastore = `projects/${_projectId}/locations/${_location}/collections/default_collection/dataStores/${_dataStoreId}`;\n        tools.push({\n          retrieval: {\n            vertexAiSearch: {\n              datastore\n            },\n            disableAttribution: vertexRetrieval.disableAttribution\n          }\n        });\n      }\n      const generateContentRequest = {\n        systemInstruction,\n        generationConfig: {\n          ...restOfConfig,\n          candidateCount: request.candidates || void 0,\n          responseMimeType: jsonMode ? \"application/json\" : void 0\n        },\n        tools,\n        toolConfig,\n        safetySettings: (0, import_converters2.toGeminiSafetySettings)(safetySettings),\n        contents: messages.map((message) => (0, import_converters.toGeminiMessage)(message, ref)),\n        labels\n      };\n      const modelVersion = versionFromConfig || (0, import_utils.extractVersion)(ref);\n      if (jsonMode && request.output?.constrained) {\n        generateContentRequest.generationConfig.responseSchema = (0, import_utils.cleanSchema)(\n          request.output.schema\n        );\n      }\n      const callGemini = async () => {\n        let response;\n        if (streamingRequested) {\n          const result = await (0, import_client.generateContentStream)(\n            modelVersion,\n            generateContentRequest,\n            clientOpt\n          );\n          for await (const item of result.stream) {\n            item.candidates?.forEach(\n              (candidate) => {\n                const c = (0, import_converters.fromGeminiCandidate)(candidate);\n                sendChunk({\n                  index: c.index,\n                  content: c.message.content\n                });\n              }\n            );\n          }\n          response = await result.response;\n        } else {\n          response = await (0, import_client.generateContent)(\n            modelVersion,\n            generateContentRequest,\n            clientOpt\n          );\n        }\n        if (!response.candidates?.length) {\n          throw new import_genkit.GenkitError({\n            status: \"FAILED_PRECONDITION\",\n            message: \"No valid candidates returned.\"\n          });\n        }\n        const candidateData = response.candidates.map(\n          (c) => (0, import_converters.fromGeminiCandidate)(c)\n        );\n        return {\n          candidates: candidateData,\n          custom: response,\n          usage: {\n            ...(0, import_model.getBasicUsageStats)(request.messages, candidateData),\n            inputTokens: response.usageMetadata?.promptTokenCount,\n            outputTokens: response.usageMetadata?.candidatesTokenCount,\n            thoughtsTokens: response.usageMetadata?.thoughtsTokenCount,\n            totalTokens: response.usageMetadata?.totalTokenCount,\n            cachedContentTokens: response.usageMetadata?.cachedContentTokenCount\n          }\n        };\n      };\n      const msg = (0, import_converters.toGeminiMessage)(messages[messages.length - 1], ref);\n      return pluginOptions?.experimental_debugTraces ? await (0, import_tracing.runInNewSpan)(\n        ai.registry,\n        {\n          metadata: {\n            name: streamingRequested ? \"sendMessageStream\" : \"sendMessage\"\n          }\n        },\n        async (metadata) => {\n          metadata.input = {\n            apiEndpoint: (0, import_client.getVertexAIUrl)({\n              includeProjectAndLocation: false,\n              resourcePath: \"\",\n              clientOptions: clientOpt\n            }),\n            cache: {},\n            model: modelVersion,\n            generateContentOptions: generateContentRequest,\n            parts: msg.parts,\n            options: clientOpt\n          };\n          const response = await callGemini();\n          metadata.output = response.custom;\n          return response;\n        }\n      ) : await callGemini();\n    }\n  );\n}\nconst TEST_ONLY = { KNOWN_MODELS };\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=gemini.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/gemini.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/imagen.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@genkit-ai/google-genai/lib/vertexai/imagen.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar imagen_exports = {};\n__export(imagen_exports, {\n  ImagenConfigSchema: () => ImagenConfigSchema,\n  KNOWN_MODELS: () => KNOWN_MODELS,\n  TEST_ONLY: () => TEST_ONLY,\n  defineKnownModels: () => defineKnownModels,\n  defineModel: () => defineModel,\n  isImagenModelName: () => isImagenModelName,\n  listActions: () => listActions,\n  model: () => model\n});\nmodule.exports = __toCommonJS(imagen_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_model = __webpack_require__(/*! genkit/model */ \"(action-browser)/./node_modules/genkit/lib/model.js\");\nvar import_client = __webpack_require__(/*! ./client.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/client.js\");\nvar import_converters = __webpack_require__(/*! ./converters.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/converters.js\");\nvar import_utils = __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/utils.js\");\nconst ImagenConfigSchema = import_model.GenerationCommonConfigSchema.extend({\n  // TODO: Remove common config schema extension since Imagen models don't support\n  // most of the common config parameters. Also, add more parameters like sampleCount\n  // from the above reference.\n  language: import_genkit.z.enum([\"auto\", \"en\", \"es\", \"hi\", \"ja\", \"ko\", \"pt\", \"zh-TW\", \"zh\", \"zh-CN\"]).describe(\"Language of the prompt text.\").optional(),\n  aspectRatio: import_genkit.z.enum([\"1:1\", \"9:16\", \"16:9\", \"3:4\", \"4:3\"]).describe(\"Desired aspect ratio of the output image.\").optional(),\n  negativePrompt: import_genkit.z.string().describe(\n    'A description of what to discourage in the generated images. For example: \"animals\" (removes animals), \"blurry\" (makes the image clearer), \"text\" (removes text), or \"cropped\" (removes cropped images).'\n  ).optional(),\n  seed: import_genkit.z.number().int().min(1).max(2147483647).describe(\n    \"Controls the randomization of the image generation process. Use the same seed across requests to provide consistency, or change it to introduce variety in the response.\"\n  ).optional(),\n  location: import_genkit.z.string().describe(\"Google Cloud region e.g. us-central1.\").optional(),\n  personGeneration: import_genkit.z.enum([\"dont_allow\", \"allow_adult\", \"allow_all\"]).describe(\"Control if/how images of people will be generated by the model.\").optional(),\n  safetySetting: import_genkit.z.enum([\"block_most\", \"block_some\", \"block_few\", \"block_fewest\"]).describe(\"Adds a filter level to safety filtering.\").optional(),\n  addWatermark: import_genkit.z.boolean().describe(\"Add an invisible watermark to the generated images.\").optional(),\n  storageUri: import_genkit.z.string().describe(\"Cloud Storage URI to store the generated images.\").optional(),\n  mode: import_genkit.z.enum([\"upscale\"]).describe(\"Mode must be set for upscaling requests.\").optional(),\n  /**\n   * Describes the editing intention for the request.\n   *\n   * See https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api#edit_images_2 for details.\n   */\n  editConfig: import_genkit.z.object({\n    editMode: import_genkit.z.enum([\n      \"inpainting-insert\",\n      \"inpainting-remove\",\n      \"outpainting\",\n      \"product-image\"\n    ]).describe(\"Editing intention for the request.\").optional(),\n    maskMode: import_genkit.z.object({\n      maskType: import_genkit.z.enum([\"background\", \"foreground\", \"semantic\"]).describe(\n        '\"background\" automatically generates a mask for all regions except the primary subject(s) of the image, \"foreground\" automatically generates a mask for the primary subjects(s) of the image. \"semantic\" segments one or more of the segmentation classes using class ID.'\n      ),\n      classes: import_genkit.z.array(import_genkit.z.number()).describe(\"List of class IDs for segmentation.\").length(5).optional()\n    }).describe(\n      \"Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object.\"\n    ).optional(),\n    maskDilation: import_genkit.z.number().describe(\"Dilation percentage of the mask provided.\").min(0).max(1).optional(),\n    guidanceScale: import_genkit.z.number().describe(\n      \"Controls how much the model adheres to the text prompt. Large values increase output and prompt alignment, but may compromise image quality. Suggested values are 0-9 (low strength), 10-20 (medium strength), 21+ (high strength).\"\n    ).optional(),\n    productPosition: import_genkit.z.enum([\"reposition\", \"fixed\"]).describe(\n      \"Defines whether the product should stay fixed or be repositioned.\"\n    ).optional()\n  }).passthrough().optional(),\n  upscaleConfig: import_genkit.z.object({\n    upscaleFactor: import_genkit.z.enum([\"x2\", \"x4\"]).describe(\"The factor to upscale the image.\")\n  }).describe(\"Configuration for upscaling.\").optional()\n}).passthrough();\nfunction commonRef(name, info, configSchema = ImagenConfigSchema) {\n  return (0, import_model.modelRef)({\n    name: `vertexai/${name}`,\n    configSchema,\n    info: info ?? {\n      supports: {\n        media: true,\n        multiturn: false,\n        tools: false,\n        toolChoice: false,\n        systemRole: false,\n        output: [\"media\"]\n      }\n    }\n  });\n}\nconst GENERIC_MODEL = commonRef(\"imagen\", {\n  supports: {\n    media: true,\n    multiturn: true,\n    tools: true,\n    systemRole: true,\n    output: [\"media\"]\n  }\n});\nconst KNOWN_MODELS = {\n  \"imagen-3.0-generate-002\": commonRef(\"imagen-3.0-generate-002\"),\n  \"imagen-3.0-generate-001\": commonRef(\"imagen-3.0-generate-001\"),\n  \"imagen-3.0-capability-001\": commonRef(\"imagen-3.0-capability-001\"),\n  \"imagen-3.0-fast-generate-001\": commonRef(\"imagen-3.0-fast-generate-001\"),\n  \"imagen-4.0-generate-preview-06-06\": commonRef(\n    \"imagen-4.0-generate-preview-06-06\"\n  ),\n  \"imagen-4.0-ultra-generate-preview-06-06\": commonRef(\n    \"imagen-4.0-ultra-generate-preview-06-06\"\n  )\n};\nfunction isImagenModelName(value) {\n  return !!value?.startsWith(\"imagen-\");\n}\nfunction model(version, config = {}) {\n  const name = (0, import_utils.checkModelName)(version);\n  if (KNOWN_MODELS[name]) {\n    return KNOWN_MODELS[name].withConfig(config);\n  }\n  return (0, import_model.modelRef)({\n    name: `vertexai/${name}`,\n    config,\n    configSchema: ImagenConfigSchema,\n    info: {\n      ...GENERIC_MODEL.info\n    }\n  });\n}\nfunction listActions(models) {\n  return models.filter((m) => isImagenModelName((0, import_utils.modelName)(m.name))).map((m) => {\n    const ref = model(m.name);\n    return (0, import_genkit.modelActionMetadata)({\n      name: ref.name,\n      info: ref.info,\n      configSchema: ref.configSchema\n    });\n  });\n}\nfunction defineKnownModels(ai, clientOptions, pluginOptions) {\n  for (const name of Object.keys(KNOWN_MODELS)) {\n    defineModel(ai, name, clientOptions, pluginOptions);\n  }\n}\nfunction defineModel(ai, name, clientOptions, pluginOptions) {\n  const ref = model(name);\n  return ai.defineModel(\n    {\n      apiVersion: \"v2\",\n      name: ref.name,\n      ...ref.info,\n      configSchema: ref.configSchema\n    },\n    async (request, { abortSignal }) => {\n      const clientOpt = { ...clientOptions, signal: abortSignal };\n      const imagenPredictRequest = (0, import_converters.toImagenPredictRequest)(request);\n      const response = await (0, import_client.imagenPredict)(\n        (0, import_utils.extractVersion)(ref),\n        imagenPredictRequest,\n        clientOpt\n      );\n      if (!response.predictions || response.predictions.length == 0) {\n        throw new Error(\n          \"Model returned no predictions. Possibly due to content filters.\"\n        );\n      }\n      return (0, import_converters.fromImagenResponse)(response, request);\n    }\n  );\n}\nconst TEST_ONLY = {\n  GENERIC_MODEL,\n  KNOWN_MODELS\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=imagen.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/imagen.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@genkit-ai/google-genai/lib/vertexai/index.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar vertexai_exports = {};\n__export(vertexai_exports, {\n  default: () => vertexai_default,\n  vertexAI: () => vertexAI\n});\nmodule.exports = __toCommonJS(vertexai_exports);\nvar import_plugin = __webpack_require__(/*! genkit/plugin */ \"(action-browser)/./node_modules/genkit/lib/plugin.js\");\nvar import_client = __webpack_require__(/*! ./client.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/client.js\");\nvar embedder = __toESM(__webpack_require__(/*! ./embedder.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/embedder.js\"));\nvar gemini = __toESM(__webpack_require__(/*! ./gemini.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/gemini.js\"));\nvar imagen = __toESM(__webpack_require__(/*! ./imagen.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/imagen.js\"));\nvar lyria = __toESM(__webpack_require__(/*! ./lyria.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/lyria.js\"));\nvar veo = __toESM(__webpack_require__(/*! ./veo.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/veo.js\"));\nvar import_utils = __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/utils.js\");\n/**\n * @license\n *\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function initializer(ai, pluginOptions) {\n  const clientOptions = await (0, import_utils.getDerivedOptions)(pluginOptions);\n  veo.defineKnownModels(ai, clientOptions, pluginOptions);\n  imagen.defineKnownModels(ai, clientOptions, pluginOptions);\n  lyria.defineKnownModels(ai, clientOptions, pluginOptions);\n  gemini.defineKnownModels(ai, clientOptions, pluginOptions);\n  embedder.defineKnownModels(ai, clientOptions, pluginOptions);\n}\nasync function resolver(ai, actionType, actionName, pluginOptions) {\n  const clientOptions = await (0, import_utils.getDerivedOptions)(pluginOptions);\n  switch (actionType) {\n    case \"model\":\n      if (lyria.isLyriaModelName(actionName)) {\n        lyria.defineModel(ai, actionName, clientOptions, pluginOptions);\n      } else if (imagen.isImagenModelName(actionName)) {\n        imagen.defineModel(ai, actionName, clientOptions, pluginOptions);\n      } else if (veo.isVeoModelName(actionName)) {\n      } else {\n        gemini.defineModel(ai, actionName, clientOptions, pluginOptions);\n      }\n      break;\n    case \"background-model\":\n      if (veo.isVeoModelName(actionName)) {\n        veo.defineModel(ai, actionName, clientOptions, pluginOptions);\n      }\n      break;\n    case \"embedder\":\n      embedder.defineEmbedder(ai, actionName, clientOptions, pluginOptions);\n      break;\n    default:\n  }\n}\nasync function listActions(options) {\n  try {\n    const clientOptions = await (0, import_utils.getDerivedOptions)(options);\n    const models = await (0, import_client.listModels)(clientOptions);\n    return [\n      ...gemini.listActions(models),\n      ...imagen.listActions(models),\n      ...lyria.listActions(models),\n      ...veo.listActions(models)\n      // We don't list embedders here\n    ];\n  } catch (e) {\n    return [];\n  }\n}\nfunction vertexAIPlugin(options) {\n  let listActionsCache;\n  return (0, import_plugin.genkitPlugin)(\n    \"vertexai\",\n    async (ai) => await initializer(ai, options),\n    async (ai, actionType, actionName) => await resolver(ai, actionType, actionName, options),\n    async () => {\n      if (listActionsCache) return listActionsCache;\n      listActionsCache = await listActions(options);\n      return listActionsCache;\n    }\n  );\n}\nconst vertexAI = vertexAIPlugin;\nvertexAI.model = (name, config) => {\n  if (imagen.isImagenModelName(name)) {\n    return imagen.model(name, config);\n  }\n  if (lyria.isLyriaModelName(name)) {\n    return lyria.model(name, config);\n  }\n  if (veo.isVeoModelName(name)) {\n    return veo.model(name, config);\n  }\n  return gemini.model(name, config);\n};\nvertexAI.embedder = (name, config) => {\n  return embedder.model(name, config);\n};\nvar vertexai_default = vertexAI;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/lyria.js":
/*!********************************************************************!*\
  !*** ./node_modules/@genkit-ai/google-genai/lib/vertexai/lyria.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar lyria_exports = {};\n__export(lyria_exports, {\n  LyriaConfigSchema: () => LyriaConfigSchema,\n  TEST_ONLY: () => TEST_ONLY,\n  defineKnownModels: () => defineKnownModels,\n  defineModel: () => defineModel,\n  isLyriaModelName: () => isLyriaModelName,\n  listActions: () => listActions,\n  model: () => model\n});\nmodule.exports = __toCommonJS(lyria_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_client = __webpack_require__(/*! ./client.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/client.js\");\nvar import_converters = __webpack_require__(/*! ./converters.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/converters.js\");\nvar import_utils = __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/utils.js\");\nconst LyriaConfigSchema = import_genkit.z.object({\n  negativePrompt: import_genkit.z.string().optional().describe(\n    \"Optional. A description of what to exclude from the generated audio.\"\n  ),\n  seed: import_genkit.z.number().optional().describe(\n    \"Optional. A seed for deterministic generation. If provided, the model will attempt to produce the same audio given the same prompt and other parameters. Cannot be used with sample_count in the same request.\"\n  ),\n  sampleCount: import_genkit.z.number().optional().describe(\n    \"Optional. The number of audio samples to generate. Default is 1 if not specified and seed is not used. Cannot be used with seed in the same request.\"\n  )\n}).passthrough();\nfunction commonRef(name, info, configSchema = LyriaConfigSchema) {\n  return (0, import_genkit.modelRef)({\n    name: `vertexai/${name}`,\n    configSchema,\n    info: info ?? {\n      supports: {\n        media: true,\n        multiturn: false,\n        tools: false,\n        systemRole: false,\n        output: [\"media\"]\n      }\n    }\n  });\n}\nconst GENERIC_MODEL = commonRef(\"lyria\");\nconst KNOWN_MODELS = {\n  \"lyria-002\": commonRef(\"lyria-002\")\n};\nfunction isLyriaModelName(value) {\n  return !!value?.startsWith(\"lyria-\");\n}\nfunction model(version, config = {}) {\n  const name = (0, import_utils.checkModelName)(version);\n  return (0, import_genkit.modelRef)({\n    name: `vertexai/${name}`,\n    config,\n    configSchema: LyriaConfigSchema,\n    info: { ...GENERIC_MODEL.info }\n  });\n}\nfunction listActions(models) {\n  return models.filter((m) => isLyriaModelName(m.name)).map((m) => {\n    const ref = model(m.name);\n    return (0, import_genkit.modelActionMetadata)({\n      name: ref.name,\n      info: ref.info,\n      configSchema: ref.configSchema\n    });\n  });\n}\nfunction defineKnownModels(ai, clientOptions, pluginOptions) {\n  for (const name of Object.keys(KNOWN_MODELS)) {\n    defineModel(ai, name, clientOptions, pluginOptions);\n  }\n}\nfunction defineModel(ai, name, clientOptions, pluginOptions) {\n  const ref = model(name);\n  return ai.defineModel(\n    {\n      apiVersion: \"v2\",\n      name: ref.name,\n      ...ref.info,\n      configSchema: ref.configSchema\n    },\n    async (request, { abortSignal }) => {\n      const clientOpt = { ...clientOptions, signal: abortSignal };\n      const lyriaPredictRequest = (0, import_converters.toLyriaPredictRequest)(request);\n      const response = await (0, import_client.lyriaPredict)(\n        (0, import_utils.extractVersion)(ref),\n        lyriaPredictRequest,\n        clientOpt\n      );\n      if (!response.predictions || response.predictions.length == 0) {\n        throw new Error(\n          \"Model returned no predictions. Possibly due to content filters.\"\n        );\n      }\n      return (0, import_converters.fromLyriaResponse)(response, request);\n    }\n  );\n}\nconst TEST_ONLY = {\n  GENERIC_MODEL,\n  KNOWN_MODELS\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=lyria.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZS1nZW5haS9saWIvdmVydGV4YWkvbHlyaWEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxvQkFBb0IsbUJBQU8sQ0FBQyxtRUFBUTtBQUNwQyxvQkFBb0IsbUJBQU8sQ0FBQyxtR0FBYTtBQUN6Qyx3QkFBd0IsbUJBQU8sQ0FBQywyR0FBaUI7QUFDakQsbUJBQW1CLG1CQUFPLENBQUMsaUdBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLHNCQUFzQixLQUFLO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBLHNCQUFzQixLQUFLO0FBQzNCO0FBQ0E7QUFDQSxZQUFZO0FBQ1osR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsc0JBQXNCLGFBQWE7QUFDbkMsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBUUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtanMtYXBwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZ29vZ2xlLWdlbmFpL2xpYi92ZXJ0ZXhhaS9seXJpYS5qcz8xNzdiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBseXJpYV9leHBvcnRzID0ge307XG5fX2V4cG9ydChseXJpYV9leHBvcnRzLCB7XG4gIEx5cmlhQ29uZmlnU2NoZW1hOiAoKSA9PiBMeXJpYUNvbmZpZ1NjaGVtYSxcbiAgVEVTVF9PTkxZOiAoKSA9PiBURVNUX09OTFksXG4gIGRlZmluZUtub3duTW9kZWxzOiAoKSA9PiBkZWZpbmVLbm93bk1vZGVscyxcbiAgZGVmaW5lTW9kZWw6ICgpID0+IGRlZmluZU1vZGVsLFxuICBpc0x5cmlhTW9kZWxOYW1lOiAoKSA9PiBpc0x5cmlhTW9kZWxOYW1lLFxuICBsaXN0QWN0aW9uczogKCkgPT4gbGlzdEFjdGlvbnMsXG4gIG1vZGVsOiAoKSA9PiBtb2RlbFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhseXJpYV9leHBvcnRzKTtcbnZhciBpbXBvcnRfZ2Vua2l0ID0gcmVxdWlyZShcImdlbmtpdFwiKTtcbnZhciBpbXBvcnRfY2xpZW50ID0gcmVxdWlyZShcIi4vY2xpZW50LmpzXCIpO1xudmFyIGltcG9ydF9jb252ZXJ0ZXJzID0gcmVxdWlyZShcIi4vY29udmVydGVycy5qc1wiKTtcbnZhciBpbXBvcnRfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy5qc1wiKTtcbmNvbnN0IEx5cmlhQ29uZmlnU2NoZW1hID0gaW1wb3J0X2dlbmtpdC56Lm9iamVjdCh7XG4gIG5lZ2F0aXZlUHJvbXB0OiBpbXBvcnRfZ2Vua2l0Lnouc3RyaW5nKCkub3B0aW9uYWwoKS5kZXNjcmliZShcbiAgICBcIk9wdGlvbmFsLiBBIGRlc2NyaXB0aW9uIG9mIHdoYXQgdG8gZXhjbHVkZSBmcm9tIHRoZSBnZW5lcmF0ZWQgYXVkaW8uXCJcbiAgKSxcbiAgc2VlZDogaW1wb3J0X2dlbmtpdC56Lm51bWJlcigpLm9wdGlvbmFsKCkuZGVzY3JpYmUoXG4gICAgXCJPcHRpb25hbC4gQSBzZWVkIGZvciBkZXRlcm1pbmlzdGljIGdlbmVyYXRpb24uIElmIHByb3ZpZGVkLCB0aGUgbW9kZWwgd2lsbCBhdHRlbXB0IHRvIHByb2R1Y2UgdGhlIHNhbWUgYXVkaW8gZ2l2ZW4gdGhlIHNhbWUgcHJvbXB0IGFuZCBvdGhlciBwYXJhbWV0ZXJzLiBDYW5ub3QgYmUgdXNlZCB3aXRoIHNhbXBsZV9jb3VudCBpbiB0aGUgc2FtZSByZXF1ZXN0LlwiXG4gICksXG4gIHNhbXBsZUNvdW50OiBpbXBvcnRfZ2Vua2l0LnoubnVtYmVyKCkub3B0aW9uYWwoKS5kZXNjcmliZShcbiAgICBcIk9wdGlvbmFsLiBUaGUgbnVtYmVyIG9mIGF1ZGlvIHNhbXBsZXMgdG8gZ2VuZXJhdGUuIERlZmF1bHQgaXMgMSBpZiBub3Qgc3BlY2lmaWVkIGFuZCBzZWVkIGlzIG5vdCB1c2VkLiBDYW5ub3QgYmUgdXNlZCB3aXRoIHNlZWQgaW4gdGhlIHNhbWUgcmVxdWVzdC5cIlxuICApXG59KS5wYXNzdGhyb3VnaCgpO1xuZnVuY3Rpb24gY29tbW9uUmVmKG5hbWUsIGluZm8sIGNvbmZpZ1NjaGVtYSA9IEx5cmlhQ29uZmlnU2NoZW1hKSB7XG4gIHJldHVybiAoMCwgaW1wb3J0X2dlbmtpdC5tb2RlbFJlZikoe1xuICAgIG5hbWU6IGB2ZXJ0ZXhhaS8ke25hbWV9YCxcbiAgICBjb25maWdTY2hlbWEsXG4gICAgaW5mbzogaW5mbyA/PyB7XG4gICAgICBzdXBwb3J0czoge1xuICAgICAgICBtZWRpYTogdHJ1ZSxcbiAgICAgICAgbXVsdGl0dXJuOiBmYWxzZSxcbiAgICAgICAgdG9vbHM6IGZhbHNlLFxuICAgICAgICBzeXN0ZW1Sb2xlOiBmYWxzZSxcbiAgICAgICAgb3V0cHV0OiBbXCJtZWRpYVwiXVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5jb25zdCBHRU5FUklDX01PREVMID0gY29tbW9uUmVmKFwibHlyaWFcIik7XG5jb25zdCBLTk9XTl9NT0RFTFMgPSB7XG4gIFwibHlyaWEtMDAyXCI6IGNvbW1vblJlZihcImx5cmlhLTAwMlwiKVxufTtcbmZ1bmN0aW9uIGlzTHlyaWFNb2RlbE5hbWUodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWU/LnN0YXJ0c1dpdGgoXCJseXJpYS1cIik7XG59XG5mdW5jdGlvbiBtb2RlbCh2ZXJzaW9uLCBjb25maWcgPSB7fSkge1xuICBjb25zdCBuYW1lID0gKDAsIGltcG9ydF91dGlscy5jaGVja01vZGVsTmFtZSkodmVyc2lvbik7XG4gIHJldHVybiAoMCwgaW1wb3J0X2dlbmtpdC5tb2RlbFJlZikoe1xuICAgIG5hbWU6IGB2ZXJ0ZXhhaS8ke25hbWV9YCxcbiAgICBjb25maWcsXG4gICAgY29uZmlnU2NoZW1hOiBMeXJpYUNvbmZpZ1NjaGVtYSxcbiAgICBpbmZvOiB7IC4uLkdFTkVSSUNfTU9ERUwuaW5mbyB9XG4gIH0pO1xufVxuZnVuY3Rpb24gbGlzdEFjdGlvbnMobW9kZWxzKSB7XG4gIHJldHVybiBtb2RlbHMuZmlsdGVyKChtKSA9PiBpc0x5cmlhTW9kZWxOYW1lKG0ubmFtZSkpLm1hcCgobSkgPT4ge1xuICAgIGNvbnN0IHJlZiA9IG1vZGVsKG0ubmFtZSk7XG4gICAgcmV0dXJuICgwLCBpbXBvcnRfZ2Vua2l0Lm1vZGVsQWN0aW9uTWV0YWRhdGEpKHtcbiAgICAgIG5hbWU6IHJlZi5uYW1lLFxuICAgICAgaW5mbzogcmVmLmluZm8sXG4gICAgICBjb25maWdTY2hlbWE6IHJlZi5jb25maWdTY2hlbWFcbiAgICB9KTtcbiAgfSk7XG59XG5mdW5jdGlvbiBkZWZpbmVLbm93bk1vZGVscyhhaSwgY2xpZW50T3B0aW9ucywgcGx1Z2luT3B0aW9ucykge1xuICBmb3IgKGNvbnN0IG5hbWUgb2YgT2JqZWN0LmtleXMoS05PV05fTU9ERUxTKSkge1xuICAgIGRlZmluZU1vZGVsKGFpLCBuYW1lLCBjbGllbnRPcHRpb25zLCBwbHVnaW5PcHRpb25zKTtcbiAgfVxufVxuZnVuY3Rpb24gZGVmaW5lTW9kZWwoYWksIG5hbWUsIGNsaWVudE9wdGlvbnMsIHBsdWdpbk9wdGlvbnMpIHtcbiAgY29uc3QgcmVmID0gbW9kZWwobmFtZSk7XG4gIHJldHVybiBhaS5kZWZpbmVNb2RlbChcbiAgICB7XG4gICAgICBhcGlWZXJzaW9uOiBcInYyXCIsXG4gICAgICBuYW1lOiByZWYubmFtZSxcbiAgICAgIC4uLnJlZi5pbmZvLFxuICAgICAgY29uZmlnU2NoZW1hOiByZWYuY29uZmlnU2NoZW1hXG4gICAgfSxcbiAgICBhc3luYyAocmVxdWVzdCwgeyBhYm9ydFNpZ25hbCB9KSA9PiB7XG4gICAgICBjb25zdCBjbGllbnRPcHQgPSB7IC4uLmNsaWVudE9wdGlvbnMsIHNpZ25hbDogYWJvcnRTaWduYWwgfTtcbiAgICAgIGNvbnN0IGx5cmlhUHJlZGljdFJlcXVlc3QgPSAoMCwgaW1wb3J0X2NvbnZlcnRlcnMudG9MeXJpYVByZWRpY3RSZXF1ZXN0KShyZXF1ZXN0KTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIGltcG9ydF9jbGllbnQubHlyaWFQcmVkaWN0KShcbiAgICAgICAgKDAsIGltcG9ydF91dGlscy5leHRyYWN0VmVyc2lvbikocmVmKSxcbiAgICAgICAgbHlyaWFQcmVkaWN0UmVxdWVzdCxcbiAgICAgICAgY2xpZW50T3B0XG4gICAgICApO1xuICAgICAgaWYgKCFyZXNwb25zZS5wcmVkaWN0aW9ucyB8fCByZXNwb25zZS5wcmVkaWN0aW9ucy5sZW5ndGggPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgXCJNb2RlbCByZXR1cm5lZCBubyBwcmVkaWN0aW9ucy4gUG9zc2libHkgZHVlIHRvIGNvbnRlbnQgZmlsdGVycy5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuICgwLCBpbXBvcnRfY29udmVydGVycy5mcm9tTHlyaWFSZXNwb25zZSkocmVzcG9uc2UsIHJlcXVlc3QpO1xuICAgIH1cbiAgKTtcbn1cbmNvbnN0IFRFU1RfT05MWSA9IHtcbiAgR0VORVJJQ19NT0RFTCxcbiAgS05PV05fTU9ERUxTXG59O1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIEx5cmlhQ29uZmlnU2NoZW1hLFxuICBURVNUX09OTFksXG4gIGRlZmluZUtub3duTW9kZWxzLFxuICBkZWZpbmVNb2RlbCxcbiAgaXNMeXJpYU1vZGVsTmFtZSxcbiAgbGlzdEFjdGlvbnMsXG4gIG1vZGVsXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWx5cmlhLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/lyria.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/types.js":
/*!********************************************************************!*\
  !*** ./node_modules/@genkit-ai/google-genai/lib/vertexai/types.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar types_exports = {};\n__export(types_exports, {\n  FunctionCallingMode: () => import_types.FunctionCallingMode,\n  HarmBlockThreshold: () => import_types.HarmBlockThreshold,\n  HarmCategory: () => import_types.HarmCategory,\n  TaskTypeSchema: () => import_types.TaskTypeSchema,\n  isCodeExecutionTool: () => import_types.isCodeExecutionTool,\n  isFunctionDeclarationsTool: () => import_types.isFunctionDeclarationsTool,\n  isGoogleSearchRetrievalTool: () => import_types.isGoogleSearchRetrievalTool,\n  isMultimodalEmbeddingPrediction: () => isMultimodalEmbeddingPrediction,\n  isObject: () => import_types.isObject,\n  isRetrievalTool: () => import_types.isRetrievalTool\n});\nmodule.exports = __toCommonJS(types_exports);\nvar import_types = __webpack_require__(/*! ../common/types.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/common/types.js\");\nfunction isMultimodalEmbeddingPrediction(value) {\n  if (!(0, import_types.isObject)(value)) {\n    return false;\n  }\n  if (!value.textEmbedding && !value.imageEmbedding && !value.videoEmbeddings) {\n    return false;\n  }\n  if (value.textEmbedding && !Array.isArray(value.textEmbedding)) {\n    return false;\n  }\n  if (value.imageEmbedding && !Array.isArray(value.imageEmbedding)) {\n    return false;\n  }\n  if (value.videoEmbeddings && !Array.isArray(value.videoEmbeddings)) {\n    return false;\n  }\n  if (value.videoEmbeddings) {\n    for (const emb of value.videoEmbeddings) {\n      if (!(0, import_types.isObject)(emb)) {\n        return false;\n      }\n      if (!emb.embedding || !Array.isArray(emb.embedding)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZS1nZW5haS9saWIvdmVydGV4YWkvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxtQkFBbUIsbUJBQU8sQ0FBQyx1R0FBb0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FXTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1qcy1hcHAvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9nb29nbGUtZ2VuYWkvbGliL3ZlcnRleGFpL3R5cGVzLmpzP2Y1MzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHR5cGVzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHR5cGVzX2V4cG9ydHMsIHtcbiAgRnVuY3Rpb25DYWxsaW5nTW9kZTogKCkgPT4gaW1wb3J0X3R5cGVzLkZ1bmN0aW9uQ2FsbGluZ01vZGUsXG4gIEhhcm1CbG9ja1RocmVzaG9sZDogKCkgPT4gaW1wb3J0X3R5cGVzLkhhcm1CbG9ja1RocmVzaG9sZCxcbiAgSGFybUNhdGVnb3J5OiAoKSA9PiBpbXBvcnRfdHlwZXMuSGFybUNhdGVnb3J5LFxuICBUYXNrVHlwZVNjaGVtYTogKCkgPT4gaW1wb3J0X3R5cGVzLlRhc2tUeXBlU2NoZW1hLFxuICBpc0NvZGVFeGVjdXRpb25Ub29sOiAoKSA9PiBpbXBvcnRfdHlwZXMuaXNDb2RlRXhlY3V0aW9uVG9vbCxcbiAgaXNGdW5jdGlvbkRlY2xhcmF0aW9uc1Rvb2w6ICgpID0+IGltcG9ydF90eXBlcy5pc0Z1bmN0aW9uRGVjbGFyYXRpb25zVG9vbCxcbiAgaXNHb29nbGVTZWFyY2hSZXRyaWV2YWxUb29sOiAoKSA9PiBpbXBvcnRfdHlwZXMuaXNHb29nbGVTZWFyY2hSZXRyaWV2YWxUb29sLFxuICBpc011bHRpbW9kYWxFbWJlZGRpbmdQcmVkaWN0aW9uOiAoKSA9PiBpc011bHRpbW9kYWxFbWJlZGRpbmdQcmVkaWN0aW9uLFxuICBpc09iamVjdDogKCkgPT4gaW1wb3J0X3R5cGVzLmlzT2JqZWN0LFxuICBpc1JldHJpZXZhbFRvb2w6ICgpID0+IGltcG9ydF90eXBlcy5pc1JldHJpZXZhbFRvb2xcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlModHlwZXNfZXhwb3J0cyk7XG52YXIgaW1wb3J0X3R5cGVzID0gcmVxdWlyZShcIi4uL2NvbW1vbi90eXBlcy5qc1wiKTtcbmZ1bmN0aW9uIGlzTXVsdGltb2RhbEVtYmVkZGluZ1ByZWRpY3Rpb24odmFsdWUpIHtcbiAgaWYgKCEoMCwgaW1wb3J0X3R5cGVzLmlzT2JqZWN0KSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKCF2YWx1ZS50ZXh0RW1iZWRkaW5nICYmICF2YWx1ZS5pbWFnZUVtYmVkZGluZyAmJiAhdmFsdWUudmlkZW9FbWJlZGRpbmdzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh2YWx1ZS50ZXh0RW1iZWRkaW5nICYmICFBcnJheS5pc0FycmF5KHZhbHVlLnRleHRFbWJlZGRpbmcpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh2YWx1ZS5pbWFnZUVtYmVkZGluZyAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZS5pbWFnZUVtYmVkZGluZykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHZhbHVlLnZpZGVvRW1iZWRkaW5ncyAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZS52aWRlb0VtYmVkZGluZ3MpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh2YWx1ZS52aWRlb0VtYmVkZGluZ3MpIHtcbiAgICBmb3IgKGNvbnN0IGVtYiBvZiB2YWx1ZS52aWRlb0VtYmVkZGluZ3MpIHtcbiAgICAgIGlmICghKDAsIGltcG9ydF90eXBlcy5pc09iamVjdCkoZW1iKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoIWVtYi5lbWJlZGRpbmcgfHwgIUFycmF5LmlzQXJyYXkoZW1iLmVtYmVkZGluZykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBGdW5jdGlvbkNhbGxpbmdNb2RlLFxuICBIYXJtQmxvY2tUaHJlc2hvbGQsXG4gIEhhcm1DYXRlZ29yeSxcbiAgVGFza1R5cGVTY2hlbWEsXG4gIGlzQ29kZUV4ZWN1dGlvblRvb2wsXG4gIGlzRnVuY3Rpb25EZWNsYXJhdGlvbnNUb29sLFxuICBpc0dvb2dsZVNlYXJjaFJldHJpZXZhbFRvb2wsXG4gIGlzTXVsdGltb2RhbEVtYmVkZGluZ1ByZWRpY3Rpb24sXG4gIGlzT2JqZWN0LFxuICBpc1JldHJpZXZhbFRvb2xcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/types.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/utils.js":
/*!********************************************************************!*\
  !*** ./node_modules/@genkit-ai/google-genai/lib/vertexai/utils.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar utils_exports = {};\n__export(utils_exports, {\n  API_KEY_FALSE_ERROR: () => API_KEY_FALSE_ERROR,\n  MISSING_API_KEY_ERROR: () => MISSING_API_KEY_ERROR,\n  NOT_SUPPORTED_IN_EXPRESS_ERROR: () => NOT_SUPPORTED_IN_EXPRESS_ERROR,\n  TEST_ONLY: () => TEST_ONLY,\n  calculateApiKey: () => calculateApiKey,\n  checkApiKey: () => checkApiKey,\n  checkModelName: () => import_utils.checkModelName,\n  checkSupportedMimeType: () => import_utils.checkSupportedMimeType,\n  checkSupportedResourceMethod: () => checkSupportedResourceMethod,\n  cleanSchema: () => import_utils.cleanSchema,\n  extractMedia: () => import_utils.extractMedia,\n  extractMimeType: () => import_utils.extractMimeType,\n  extractText: () => import_utils.extractText,\n  extractVersion: () => import_utils.extractVersion,\n  getApiKeyFromEnvVar: () => getApiKeyFromEnvVar,\n  getDerivedOptions: () => getDerivedOptions,\n  modelName: () => import_utils.modelName\n});\nmodule.exports = __toCommonJS(utils_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_google_auth_library = __webpack_require__(/*! google-auth-library */ \"(action-browser)/./node_modules/google-auth-library/build/src/index.js\");\nvar import_utils = __webpack_require__(/*! ../common/utils.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/common/utils.js\");\nconst CLOUD_PLATFORM_OAUTH_SCOPE = \"https://www.googleapis.com/auth/cloud-platform\";\nfunction parseFirebaseProjectId() {\n  if (!process.env.FIREBASE_CONFIG) return void 0;\n  try {\n    return JSON.parse(process.env.FIREBASE_CONFIG).projectId;\n  } catch {\n    return void 0;\n  }\n}\nlet __mockDerivedOptions = void 0;\nfunction setMockDerivedOptions(options) {\n  __mockDerivedOptions = options;\n}\nconst TEST_ONLY = { setMockDerivedOptions };\nasync function getDerivedOptions(options, AuthClass = import_google_auth_library.GoogleAuth) {\n  if (__mockDerivedOptions) {\n    return Promise.resolve(__mockDerivedOptions);\n  }\n  if (options?.location == \"global\") {\n    return await getGlobalDerivedOptions(AuthClass, options);\n  } else if (options?.location) {\n    return await getRegionalDerivedOptions(AuthClass, options);\n  } else if (options?.apiKey !== void 0) {\n    return getExpressDerivedOptions(options);\n  }\n  try {\n    const regionalOptions = await getRegionalDerivedOptions(AuthClass, options);\n    return regionalOptions;\n  } catch (e) {\n  }\n  try {\n    const globalOptions = await getGlobalDerivedOptions(AuthClass, options);\n    return globalOptions;\n  } catch (e) {\n  }\n  try {\n    const expressOptions = getExpressDerivedOptions(options);\n    return expressOptions;\n  } catch (e) {\n  }\n  throw new import_genkit.GenkitError({\n    status: \"INVALID_ARGUMENT\",\n    message: \"Unable to determine client options. Please set either apiKey or projectId and location\"\n  });\n}\nasync function getGlobalDerivedOptions(AuthClass, options) {\n  let authOptions = options?.googleAuth;\n  let authClient;\n  const providedProjectId = options?.projectId || process.env.GCLOUD_PROJECT || parseFirebaseProjectId();\n  if (process.env.GCLOUD_SERVICE_ACCOUNT_CREDS) {\n    const serviceAccountCreds = JSON.parse(\n      process.env.GCLOUD_SERVICE_ACCOUNT_CREDS\n    );\n    authOptions = {\n      credentials: serviceAccountCreds,\n      scopes: [CLOUD_PLATFORM_OAUTH_SCOPE],\n      projectId: providedProjectId\n    };\n    authClient = new AuthClass(authOptions);\n  } else {\n    authClient = new AuthClass(\n      authOptions ?? {\n        scopes: [CLOUD_PLATFORM_OAUTH_SCOPE],\n        projectId: providedProjectId\n      }\n    );\n  }\n  const projectId = options?.projectId || process.env.GCLOUD_PROJECT || await authClient.getProjectId();\n  if (!projectId) {\n    throw new Error(\n      `VertexAI Plugin is missing the 'project' configuration. Please set the 'GCLOUD_PROJECT' environment variable or explicitly pass 'project' into genkit config.`\n    );\n  }\n  const clientOpt = {\n    kind: \"global\",\n    location: \"global\",\n    projectId,\n    authClient\n  };\n  if (options?.apiKey) {\n    clientOpt.apiKey = options.apiKey;\n  }\n  return clientOpt;\n}\nfunction getExpressDerivedOptions(options) {\n  const apiKey = checkApiKey(options?.apiKey);\n  return {\n    kind: \"express\",\n    apiKey\n  };\n}\nasync function getRegionalDerivedOptions(AuthClass, options) {\n  let authOptions = options?.googleAuth;\n  let authClient;\n  const providedProjectId = options?.projectId || process.env.GCLOUD_PROJECT || parseFirebaseProjectId();\n  if (process.env.GCLOUD_SERVICE_ACCOUNT_CREDS) {\n    const serviceAccountCreds = JSON.parse(\n      process.env.GCLOUD_SERVICE_ACCOUNT_CREDS\n    );\n    authOptions = {\n      credentials: serviceAccountCreds,\n      scopes: [CLOUD_PLATFORM_OAUTH_SCOPE],\n      projectId: providedProjectId\n    };\n    authClient = new AuthClass(authOptions);\n  } else {\n    authClient = new AuthClass(\n      authOptions ?? {\n        scopes: [CLOUD_PLATFORM_OAUTH_SCOPE],\n        projectId: providedProjectId\n      }\n    );\n  }\n  const projectId = options?.projectId || process.env.GCLOUD_PROJECT || await authClient.getProjectId();\n  const location = options?.location || process.env.GCLOUD_LOCATION || \"us-central1\";\n  if (!location) {\n    throw new Error(\n      `VertexAI Plugin is missing the 'location' configuration. Please set the 'GCLOUD_LOCATION' environment variable or explicitly pass 'location' into genkit config.`\n    );\n  }\n  if (!projectId) {\n    throw new Error(\n      `VertexAI Plugin is missing the 'project' configuration. Please set the 'GCLOUD_PROJECT' environment variable or explicitly pass 'project' into genkit config.`\n    );\n  }\n  const clientOpt = {\n    kind: \"regional\",\n    location,\n    projectId,\n    authClient\n  };\n  if (options?.apiKey) {\n    clientOpt.apiKey = options.apiKey;\n  }\n  return clientOpt;\n}\nfunction getApiKeyFromEnvVar() {\n  return process.env.VERTEX_API_KEY || process.env.GOOGLE_API_KEY || process.env.GOOGLE_GENAI_API_KEY;\n}\nconst MISSING_API_KEY_ERROR = new import_genkit.GenkitError({\n  status: \"FAILED_PRECONDITION\",\n  message: \"Please pass in the API key or set the VERTEX_API_KEY or GOOGLE_API_KEY environment variable.\\nFor more details see https://firebase.google.com/docs/genkit/plugins/google-genai\"\n});\nconst API_KEY_FALSE_ERROR = new import_genkit.GenkitError({\n  status: \"INVALID_ARGUMENT\",\n  message: \"VertexAI plugin was initialized with {apiKey: false} but no apiKey configuration was passed at call time.\"\n});\nconst NOT_SUPPORTED_IN_EXPRESS_ERROR = new import_genkit.GenkitError({\n  status: \"PERMISSION_DENIED\",\n  message: \"This method or model is not supported in Vertex AI Express Mode.\\nFor more details see https://cloud.google.com/vertex-ai/generative-ai/docs/start/express-mode/vertex-ai-express-mode-api-reference\"\n});\nfunction checkApiKey(pluginApiKey) {\n  let apiKey;\n  if (pluginApiKey !== false) {\n    apiKey = pluginApiKey || getApiKeyFromEnvVar();\n  }\n  if (pluginApiKey !== false && !apiKey) {\n    throw MISSING_API_KEY_ERROR;\n  }\n  return apiKey;\n}\nfunction calculateApiKey(pluginApiKey, requestApiKey) {\n  let apiKey;\n  if (pluginApiKey !== false) {\n    apiKey = pluginApiKey || getApiKeyFromEnvVar();\n  }\n  apiKey = requestApiKey || apiKey;\n  if (pluginApiKey === false && !requestApiKey) {\n    throw API_KEY_FALSE_ERROR;\n  }\n  if (!apiKey) {\n    throw MISSING_API_KEY_ERROR;\n  }\n  return apiKey;\n}\nfunction checkSupportedResourceMethod(params) {\n  if (params.resourcePath == \"\") {\n    return;\n  }\n  const supportedExpressMethods = [\n    \"countTokens\",\n    \"generateContent\",\n    \"streamGenerateContent\"\n  ];\n  if (params.clientOptions.kind === \"express\" && (!supportedExpressMethods.includes(params.resourceMethod ?? \"\") || params.resourcePath?.includes(\"endpoints/\"))) {\n    throw NOT_SUPPORTED_IN_EXPRESS_ERROR;\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/utils.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/veo.js":
/*!******************************************************************!*\
  !*** ./node_modules/@genkit-ai/google-genai/lib/vertexai/veo.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar veo_exports = {};\n__export(veo_exports, {\n  TEST_ONLY: () => TEST_ONLY,\n  VeoConfigSchema: () => VeoConfigSchema,\n  defineKnownModels: () => defineKnownModels,\n  defineModel: () => defineModel,\n  isVeoModelName: () => isVeoModelName,\n  listActions: () => listActions,\n  model: () => model\n});\nmodule.exports = __toCommonJS(veo_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_client = __webpack_require__(/*! ./client.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/client.js\");\nvar import_converters = __webpack_require__(/*! ./converters.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/converters.js\");\nvar import_utils = __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/utils.js\");\nconst VeoConfigSchema = import_genkit.z.object({\n  sampleCount: import_genkit.z.number().optional().describe(\"Number of output videos\"),\n  storageUri: import_genkit.z.string().optional().describe(\"The gcs bucket where to save the generated videos\"),\n  fps: import_genkit.z.number().optional().describe(\"Frames per second for video generation\"),\n  durationSeconds: import_genkit.z.number().optional().describe(\"Duration of the clip for video generation in seconds\"),\n  seed: import_genkit.z.number().optional().describe(\n    \"The RNG seed. If RNG seed is exactly same for each request with unchanged inputs, the prediction results will be consistent. Otherwise, a random RNG seed will be used each time to produce a different result. If the sample count is greater than 1, random seeds will be used for each sample.\"\n  ),\n  aspectRatio: import_genkit.z.enum([\"9:16\", \"16:9\"]).optional().describe(\"The aspect ratio for the generated video\"),\n  resolution: import_genkit.z.enum([\"720p\", \"1080p\"]).optional().describe(\"The resolution for the generated video\"),\n  personGeneration: import_genkit.z.enum([\"dont_allow\", \"allow_adult\", \"allow_all\"]).optional().describe(\n    \"Specifies the policy for generating persons in videos, including age restrictions\"\n  ),\n  pubsubTopic: import_genkit.z.string().optional().describe(\"The pubsub topic to publish the video generation progress to\"),\n  negativePrompt: import_genkit.z.string().optional().describe(\n    \"In addition to the text context, negative prompts can be explicitly stated here to help generate the video\"\n  ),\n  enhancePrompt: import_genkit.z.boolean().optional().describe(\n    \"If true, the prompt will be improved before it is used to generate videos. The RNG seed, if provided, will not result in consistent results if prompts are enhanced.\"\n  ),\n  generateAudio: import_genkit.z.boolean().optional().describe(\"If true, audio will be generated along with the video\"),\n  compressionQuality: import_genkit.z.enum([\"optimized\", \"lossless\"]).default(\"optimized\").optional().describe(\"Compression quality of the generated video\")\n}).passthrough();\nfunction commonRef(name, info, configSchema = VeoConfigSchema) {\n  return (0, import_genkit.modelRef)({\n    name: `vertexai/${name}`,\n    configSchema,\n    info: info ?? {\n      supports: {\n        media: true,\n        multiturn: false,\n        tools: false,\n        systemRole: false,\n        output: [\"media\"],\n        longRunning: true\n      }\n    }\n    // TODO(ifielker): Remove this cast if we fix longRunning\n  });\n}\nconst GENERIC_MODEL = commonRef(\"veo\");\nconst KNOWN_MODELS = {\n  \"veo-2.0-generate-001\": commonRef(\"veo-2.0-generate-001\"),\n  \"veo-3.0-generate-001\": commonRef(\"veo-3.0-generate-001\"),\n  \"veo-3.0-fast-generate-001\": commonRef(\"veo-3.0-fast-generate-001\"),\n  \"veo-3.0-generate-preview\": commonRef(\"veo-3.0-generate-preview\"),\n  \"veo-3.0-fast-generate-preview\": commonRef(\"veo-3.0-fast-generate-preview\")\n};\nfunction isVeoModelName(value) {\n  return !!value?.startsWith(\"veo-\");\n}\nfunction model(version, config = {}) {\n  const name = (0, import_utils.checkModelName)(version);\n  return (0, import_genkit.modelRef)({\n    name: `vertexai/${name}`,\n    config,\n    configSchema: VeoConfigSchema,\n    info: { ...GENERIC_MODEL.info }\n  });\n}\nfunction listActions(models) {\n  return models.filter((m) => isVeoModelName(m.name)).map((m) => {\n    const ref = model(m.name);\n    return (0, import_genkit.modelActionMetadata)({\n      name: ref.name,\n      info: ref.info,\n      configSchema: ref.configSchema\n    });\n  });\n}\nfunction defineKnownModels(ai, clientOptions, pluginOptions) {\n  for (const name of Object.keys(KNOWN_MODELS)) {\n    defineModel(ai, name, clientOptions, pluginOptions);\n  }\n}\nfunction defineModel(ai, name, clientOptions, pluginOptions) {\n  const ref = model(name);\n  return ai.defineBackgroundModel({\n    name: ref.name,\n    ...ref.info,\n    configSchema: ref.configSchema,\n    async start(request) {\n      const veoPredictRequest = (0, import_converters.toVeoPredictRequest)(request);\n      const response = await (0, import_client.veoPredict)(\n        (0, import_utils.extractVersion)(ref),\n        veoPredictRequest,\n        clientOptions\n      );\n      return (0, import_converters.fromVeoOperation)(response);\n    },\n    async check(operation) {\n      const response = await (0, import_client.veoCheckOperation)(\n        (0, import_converters.toVeoModel)(operation),\n        (0, import_converters.toVeoOperationRequest)(operation),\n        clientOptions\n      );\n      return (0, import_converters.fromVeoOperation)(response);\n    }\n  });\n}\nconst TEST_ONLY = {\n  GENERIC_MODEL,\n  KNOWN_MODELS\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=veo.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/veo.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/google-genai/lib/index.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@genkit-ai/google-genai/lib/index.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   googleAI: () => (/* reexport safe */ _googleai_index_js__WEBPACK_IMPORTED_MODULE_0__.googleAI),\n/* harmony export */   vertexAI: () => (/* reexport safe */ _vertexai_index_js__WEBPACK_IMPORTED_MODULE_1__.vertexAI)\n/* harmony export */ });\n/* harmony import */ var _googleai_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./googleai/index.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/googleai/index.js\");\n/* harmony import */ var _vertexai_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vertexai/index.js */ \"(action-browser)/./node_modules/@genkit-ai/google-genai/lib/vertexai/index.js\");\n\n\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZS1nZW5haS9saWIvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFNkI7QUFDa0I7QUFJN0M7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtanMtYXBwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZ29vZ2xlLWdlbmFpL2xpYi9pbmRleC5tanM/ZDM2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBnb29nbGVBSVxufSBmcm9tIFwiLi9nb29nbGVhaS9pbmRleC5qc1wiO1xuaW1wb3J0IHsgdmVydGV4QUkgfSBmcm9tIFwiLi92ZXJ0ZXhhaS9pbmRleC5qc1wiO1xuZXhwb3J0IHtcbiAgZ29vZ2xlQUksXG4gIHZlcnRleEFJXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/google-genai/lib/index.mjs\n");

/***/ })

};
;